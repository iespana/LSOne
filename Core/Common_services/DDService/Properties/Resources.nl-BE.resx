<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Close" xml:space="preserve">
    <value>Sluiten</value>
  </data>
  <data name="DataDirectorConnectedMsg" xml:space="preserve">
    <value>Verbonden met Data Director</value>
  </data>
  <data name="DataDirectorConnectingMsg" xml:space="preserve">
    <value>Verbinding tot stand brengen ...</value>
  </data>
  <data name="DataDirectorDialogReadDesign" xml:space="preserve">
    <value>Ontwerp lezen</value>
  </data>
  <data name="DataDirectorDialogTestConnection" xml:space="preserve">
    <value>Testverbinding</value>
  </data>
  <data name="DataDirectorErrorFormatMsg" xml:space="preserve">
    <value>{0} / foutcode: {1}</value>
  </data>
  <data name="DataDirectorErrorMsg" xml:space="preserve">
    <value>Fout in Data Director: {0}</value>
  </data>
  <data name="DataDirectorExceptionMsg" xml:space="preserve">
    <value>Onverwerkte uitzondering in Data Director: {0}, {1}</value>
  </data>
  <data name="DataDirectorInitializingMsg" xml:space="preserve">
    <value>Aan het initialiseren ...</value>
  </data>
  <data name="DataDirectorNoAnswerError" xml:space="preserve">
    <value>Geen antwoord ontvangen: {0}</value>
  </data>
  <data name="DataDirectorOperationCancelledMsg" xml:space="preserve">
    <value>Handeling geannuleerd</value>
  </data>
  <data name="DataDirectorOperationOkMsg" xml:space="preserve">
    <value>Handeling met succes voltooid</value>
  </data>
  <data name="DataDirectorReadFieldsForTablesMsg" xml:space="preserve">
    <value>Velden voor {0} tabellen lezen</value>
  </data>
  <data name="DataDirectorReadingFieldsMsg" xml:space="preserve">
    <value>Velden aan het lezen</value>
  </data>
  <data name="DataDirectorSavingFieldsMsg" xml:space="preserve">
    <value>Databasevelden aan het opslaan</value>
  </data>
  <data name="DataDirectorSavingTablesMsg" xml:space="preserve">
    <value>Databasetabellen aan het opslaan</value>
  </data>
  <data name="DataDirectorSendFailedError" xml:space="preserve">
    <value>Verzending mislukt: {0}</value>
  </data>
  <data name="DataDirectorTablesReadMsg" xml:space="preserve">
    <value>Gelezen tabellen: {0}</value>
  </data>
  <data name="DataDirectorTestingMsg" xml:space="preserve">
    <value>Verbinding aan het testen...</value>
  </data>
  <data name="JobRun" xml:space="preserve">
    <value>Job uitvoeren</value>
  </data>
  <data name="JobRunAsNormal" xml:space="preserve">
    <value>Job normaal uitvoeren</value>
  </data>
  <data name="JobRunConfirmMsg" xml:space="preserve">
    <value>Wilt u job {0} uitvoeren?</value>
  </data>
  <data name="JobRunErrorMsg" xml:space="preserve">
    <value>Er is een fout opgetreden tijdens de aanvraag om job {0}: {1} uit te voeren</value>
  </data>
  <data name="JobRunExceptionMsg" xml:space="preserve">
    <value>Er is een onverwerkte uitzondering opgetreden tijdens een poging om een job uit te voeren: {0}, {1}</value>
  </data>
  <data name="JobRunHeader" xml:space="preserve">
    <value>Job uitvoeren</value>
  </data>
  <data name="JobRunNoResponseMsg" xml:space="preserve">
    <value>De Planner service heeft niet gereageerd op mijn verzoek. Controleer of de service actief is en geconfigureerd of dat de Planner instellingen naar de juiste host verwijzen.</value>
  </data>
  <data name="JobRunOkMsg" xml:space="preserve">
    <value>Job {0} werd met succes aangeboden voor uitvoering.</value>
  </data>
  <data name="JobRunServiceError" xml:space="preserve">
    <value>De Planner service gaf volgende foutmelding: {0}</value>
  </data>
  <data name="JobRunValidationFailureMsg" xml:space="preserve">
    <value>De job kan niet worden uitgevoerd omdat de validering is mislukt.



{0}</value>
  </data>
  <data name="RunJobErrorStatusFormat" xml:space="preserve">
    <value>{0} job(s) bevatten fouten, zie joblog of berichtenlog voor details.</value>
  </data>
  <data name="RunJobPendingStatusFormat" xml:space="preserve">
    <value>{0} planner job(s) worden aangeboden.</value>
  </data>
</root>