<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Close" xml:space="preserve">
    <value>Fermer</value>
  </data>
  <data name="DataDirectorConnectedMsg" xml:space="preserve">
    <value>Connecté au Directeur de données</value>
  </data>
  <data name="DataDirectorConnectingMsg" xml:space="preserve">
    <value>Connexion...</value>
  </data>
  <data name="DataDirectorDialogReadDesign" xml:space="preserve">
    <value>Lire la conception</value>
  </data>
  <data name="DataDirectorDialogTestConnection" xml:space="preserve">
    <value>Tester la connexion</value>
  </data>
  <data name="DataDirectorErrorFormatMsg" xml:space="preserve">
    <value>{0} / Code d'erreur : {1}</value>
  </data>
  <data name="DataDirectorErrorMsg" xml:space="preserve">
    <value>Erreur dans le Directeur de données : {0}</value>
  </data>
  <data name="DataDirectorExceptionMsg" xml:space="preserve">
    <value>Exception non prise en charge dans le Directeur de données : {0}, {1}</value>
  </data>
  <data name="DataDirectorInitializingMsg" xml:space="preserve">
    <value>En cours d'initialisation...</value>
  </data>
  <data name="DataDirectorNoAnswerError" xml:space="preserve">
    <value>Aucune réponse n'a été reçue : {0}</value>
  </data>
  <data name="DataDirectorOperationCancelledMsg" xml:space="preserve">
    <value>Opération annulée</value>
  </data>
  <data name="DataDirectorOperationOkMsg" xml:space="preserve">
    <value>L'opération a réussi</value>
  </data>
  <data name="DataDirectorReadFieldsForTablesMsg" xml:space="preserve">
    <value>Lire les champs de {0} tables</value>
  </data>
  <data name="DataDirectorReadingFieldsMsg" xml:space="preserve">
    <value>Lecture de champs en cours</value>
  </data>
  <data name="DataDirectorSavingFieldsMsg" xml:space="preserve">
    <value>Enregistrement de champs de base de données en cours</value>
  </data>
  <data name="DataDirectorSavingTablesMsg" xml:space="preserve">
    <value>Enregistrement de tables de base de données en cours</value>
  </data>
  <data name="DataDirectorSendFailedError" xml:space="preserve">
    <value>Échec de l'envoi : {0}</value>
  </data>
  <data name="DataDirectorTablesReadMsg" xml:space="preserve">
    <value>Tables lues : {0]</value>
  </data>
  <data name="DataDirectorTestingMsg" xml:space="preserve">
    <value>Test de la connexion en cours...</value>
  </data>
  <data name="JobRun" xml:space="preserve">
    <value>Exécuter le projet</value>
  </data>
  <data name="JobRunAsNormal" xml:space="preserve">
    <value>Exécuter le projet comme d'habitude</value>
  </data>
  <data name="JobRunConfirmMsg" xml:space="preserve">
    <value>Souhaitez-vous exécuter le projet {0} ?</value>
  </data>
  <data name="JobRunErrorMsg" xml:space="preserve">
    <value>Une erreur s'est produite en demandant l'exécution du projet {0} : {1}</value>
  </data>
  <data name="JobRunExceptionMsg" xml:space="preserve">
    <value>Une exception non prise en charge s'est produite en essayant d'exécuter un projet : {0}, {1}</value>
  </data>
  <data name="JobRunHeader" xml:space="preserve">
    <value>Exécuter le projet</value>
  </data>
  <data name="JobRunNoResponseMsg" xml:space="preserve">
    <value>Le service de planification n'a pas répondu à la requête. Assurez-vous que le Service est en cours d'exécution et configuré ou que le Planificateur de tâches est acheminé vers l'hôte approprié.</value>
  </data>
  <data name="JobRunOkMsg" xml:space="preserve">
    <value>L'exécution du projet {0} a bien été soumise.</value>
  </data>
  <data name="JobRunServiceError" xml:space="preserve">
    <value>Le Planificateur a renvoyé l'erreur suivante : {0}</value>
  </data>
  <data name="JobRunValidationFailureMsg" xml:space="preserve">
    <value>Le projet ne peut pas être exécuté car sa validation a échoué.



{0}</value>
  </data>
  <data name="RunJobErrorStatusFormat" xml:space="preserve">
    <value>{0} projet(s) a (ont) des erreurs, consultez le journal de projets ou de messages pour plus d'informations.</value>
  </data>
  <data name="RunJobPendingStatusFormat" xml:space="preserve">
    <value>{0} projet(s) de planificateur ont été soumis.</value>
  </data>
</root>