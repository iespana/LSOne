/*
	Incident No.	: ONE-12989
	Responsible		: Adrian Chiorean
	Sprint			: Ruble
	Date created	: 15.01.2021

	Description		: Create table for extra EFT info to be stored, required for EFT operations after a transaction is recalled (ex. refunds)
*/

USE LSPOSNET

IF NOT EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'RBOTRANSACTIONEFTEXTRAINFO')
BEGIN
	CREATE TABLE [dbo].[RBOTRANSACTIONEFTEXTRAINFO](
		[TRANSACTIONID] [nvarchar](20) NOT NULL,
		[PAYMENTID] [nvarchar](40) NOT NULL,
        [LINENUM] [numeric](28,12) NOT NULL,
		[STOREID] [nvarchar](20) NOT NULL,
		[TERMINALID] [nvarchar](20) NOT NULL,
		[EFTTRANSACTIONID] [nvarchar](80) NOT NULL,
		[TRANSACTIONDATETIME] [nvarchar](40) NOT NULL,
		[ADDITIONALID] [nvarchar](2048) NULL,
		[BATCHNUMBER] [nvarchar](20) NULL,
        [PAIDAMOUNT] [numeric](28,12) NOT NULL,
        [REFUNDEDAMOUNT] [numeric](28,12) NOT NULL,
		[REFUNDPAYMENTID] [nvarchar](40) NOT NULL,
		[REPLICATIONCOUNTER] [int] NOT NULL IDENTITY (1, 1)
	 CONSTRAINT [PK_RBOTRANSACTIONEFTEXTRAINFO] PRIMARY KEY CLUSTERED
	(
		[TRANSACTIONID] ASC, [PAYMENTID] ASC, [LINENUM] ASC, [STOREID] ASC, [TERMINALID] ASC
	)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
	) ON [PRIMARY]
	
	EXEC spDB_SetTableDescription_1_0 'RBOTRANSACTIONEFTEXTRAINFO', 'Contains extra info returned by the card payment device';

	EXECUTE spDB_SetFieldDescription_1_0 'RBOTRANSACTIONEFTEXTRAINFO', 'TRANSACTIONID', 'Unique ID of the POS transaction';
	EXECUTE spDB_SetFieldDescription_1_0 'RBOTRANSACTIONEFTEXTRAINFO', 'PAYMENTID', 'Unique ID of the payment transaction';
	EXECUTE spDB_SetFieldDescription_1_0 'RBOTRANSACTIONEFTEXTRAINFO', 'LINENUM', 'Payment line number';
	EXECUTE spDB_SetFieldDescription_1_0 'RBOTRANSACTIONEFTEXTRAINFO', 'STOREID', 'ID of the store';
	EXECUTE spDB_SetFieldDescription_1_0 'RBOTRANSACTIONEFTEXTRAINFO', 'TERMINALID', 'ID of the terminal';
	EXECUTE spDB_SetFieldDescription_1_0 'RBOTRANSACTIONEFTEXTRAINFO', 'EFTTRANSACTIONID', 'Unique ID of the transaction generated by the payment terminal';
	EXECUTE spDB_SetFieldDescription_1_0 'RBOTRANSACTIONEFTEXTRAINFO', 'TRANSACTIONDATETIME', 'Date of the payment';
	EXECUTE spDB_SetFieldDescription_1_0 'RBOTRANSACTIONEFTEXTRAINFO', 'ADDITIONALID', 'Any other ID used to identify the payment transaction (optional)';
	EXECUTE spDB_SetFieldDescription_1_0 'RBOTRANSACTIONEFTEXTRAINFO', 'BATCHNUMBER', 'Batch number used to identify the payment transaction (optional)';
	EXECUTE spDB_SetFieldDescription_1_0 'RBOTRANSACTIONEFTEXTRAINFO', 'PAIDAMOUNT', 'How much was paid with the card';
	EXECUTE spDB_SetFieldDescription_1_0 'RBOTRANSACTIONEFTEXTRAINFO', 'REFUNDEDAMOUNT', 'How much was refunded to the card';
	EXECUTE spDB_SetFieldDescription_1_0 'RBOTRANSACTIONEFTEXTRAINFO', 'REFUNDPAYMENTID', 'ID of the original payment in case of reference refunds';
	EXECUTE spDB_SetFieldDescription_1_0 'RBOTRANSACTIONEFTEXTRAINFO', 'REPLICATIONCOUNTER', 'Counter used for data replication';
END
GO

IF NOT EXISTS(SELECT * FROM sys.indexes WHERE NAME = 'LS_RBOTRANSACTIONEFTEXTRAINFO_REPLICATIONCOUNTER')
BEGIN
	CREATE NONCLUSTERED INDEX LS_RBOTRANSACTIONEFTEXTRAINFO_REPLICATIONCOUNTER
	ON RBOTRANSACTIONEFTEXTRAINFO(REPLICATIONCOUNTER)
END
GO

IF NOT EXISTS(SELECT 1 FROM dbo.NUMBERSEQUENCETABLE where DATAAREAID = 'LSR' and NUMBERSEQUENCE = 'EFTPAYMENT')
BEGIN
	INSERT INTO dbo.NUMBERSEQUENCETABLE (NUMBERSEQUENCE,TXT,LOWEST,HIGHEST,FORMAT,INUSE,EMBEDSTOREID,CANBEDELETED,STOREID,DATAAREAID,EMBEDTERMINALID)
VALUES ('EFTPAYMENT','EFT Payments',1,999999999,'#########',1,0,0,'HO','LSR',1)
	INSERT INTO dbo.NUMBERSEQUENCEVALUE (NUMBERSEQUENCE,NEXTREC,STOREID,DATAAREAID)
VALUES ('EFTPAYMENT',1,'HO','LSR')
END
GO