
/****** 

LS POS Database Schema

	**** All stored procedures should be created in this script ****
	
	**** This script has to be able to run again and again without producing errors ****

	Differences from previous database schema:
		-- All DT_XX stored procedures taken out of db schema
		-- Some old unused stored procedures removed

Script Date: 04/06/2010 

******/


/****** Object:  StoredProcedure [dbo].[POSIS_GETERRORMESSAGEID]    Script Date: 06/08/2010 15:14:59 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[POSIS_GETERRORMESSAGEID]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[POSIS_GETERRORMESSAGEID]
GO

/****** Object:  StoredProcedure [dbo].[BATCH_HISTORY]    Script Date: 06/08/2010 15:16:24 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BATCH_HISTORY]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BATCH_HISTORY]
GO

/****** Object:  StoredProcedure [dbo].[GETDBSIZES]    Script Date: 06/08/2010 15:19:15 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[GETDBSIZES]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[GETDBSIZES]
GO

/****** Object:  StoredProcedure [dbo].[CURRENCIES]    Script Date: 06/08/2010 15:23:09 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CURRENCIES]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[CURRENCIES]
GO

/****** Object:  StoredProcedure [dbo].[NAMESTAFFANDSTORE]    Script Date: 06/08/2010 15:35:52 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[NAMESTAFFANDSTORE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[NAMESTAFFANDSTORE]
GO

/****** Object:  StoredProcedure [dbo].[ROUNDINGAMOUNT]    Script Date: 06/08/2010 19:09:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ROUNDINGAMOUNT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[ROUNDINGAMOUNT]
GO

/****** Object:  StoredProcedure [dbo].[TOTALNETSALESAMOUNT]    Script Date: 06/08/2010 19:10:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[TOTALNETSALESAMOUNT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[TOTALNETSALESAMOUNT]
GO

/****** Object:  StoredProcedure [dbo].[TOTAL1]    Script Date: 06/08/2010 19:12:08 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[TOTAL1]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[TOTAL1]
GO

/****** Object:  StoredProcedure [dbo].[POSTED_TRANSACTIONS]    Script Date: 06/08/2010 19:14:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[POSTED_TRANSACTIONS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[POSTED_TRANSACTIONS]
GO

/****** Object:  StoredProcedure [dbo].[NUMOFVOIDEDTRANSACTIONS]    Script Date: 06/08/2010 19:15:46 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[NUMOFVOIDEDTRANSACTIONS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[NUMOFVOIDEDTRANSACTIONS]
GO

/****** Object:  StoredProcedure [dbo].[NUMOFTRAININGS]    Script Date: 06/08/2010 19:16:50 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[NUMOFTRAININGS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[NUMOFTRAININGS]
GO

/****** Object:  StoredProcedure [dbo].[NUMOFTRANSACTIONS]    Script Date: 06/08/2010 19:17:41 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[NUMOFTRANSACTIONS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[NUMOFTRANSACTIONS]
GO

/****** Object:  StoredProcedure [dbo].[AMOUNTPERTENDERTYPE]    Script Date: 06/08/2010 19:18:51 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[AMOUNTPERTENDERTYPE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[AMOUNTPERTENDERTYPE]
GO

/****** Object:  StoredProcedure [dbo].[GROSSAMOUNT]    Script Date: 06/08/2010 19:19:49 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[GROSSAMOUNT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[GROSSAMOUNT]
GO

/****** Object:  StoredProcedure [dbo].[DISCAMOUNT]    Script Date: 06/08/2010 19:20:34 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[DISCAMOUNT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[DISCAMOUNT]
GO

/****** Object:  StoredProcedure [dbo].[MULTIAMOUNTS]    Script Date: 06/08/2010 19:21:23 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[MULTIAMOUNTS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[MULTIAMOUNTS]
GO

/****** Object:  StoredProcedure [dbo].[NUMOFITEMSSOLD]    Script Date: 06/08/2010 19:22:04 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[NUMOFITEMSSOLD]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[NUMOFITEMSSOLD]
GO

/****** Object:  StoredProcedure [dbo].[NUMOFOPENDRAWER]    Script Date: 06/08/2010 19:22:53 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[NUMOFOPENDRAWER]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[NUMOFOPENDRAWER]
GO

/****** Object:  StoredProcedure [dbo].[NUMOFLOGINS]    Script Date: 06/08/2010 19:23:46 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[NUMOFLOGINS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[NUMOFLOGINS]
GO

/****** Object:  StoredProcedure [dbo].[NUMOFPAYINGCUSTOMERS]    Script Date: 06/08/2010 19:24:33 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[NUMOFPAYINGCUSTOMERS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[NUMOFPAYINGCUSTOMERS]
GO

/****** Object:  StoredProcedure [dbo].[AMOUNTOFALLCARDS]    Script Date: 06/08/2010 19:25:21 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[AMOUNTOFALLCARDS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[AMOUNTOFALLCARDS]
GO

/****** Object:  StoredProcedure [dbo].[NUMOFREFUNDS]    Script Date: 06/08/2010 19:26:00 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[NUMOFREFUNDS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[NUMOFREFUNDS]
GO

/****** Object:  StoredProcedure [dbo].[AMOUNTPERCARDTYPE]    Script Date: 06/08/2010 19:26:45 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[AMOUNTPERCARDTYPE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[AMOUNTPERCARDTYPE]
GO

/****** Object:  StoredProcedure [dbo].[TOTALDISCAMOUNT]    Script Date: 06/08/2010 19:27:36 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[TOTALDISCAMOUNT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[TOTALDISCAMOUNT]
GO

/****** Object:  StoredProcedure [dbo].[NUMOFSUSPENDEDTRANSACTIONS]    Script Date: 06/08/2010 19:28:23 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[NUMOFSUSPENDEDTRANSACTIONS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[NUMOFSUSPENDEDTRANSACTIONS]
GO

/****** Object:  StoredProcedure [dbo].[TENDERTRANSACTIONLIST]    Script Date: 06/08/2010 19:29:06 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[TENDERTRANSACTIONLIST]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[TENDERTRANSACTIONLIST]
GO

/****** Object:  StoredProcedure [dbo].[LSPOSNETREPORT_TENDERS]    Script Date: 06/08/2010 19:48:01 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LSPOSNETREPORT_TENDERS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[LSPOSNETREPORT_TENDERS]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[XREPORT_TENDERS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[XREPORT_TENDERS]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[XREPORT_CURRENCIES]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[XREPORT_CURRENCIES]
GO

/****** Object:  StoredProcedure [dbo].[POSIS_GETSUSPENDEDCOUNTER]    Script Date: 06/08/2010 19:51:35 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[POSIS_GETSUSPENDEDCOUNTER]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[POSIS_GETSUSPENDEDCOUNTER]
GO

/****** Object:  StoredProcedure [dbo].[POSIS_LOGINSERT]    Script Date: 06/08/2010 19:58:58 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[POSIS_LOGINSERT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[POSIS_LOGINSERT]
GO

/****** Object:  StoredProcedure [dbo].[POSIS_LOGINSERT]    Script Date: 06/08/2010 19:58:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[POSIS_LOGINSERT]
(
	@DATE DATETIME,
	@CODEUNIT NVARCHAR(100),
	@LOGSTRING NVARCHAR(1000),
	@LOGLEVEL INT,
	@STOREID NVARCHAR(10),
	@TERMINALID NVARCHAR(10),
	@DURATIONINMILLISEC INT,
	@DATAAREAID NVARCHAR(3),
	@APPLICATIONID INT
)
AS
	INSERT INTO DBO.POSISLOG
	(
		LOGDATE,
		CODEUNIT,
		LOGSTRING,
		LOGLEVEL,
		STOREID,
		TERMINALID,
		DURATIONINMILLISEC,
		DATAAREAID,
		APPLICATIONID
	)
	VALUES
	(
		@DATE,
		@CODEUNIT,
		@LOGSTRING,
		@LOGLEVEL,
		@STOREID,
		@TERMINALID,
		@DURATIONINMILLISEC,
		@DATAAREAID,
		@APPLICATIONID
	)

	RETURN
	/****** END ******/
GO

/****** Object:  StoredProcedure [dbo].[LSPOSNETREPORT]    Script Date: 06/08/2010 20:02:05 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LSPOSNETREPORT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[LSPOSNETREPORT]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[XREPORT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[XREPORT]
GO

/****** Object:  StoredProcedure [dbo].[LSPOSNETREPORT_VAT]    Script Date: 06/08/2010 20:03:11 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LSPOSNETREPORT_VAT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[LSPOSNETREPORT_VAT]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[XREPORT_VAT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[XREPORT_VAT]
GO

/****** Object:  StoredProcedure [dbo].[POSIS_GETTRANSLATION]    Script Date: 06/08/2010 20:03:43 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[POSIS_GETTRANSLATION]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[POSIS_GETTRANSLATION]
GO

/****** Object:  StoredProcedure [dbo].[sp_spaceused_loop]    Script Date: 06/08/2010 20:04:32 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[sp_spaceused_loop]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[sp_spaceused_loop]
GO

/****** Object:  StoredProcedure [dbo].[sp_spaceused_tob]    Script Date: 06/08/2010 20:05:02 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[sp_spaceused_tob]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[sp_spaceused_tob]
GO

/****** Object:  StoredProcedure [dbo].[LSR_ZREPORT]    Script Date: 05/03/2012 14:15:09 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LSR_ZREPORT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[LSR_ZREPORT]
GO

/****** Object:  StoredProcedure [dbo].[LSR_ZREPORT]    Script Date: 05/03/2012 14:15:09 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[LSR_ZREPORT] 
 @TERMINAL NVARCHAR(20),
 @STORE NVARCHAR(20),
 @STAFF NVARCHAR(20),
 @DATAAREAID NVARCHAR(4), 
 @ISZREPORT TINYINT,
 @NEWZREPORTID NVARCHAR(61),
 @COMBINESALESANDRETURN TINYINT
AS

DECLARE @NORMAL_RETAIL_TRANSACTIONS INT 
DECLARE @RETURN_RETAIL_TRANSACTIONS INT 
DECLARE @VOIDED_RETAIL_TRANSACTIONS INT 
DECLARE @DEPOSIT_TRANSACTIONS INT
DECLARE @ALL_TRANSACTIONS INT 
DECLARE @ZGROSSAMOUNT NUMERIC(28,12)
DECLARE @ZNETAMOUNT NUMERIC(28,12)
DECLARE @ZRETURNGROSSAMOUNT NUMERIC(28,12)
DECLARE @ZRETURNNETAMOUNT NUMERIC(28,12)
DECLARE @TOTAL_TENDER_REMOVAL NUMERIC(28,12)
DECLARE @TOTAL_FLOAT_ENTRY NUMERIC(28,12)
DECLARE @TOTAL_SALES_ORDER NUMERIC(28,12)
DECLARE @TOTAL_LOGINS NUMERIC(28,12)
DECLARE @TOTAL_SALES_INVOICE NUMERIC(28,12)
DECLARE @TOTAL_BANK_DROP NUMERIC(28,12)
DECLARE @TOTAL_SAFE_DROP NUMERIC(28,12)
DECLARE @TOTAL_BANK_DROP_REV NUMERIC(28,12)
DECLARE @TOTAL_SAFE_DROP_REV NUMERIC(28,12)
DECLARE @TOTAL_DEPOSITS NUMERIC(28,12)
DECLARE @TOTAL_REDEEMED_DEPOSITS NUMERIC(28,12)
DECLARE @ALL_DISCOUNTS_INCLTAX NUMERIC(28,12) 
DECLARE @TOTAL_DISCOUNTS_INCLTAX NUMERIC(28,12) 
DECLARE @LINE_DISCOUNTS_INCLTAX NUMERIC(28,12) 
DECLARE @PERIODIC_DISCOUNTS_INCLTAX NUMERIC(28,12) 
DECLARE @ALL_DISCOUNTS NUMERIC(28,12) 
DECLARE @TOTAL_DISCOUNTS NUMERIC(28,12) 
DECLARE @LINE_DISCOUNTS NUMERIC(28,12) 
DECLARE @PERIODIC_DISCOUNTS NUMERIC(28,12) 
DECLARE @TOTAL_OPEN_DRAWER_OPERATIONS NUMERIC(28,12)
DECLARE @TOTAL_DRAWER_OPENINGS NUMERIC(28,12)
DECLARE @TOTAL_ITEMS_SOLD NUMERIC(28,12)
DECLARE @TOTAL_RETURNED_ITEMS NUMERIC(28,12)
DECLARE @TOTAL_NO_CUSTOMER_TRANS NUMERIC(28,12)
DECLARE @DECLARE_START_AMT NUMERIC(28,12)

DECLARE @ZPROCESSED NVARCHAR(20)

IF (@ISZREPORT = 1)
BEGIN
	SET @ZPROCESSED = 'Z-RPT'
END
ELSE
BEGIN
	SET @ZPROCESSED = 'X-RPT'
END

-- GET ALL UNPROCESSED TRANSACTIONS FOR THE STORE AND TERMINAL
UPDATE RBOTRANSACTIONTABLE
SET ZREPORTID = @ZPROCESSED
WHERE ZREPORTID = ''
AND TERMINAL = @TERMINAL
AND STORE = @STORE
AND DATAAREAID = @DATAAREAID

SET @NORMAL_RETAIL_TRANSACTIONS = 0
SET @RETURN_RETAIL_TRANSACTIONS = 0
SET @VOIDED_RETAIL_TRANSACTIONS = 0
SET @DEPOSIT_TRANSACTIONS = 0
SET @ZGROSSAMOUNT = 0
SET @ZNETAMOUNT = 0
SET @ZRETURNGROSSAMOUNT = 0
SET @ZRETURNNETAMOUNT = 0
SET @ALL_TRANSACTIONS = 0
SET @TOTAL_TENDER_REMOVAL = 0
SET @TOTAL_FLOAT_ENTRY = 0
SET @TOTAL_SALES_ORDER = 0
SET @TOTAL_LOGINS = 0
SET @TOTAL_SALES_INVOICE = 0
SET @TOTAL_BANK_DROP = 0
SET @TOTAL_SAFE_DROP = 0
SET @TOTAL_BANK_DROP_REV = 0
SET @TOTAL_SAFE_DROP_REV = 0
SET @TOTAL_DEPOSITS = 0
SET @TOTAL_REDEEMED_DEPOSITS = 0
SET @ALL_DISCOUNTS_INCLTAX = 0
SET @TOTAL_DISCOUNTS_INCLTAX = 0
SET @LINE_DISCOUNTS_INCLTAX = 0
SET @PERIODIC_DISCOUNTS_INCLTAX = 0
SET @ALL_DISCOUNTS = 0
SET @TOTAL_DISCOUNTS = 0
SET @LINE_DISCOUNTS = 0
SET @PERIODIC_DISCOUNTS = 0
SET @TOTAL_DRAWER_OPENINGS = 0
SET @TOTAL_OPEN_DRAWER_OPERATIONS = 0
SET @TOTAL_ITEMS_SOLD = 0
SET @TOTAL_RETURNED_ITEMS = 0
SET @TOTAL_NO_CUSTOMER_TRANS = 0
SET @DECLARE_START_AMT = 0


-- Total of all normal sales
SELECT @ZGROSSAMOUNT = ISNULL(SUM(sales.NETAMOUNTINCLTAX), 0) * -1, @ZNETAMOUNT = ISNULL(SUM(sales.NETAMOUNT), 0) * -1
FROM RBOTRANSACTIONSALESTRANS sales
JOIN RBOTRANSACTIONTABLE rt on rt.TRANSACTIONID = sales.TRANSACTIONID AND rt.STORE = sales.STORE AND rt.TERMINAL = sales.TERMINALID AND rt.DATAAREAID = sales.DATAAREAID
WHERE sales.QTY < 0
AND rt.ZREPORTID = @ZPROCESSED
AND rt.DATAAREAID = @DATAAREAID
AND rt.TYPE = 2
AND rt.ENTRYSTATUS = 0
AND sales.TRANSACTIONSTATUS = 0

-- Total of all returns
SELECT @ZRETURNGROSSAMOUNT = ISNULL(SUM(sales.NETAMOUNTINCLTAX), 0) * -1, @ZRETURNNETAMOUNT = ISNULL(SUM(sales.NETAMOUNT), 0) * -1
FROM RBOTRANSACTIONSALESTRANS sales
JOIN RBOTRANSACTIONTABLE rt on rt.TRANSACTIONID = sales.TRANSACTIONID AND rt.STORE = sales.STORE AND rt.TERMINAL = sales.TERMINALID AND rt.DATAAREAID = sales.DATAAREAID
WHERE sales.QTY > 0
AND rt.ZREPORTID = @ZPROCESSED
AND rt.DATAAREAID = @DATAAREAID
AND rt.TYPE = 2
AND rt.ENTRYSTATUS = 0
AND sales.TRANSACTIONSTATUS = 0

-- Discount amount totals for normal sales
SELECT @ALL_DISCOUNTS_INCLTAX = COALESCE(SUM(S.WHOLEDISCAMOUNTWITHTAX), 0), @TOTAL_DISCOUNTS_INCLTAX = COALESCE(SUM(S.TOTALDISCAMOUNTWITHTAX), 0), 
@LINE_DISCOUNTS_INCLTAX = COALESCE(SUM(S.LINEDISCAMOUNTWITHTAX), 0), @PERIODIC_DISCOUNTS_INCLTAX = COALESCE(SUM(S.PERIODICDISCAMOUNTWITHTAX), 0),
@ALL_DISCOUNTS  = COALESCE(SUM(S.DISCAMOUNT), 0), @TOTAL_DISCOUNTS = COALESCE(SUM(S.TOTALDISCAMOUNT), 0), 
@LINE_DISCOUNTS = COALESCE(SUM(S.LINEDSCAMOUNT), 0), @PERIODIC_DISCOUNTS = COALESCE(SUM(S.PERIODICDISCAMOUNT), 0)
FROM RBOTRANSACTIONSALESTRANS S
JOIN RBOTRANSACTIONTABLE T ON S.TRANSACTIONID = T.TRANSACTIONID AND S.STORE = T.STORE AND S.TERMINALID = T.TERMINAL AND S.DATAAREAID = T.DATAAREAID
WHERE T.ENTRYSTATUS = 0
AND S.QTY < 0
AND T.[TYPE] = 2
AND S.TRANSACTIONSTATUS = 0
AND T.ZREPORTID = @ZPROCESSED
AND T.DATAAREAID = @DATAAREAID

-- How many customer transactions
SELECT @TOTAL_NO_CUSTOMER_TRANS = COALESCE(SUM(TOACCOUNT), 0)
FROM RBOTRANSACTIONTABLE
WHERE ENTRYSTATUS = 0
AND [TYPE] = 2
AND GROSSAMOUNT <= 0
AND ZREPORTID = @ZPROCESSED
AND DATAAREAID = @DATAAREAID

-- How many sales transactions are in there
SELECT @NORMAL_RETAIL_TRANSACTIONS = COALESCE(COUNT(TRANSACTIONID), 0)
FROM RBOTRANSACTIONTABLE
WHERE ENTRYSTATUS = 0
AND [TYPE] = 2
AND GROSSAMOUNT <= 0
AND ZREPORTID = @ZPROCESSED
AND DATAAREAID = @DATAAREAID

-- How many deposit transactions are in there
SELECT @DEPOSIT_TRANSACTIONS = COALESCE(COUNT(TRANSACTIONID), 0)
FROM RBOTRANSACTIONTABLE
WHERE ENTRYSTATUS = 0
AND [TYPE] = 22
AND GROSSAMOUNT <= 0
AND ZREPORTID = @ZPROCESSED
AND DATAAREAID = @DATAAREAID

-- The total of redeemed deposits
select @TOTAL_REDEEMED_DEPOSITS = COALESCE(SUM(AMOUNTTENDERED), 0)*-1
from RBOTRANSACTIONPAYMENTTRANS PTR
JOIN RBOTRANSACTIONTABLE TA 
	ON PTR.TRANSACTIONID = TA.TRANSACTIONID 
	AND PTR.DATAAREAID = TA.DATAAREAID 
	AND PTR.STORE = TA.STORE 
	AND PTR.TERMINAL = TA.TERMINAL	   
WHERE PTR.TRANSACTIONSTATUS = 6
AND TA.ENTRYSTATUS = 0
AND TA.ZREPORTID = @ZPROCESSED
AND TA.DATAAREAID = @DATAAREAID

-- How many voided transactions are in there
SELECT @VOIDED_RETAIL_TRANSACTIONS = COALESCE(COUNT(TRANSACTIONID), 0)
FROM RBOTRANSACTIONTABLE
WHERE ENTRYSTATUS = 1
AND [TYPE] = 2
AND ZREPORTID = @ZPROCESSED
AND DATAAREAID = @DATAAREAID

-- How many return transactions
SELECT @RETURN_RETAIL_TRANSACTIONS = COALESCE(COUNT(TA.TRANSACTIONID), 0)
FROM RBOTRANSACTIONTABLE TA
WHERE TA.ENTRYSTATUS = 0
AND TA.[TYPE] = 2
AND TA.GROSSAMOUNT > 0
AND TA.ZREPORTID = @ZPROCESSED
AND TA.DATAAREAID = @DATAAREAID
AND TA.TRANSACTIONID NOT IN
(
    -- Gets all transactions with a negative balance that are not sales transactions. This will exclude income/expense and any other 
	-- types of transactions that are not strictly returns.
	SELECT IE_TA.TRANSACTIONID
	FROM RBOTRANSACTIONTABLE IE_TA
	WHERE IE_TA.ENTRYSTATUS = 0
	AND IE_TA.[TYPE] = 2
	AND IE_TA.GROSSAMOUNT > 0
	AND IE_TA.ZREPORTID = @ZPROCESSED
	AND IE_TA.DATAAREAID = @DATAAREAID
	AND IE_TA.TRANSACTIONID NOT IN 
	(
		SELECT IE_STA.TRANSACTIONID
		FROM RBOTRANSACTIONSALESTRANS IE_STA	
		JOIN RBOTRANSACTIONTABLE IE_STA_TA on IE_STA_TA.TRANSACTIONID = IE_STA.TRANSACTIONID
		WHERE IE_TA.[TYPE] = 2
		AND IE_TA.ENTRYSTATUS = 0
		AND IE_TA.GROSSAMOUNT > 0 
		AND IE_TA.ZREPORTID = @ZPROCESSED
		AND IE_TA.DATAAREAID = @DATAAREAID
	)
)
AND TA.TRANSACTIONID NOT IN
(
	-- Get all transactions that have a negative balance but all of the sale items total to a positive sum.
	-- This is to exclude transcations where you have an expense item and a normal sales item that still results
	-- in cash back. 
	SELECT MIX_TA.TRANSACTIONID
	FROM RBOTRANSACTIONTABLE MIX_TA
	JOIN
	(
		SELECT SUM(MIX_STA.NETAMOUNTINCLTAX) AS ITEMNETAMOUNT, MIX_STA.TRANSACTIONID
		FROM RBOTRANSACTIONSALESTRANS MIX_STA	
		JOIN RBOTRANSACTIONTABLE MIX_STA_TA on MIX_STA_TA.TRANSACTIONID = MIX_STA.TRANSACTIONID
		WHERE MIX_STA_TA.[TYPE] = 2
		AND MIX_STA_TA.ENTRYSTATUS = 0
		AND MIX_STA_TA.GROSSAMOUNT > 0 
		AND MIX_STA_TA.ZREPORTID = @ZPROCESSED
		AND MIX_STA_TA.DATAAREAID = @DATAAREAID
		GROUP BY MIX_STA.TRANSACTIONID
	) TASUM on TASUM.TRANSACTIONID = MIX_TA.TRANSACTIONID
	WHERE MIX_TA.[TYPE] = 2
	AND MIX_TA.ENTRYSTATUS = 0
	AND MIX_TA.GROSSAMOUNT > 0 
	AND MIX_TA.ZREPORTID = @ZPROCESSED
	AND MIX_TA.DATAAREAID = @DATAAREAID
	AND TASUM.ITEMNETAMOUNT < 0
)



-- How many items were sold
SELECT @TOTAL_ITEMS_SOLD = COALESCE(SUM(QTY) * -1, 0)
FROM RBOTRANSACTIONSALESTRANS S
JOIN RBOTRANSACTIONTABLE T ON S.TRANSACTIONID = T.TRANSACTIONID AND S.STORE = T.STORE AND S.TERMINALID = T.TERMINAL AND S.DATAAREAID = T.DATAAREAID
WHERE S.GIFTCARD = 0
AND T.ENTRYSTATUS = 0
AND T.[TYPE] = 2
AND S.QTY < 0
AND S.TRANSACTIONSTATUS = 0
AND T.ZREPORTID = @ZPROCESSED
AND T.DATAAREAID = @DATAAREAID

-- How many items were returned
SELECT @TOTAL_RETURNED_ITEMS = COALESCE(SUM(QTY), 0)
FROM RBOTRANSACTIONSALESTRANS S
JOIN RBOTRANSACTIONTABLE T ON S.TRANSACTIONID = T.TRANSACTIONID AND S.STORE = T.STORE AND S.TERMINALID = T.TERMINAL AND S.DATAAREAID = T.DATAAREAID
WHERE S.GIFTCARD = 0
AND T.ENTRYSTATUS = 0
AND T.[TYPE] = 2
AND S.QTY > 0
AND S.TRANSACTIONSTATUS = 0
AND T.ZREPORTID = @ZPROCESSED
AND T.DATAAREAID = @DATAAREAID

-- How many times the drawer was opened
SELECT @TOTAL_DRAWER_OPENINGS = COALESCE(SUM(OPENDRAWER), 0)
FROM RBOTRANSACTIONTABLE
WHERE ZREPORTID = @ZPROCESSED
AND DATAAREAID = @DATAAREAID
AND [TYPE] <> 2

-- How many times the operation Open Drawer was run
SELECT @TOTAL_OPEN_DRAWER_OPERATIONS = COALESCE(SUM(OPENDRAWER), 0)
FROM RBOTRANSACTIONTABLE
WHERE ZREPORTID = @ZPROCESSED
AND DATAAREAID = @DATAAREAID
AND [TYPE] = 9

-- How much was set to be "Start amount"
select @DECLARE_START_AMT = ISNULL(SUM(rt.GROSSAMOUNT), 0) *-1
from RBOTRANSACTIONTABLE rt
join RBOTRANSACTIONPAYMENTTRANS rp on rt.TRANSACTIONID = rp.TRANSACTIONID and rt.TERMINAL = rp.TERMINAL and rt.STORE = rp.STORE and rt.DATAAREAID = rp.DATAAREAID
where rt.ZREPORTID = @ZPROCESSED
AND rt.DATAAREAID = @DATAAREAID
AND [TYPE] = 5
AND rt.ENTRYSTATUS = 0
AND rp.AMOUNTMST = 0
AND rp.EXCHRATEMST = 0


-- Count all transactions
SELECT @ALL_TRANSACTIONS = COALESCE(COUNT(TRANSACTIONID), 0) 
FROM RBOTRANSACTIONTABLE
WHERE ENTRYSTATUS in (0, 3)
AND ZREPORTID = @ZPROCESSED
AND DATAAREAID = @DATAAREAID

--DROP TABLE #TRANS_TYPE_COUNT

SELECT COALESCE(COUNT(TRANSACTIONID), 0) AS TRANSCOUNT, COALESCE(SUM(GROSSAMOUNT), 0) * -1 AS TOTALGROSS, [TYPE]
INTO #TRANS_TYPE_COUNT
FROM RBOTRANSACTIONTABLE
WHERE ENTRYSTATUS = 0
AND [TYPE] <> 2
AND ZREPORTID = @ZPROCESSED
AND DATAAREAID = @DATAAREAID
GROUP BY [TYPE]
ORDER BY [TYPE]

-- TENDER REMOVAL
SELECT @TOTAL_TENDER_REMOVAL = TOTALGROSS
FROM #TRANS_TYPE_COUNT
WHERE [TYPE] = 4

-- FLOAT ENTRY; DECLARE START AMOUNT
SELECT @TOTAL_FLOAT_ENTRY = TOTALGROSS
FROM #TRANS_TYPE_COUNT
WHERE [TYPE] = 5

-- SALES ORDER
SELECT @TOTAL_SALES_ORDER = TOTALGROSS
FROM #TRANS_TYPE_COUNT
WHERE [TYPE] = 14
				
-- SALES INVOICE
SELECT @TOTAL_SALES_INVOICE = TOTALGROSS
FROM #TRANS_TYPE_COUNT
WHERE [TYPE] = 15
				
-- BANK DROP
SELECT @TOTAL_BANK_DROP = TOTALGROSS
FROM #TRANS_TYPE_COUNT
WHERE [TYPE] = 16
				
-- SAFE DROP
SELECT @TOTAL_SAFE_DROP = TOTALGROSS
FROM #TRANS_TYPE_COUNT
WHERE [TYPE] = 17

-- BANK DROP REVERSAL
SELECT @TOTAL_BANK_DROP_REV = TOTALGROSS
FROM #TRANS_TYPE_COUNT
WHERE [TYPE] = 21
				
-- SAFE DROP REVERSAL
SELECT @TOTAL_SAFE_DROP_REV = TOTALGROSS
FROM #TRANS_TYPE_COUNT
WHERE [TYPE] = 20	

-- DEPOSIT TRANSACTIONS
SELECT @TOTAL_DEPOSITS = TOTALGROSS
FROM #TRANS_TYPE_COUNT
WHERE [TYPE] = 22	

-- LOGINS	
SELECT @TOTAL_LOGINS = TRANSCOUNT
FROM #TRANS_TYPE_COUNT
WHERE [TYPE] = 1	

	
IF (@ISZREPORT = 1)
BEGIN	

	DECLARE @TOTALGROSSAMOUNT NUMERIC(28,12)	
	DECLARE @TOTALNETAMOUNT NUMERIC(28,12)
	DECLARE @RETURNTOTALGROSSAMOUNT NUMERIC(28,12)
	DECLARE @RETURNTOTALNETAMOUNT NUMERIC(28,12)
	DECLARE @LASTZREPORT NVARCHAR(61)	
	
	SET @TOTALGROSSAMOUNT = 0
	SET @TOTALNETAMOUNT = 0
	SET @RETURNTOTALGROSSAMOUNT = 0
	SET @RETURNTOTALNETAMOUNT = 0	
	
	-- Save the terminal id and store id from the last Z report, if any
	Declare @LASTZPREFIX nvarchar(41)
	
	-- Get the total values from the last Z report
	SELECT 
		@LASTZREPORT = COALESCE(MAX(RIGHT(ZREPORTID,8)), -1),
		@LASTZPREFIX = Left(ZREPORTID,LEN(ZREPORTID)-8)
	FROM POSZREPORT
	WHERE STOREID = @STORE
	AND TERMINALID = @TERMINAL
	AND DATAAREAID = @DATAAREAID
	GROUP BY ZREPORTID

	IF (@LASTZREPORT = -1)	
	BEGIN		
		SET @TOTALGROSSAMOUNT = 0
		SET @TOTALNETAMOUNT = 0
		SET @RETURNTOTALGROSSAMOUNT = 0
		SET @RETURNTOTALNETAMOUNT = 0		
	END
	ELSE
	BEGIN		
		DECLARE @NUMBERSEQ NVARCHAR(8)
		SET @NUMBERSEQ = '00000000'
		SET @LASTZREPORT = CONCAT(@LASTZPREFIX, LEFT(@NUMBERSEQ, LEN(@NUMBERSEQ)-LEN(@LASTZREPORT)),@LASTZREPORT)
		-- Get the total values
		SELECT @TOTALGROSSAMOUNT = COALESCE(TOTALGROSSAMOUNT, 0), @TOTALNETAMOUNT = COALESCE(TOTALNETAMOUNT, 0),
			   @RETURNTOTALGROSSAMOUNT = COALESCE(TOTALRETURNGROSSAMOUNT, 0), @RETURNTOTALNETAMOUNT = COALESCE(TOTALRETURNNETAMOUNT, 0)
		FROM POSZREPORT
		WHERE ZREPORTID = @LASTZREPORT
		AND DATAAREAID = @DATAAREAID
	END
		
	-- Update the total values with the valus from the current z report	
	SET @TOTALGROSSAMOUNT = @TOTALGROSSAMOUNT + @ZGROSSAMOUNT + @ZRETURNGROSSAMOUNT
	SET @TOTALNETAMOUNT = @TOTALNETAMOUNT + @ZNETAMOUNT + @ZRETURNNETAMOUNT
	SET @RETURNTOTALGROSSAMOUNT = @RETURNTOTALGROSSAMOUNT + @ZRETURNGROSSAMOUNT
	SET @RETURNTOTALNETAMOUNT = @RETURNTOTALNETAMOUNT + @ZRETURNNETAMOUNT
	
	-- Create a new Z report with total values and z report values
	INSERT INTO POSZREPORT 
			   ([ZREPORTID],[STOREID],[TERMINALID],[STAFFID],[TOTALGROSSAMOUNT],[TOTALNETAMOUNT],
			    [DATAAREAID], [ZGROSSAMOUNT], [ZNETAMOUNT], [ENTRYTYPE], 
			    [TOTALRETURNGROSSAMOUNT], [TOTALRETURNNETAMOUNT], 
			    [ZRETURNGROSSAMOUNT], [ZRETURNNETAMOUNT])
		 VALUES
			   (@NEWZREPORTID, @STORE, @TERMINAL, @STAFF, @TOTALGROSSAMOUNT, @TOTALNETAMOUNT, 
			   @DATAAREAID, @ZGROSSAMOUNT + @ZRETURNGROSSAMOUNT, @ZNETAMOUNT + @ZRETURNNETAMOUNT, 0, @RETURNTOTALGROSSAMOUNT, @RETURNTOTALNETAMOUNT,
			   @ZRETURNGROSSAMOUNT, @ZRETURNNETAMOUNT)

	-- UPDATE UNPROCESSED TRANSACTIONS FOR THE STORE AND TERMINAL
	UPDATE RBOTRANSACTIONTABLE
	SET ZREPORTID = @NEWZREPORTID   
	WHERE ZREPORTID = @ZPROCESSED
END
ELSE
BEGIN
	-- X report should set the z report back to empty for the next z report
	UPDATE RBOTRANSACTIONTABLE
	SET ZREPORTID = ''   
	WHERE ZREPORTID = @ZPROCESSED
END

SELECT @NORMAL_RETAIL_TRANSACTIONS AS 'NORMALTRANSCOUNT', 
	   @RETURN_RETAIL_TRANSACTIONS AS 'RETURNTRANSCOUNT',
	   @VOIDED_RETAIL_TRANSACTIONS AS 'VOIDEDTRANSCOUNT',
	   @DEPOSIT_TRANSACTIONS as 'DEPOSITTRANSCOUNT',
	   @ZGROSSAMOUNT AS 'TOTALNETAMOUNTINCLTAX',	   
	   @ZNETAMOUNT AS 'TOTALNETAMOUNT',
	   @TOTAL_TENDER_REMOVAL AS 'TOTALTENDERREMOVAL',
	   @TOTAL_FLOAT_ENTRY AS 'TOTALFLOATENTRY',
	   @TOTAL_SALES_ORDER AS 'TOTALSALESORDER',
	   @TOTAL_SALES_INVOICE AS 'TOTALSALESINVOICE',	   
	   @TOTAL_BANK_DROP AS 'TOTALBANKDROP',
	   @TOTAL_SAFE_DROP AS 'TOTALSAFEDROP',
	   @TOTAL_BANK_DROP_REV AS 'TOTALBANKDROPREVERSAL',
	   @TOTAL_SAFE_DROP_REV AS 'TOTALSAFEDROPREVERSAL',	   	   
	   @TOTAL_DEPOSITS AS 'TOTALDEPOSITS',
	   @TOTAL_REDEEMED_DEPOSITS as 'TOTALREDEEMEDDEPOSITSAMOUNT',
	   @NEWZREPORTID AS 'NEWZREPORTID',
	   @TOTAL_ITEMS_SOLD AS 'TOTALITEMSSOLD',
	   @TOTAL_RETURNED_ITEMS AS 'TOTALRETURNEDITEMS',
	   @TOTAL_DRAWER_OPENINGS AS 'TOTALDRAWEROPENINGS',
	   @TOTAL_DISCOUNTS AS 'TOTALDISCOUNTS',
	   @TOTAL_LOGINS AS 'TOTALLOGINS',
	   @ALL_DISCOUNTS_INCLTAX AS 'ALLDISCAMTSINCLTAX',
	   @TOTAL_DISCOUNTS_INCLTAX AS 'TOTALDISCAMTINCLTAX',
	   @LINE_DISCOUNTS_INCLTAX AS 'LINEDISCAMTINCLTAX',
	   @PERIODIC_DISCOUNTS_INCLTAX AS 'PERIODICDISCAMTINCLTAX',
	   @ALL_DISCOUNTS AS 'ALLDISCAMTS',
	   @TOTAL_DISCOUNTS AS 'TOTALDISCAMT',
	   @LINE_DISCOUNTS AS 'LINEDISCAMT',
       @PERIODIC_DISCOUNTS AS 'PERIODICDISCAMT',
       @TOTAL_NO_CUSTOMER_TRANS AS 'CUSTOMERTRANSCOUNT',
       @TOTAL_OPEN_DRAWER_OPERATIONS as 'TOTALOPENDRAWEROPERATIONS',
       @ALL_TRANSACTIONS as 'TOTALALLTRANSACTIONS',
       @RETURNTOTALGROSSAMOUNT as 'RETURNTOTALGROSSAMOUNT',
       @RETURNTOTALNETAMOUNT as 'RETURNTOTALNETAMOUNT',
       @ZRETURNGROSSAMOUNT as 'TOTALRETURNGROSSAMOUNTINCLTAX',
       @ZRETURNNETAMOUNT as 'TOTALRETURNNETAMOUNT',
       @DECLARE_START_AMT AS 'DECLARESTARTAMOUNT'     
       
       	   
/****** END ******/      
GO

/****** Object:  StoredProcedure [dbo].[LSR_ZREPORT_REDEEMEDDEPOSITS]    Script Date: 29.3.2016 18:04:45 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LSR_ZREPORT_REDEEMEDDEPOSITS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[LSR_ZREPORT_REDEEMEDDEPOSITS]
GO

/****** Object:  StoredProcedure [dbo].[LSR_ZREPORT_REDEEMEDDEPOSITS]    Script Date: 29.3.2016 18:04:45 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[LSR_ZREPORT_REDEEMEDDEPOSITS] 
@ZREPORTID NVARCHAR(61),
@STOREID NVARCHAR(20),
@TERMINALID NVARCHAR(20),
@DATAAREAID NVARCHAR(4)
AS


DECLARE @TENDERNAME NVARCHAR(30)
DECLARE @QTY NUMERIC(28,12)
DECLARE @AMOUNT NUMERIC(28,12)

SET @TENDERNAME = ''
SET @QTY = 0
SET @AMOUNT = 0

-- Get the name of the tender from the store card
SELECT @TENDERNAME = NAME 
FROM RBOSTORETENDERTYPETABLE
WHERE STOREID = @STOREID
AND DATAAREAID = @DATAAREAID
AND FUNCTION_ = 5

-- Get the total redeemed deposits
select @AMOUNT = SUM(AMOUNTTENDERED)*-1
from RBOTRANSACTIONPAYMENTTRANS PTR
JOIN RBOTRANSACTIONTABLE TA 
	ON PTR.TRANSACTIONID = TA.TRANSACTIONID 
	AND PTR.DATAAREAID = TA.DATAAREAID 
	AND PTR.STORE = TA.STORE 
	AND PTR.TERMINAL = TA.TERMINAL	   
WHERE PTR.TRANSACTIONSTATUS = 6
AND TA.ENTRYSTATUS = 0
AND TA.ZREPORTID = @ZREPORTID
AND TA.STORE = @STOREID
AND TA.TERMINAL = @TERMINALID
AND TA.DATAAREAID = @DATAAREAID

-- Get the number of redeemed deposits
select @QTY = COUNT(*)
from RBOTRANSACTIONPAYMENTTRANS PTR
JOIN RBOTRANSACTIONTABLE TA 
	ON PTR.TRANSACTIONID = TA.TRANSACTIONID 
	AND PTR.DATAAREAID = TA.DATAAREAID 
	AND PTR.STORE = TA.STORE 
	AND PTR.TERMINAL = TA.TERMINAL	   
WHERE PTR.TRANSACTIONSTATUS = 6
AND TA.ENTRYSTATUS = 0
AND TA.ZREPORTID = @ZREPORTID
AND TA.STORE = @STOREID
AND TA.TERMINAL = @TERMINALID
AND TA.DATAAREAID = @DATAAREAID

SELECT COALESCE(@TENDERNAME, '') AS 'TENDERNAME', COALESCE(@AMOUNT, 0) AS 'AMOUNT', COALESCE(@QTY, 0) AS 'QTY'

/****** END ******/
GO


/****** Object:  StoredProcedure [dbo].[LSR_ZREPORT_REPRINTS]    Script Date: 02/15/2014 15:09:26 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LSR_ZREPORT_REPRINTS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[LSR_ZREPORT_REPRINTS]
GO

/****** Object:  StoredProcedure [dbo].[LSR_ZREPORT_REPRINTS]    Script Date: 02/15/2014 15:09:26 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[LSR_ZREPORT_REPRINTS] 
@ZREPORTID NVARCHAR(61),
@STOREID NVARCHAR(20),
@TERMINALID NVARCHAR(20),
@DATAAREAID NVARCHAR(4)
AS


-- Count reprints and calculate the sum of all reprints
SELECT 
	P.REPRINTTYPE,
	COALESCE(COUNT(P.TRANSACTIONID), 0) NUMBEROFTRANSACTIONS, 
	COALESCE(SUM(T.GROSSAMOUNT), 0)*-1 as SUM_GROSSAMOUNT,
	COALESCE(SUM(T.NETAMOUNT), 0)*-1 as SUM_NETAMOUNT	
FROM RBOTRANSACTIONREPRINTTRANS P
JOIN RBOTRANSACTIONTABLE T ON T.TRANSACTIONID = P.TRANSACTIONID AND T.STORE = P.STORE AND T.TERMINAL = P.TERMINAL AND T.DATAAREAID = P.DATAAREAID
WHERE ZREPORTID = @ZREPORTID
AND T.DATAAREAID = @DATAAREAID
AND T.STORE = @STOREID
AND T.TERMINAL = @TERMINALID
GROUP BY P.REPRINTTYPE

/****** END ******/


GO

/****** Object:  StoredProcedure [dbo].[LSR_ZREPORT_TRAINING]    Script Date: 02/15/2014 15:11:38 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LSR_ZREPORT_TRAINING]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[LSR_ZREPORT_TRAINING]
GO


/****** Object:  StoredProcedure [dbo].[LSR_ZREPORT_TRAINING]    Script Date: 02/15/2014 15:11:38 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[LSR_ZREPORT_TRAINING] 
@ZREPORTID NVARCHAR(61),
@STOREID NVARCHAR(20),
@TERMINALID NVARCHAR(20),
@DATAAREAID NVARCHAR(4)
AS

-- Count training transactions and calculate the sum of the training transactions
SELECT 
	COALESCE(COUNT(TRANSACTIONID), 0) NUMBEROFTRANSACTIONS, 
	COALESCE(SUM(GROSSAMOUNT), 0)*-1 as SUM_GROSSAMOUNT,
	COALESCE(SUM(NETAMOUNT), 0)*-1 as SUM_NETAMOUNT
FROM RBOTRANSACTIONTABLE
WHERE ENTRYSTATUS = 5
AND [TYPE] = 2
AND DATAAREAID = @DATAAREAID
AND STORE = @STOREID
AND TERMINAL = @TERMINALID
AND ZREPORTID = @ZREPORTID

/****** END ******/

GO

/****** Object:  StoredProcedure [dbo].[LSR_ZREPORT_INCOMEEXPENSE]    Script Date: 04/16/2012 20:44:59 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LSR_ZREPORT_INCOMEEXPENSE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[LSR_ZREPORT_INCOMEEXPENSE]
GO

/****** Object:  StoredProcedure [dbo].[LSR_ZREPORT_INCOMEEXPENSE]    Script Date: 04/16/2012 20:44:59 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[LSR_ZREPORT_INCOMEEXPENSE] 
@ZREPORTID NVARCHAR(61),
@STOREID NVARCHAR(20),
@TERMINALID NVARCHAR(20),
@DATAAREAID NVARCHAR(4)

AS

SELECT INCOMEEXEPENSEACCOUNT, ACCOUNTNAME, ACCOUNTTYPE, COALESCE(SUM(AMOUNT), 0) * -1 AS AMOUNT
FROM RBOTRANSACTIONINCOMEEXPEN20158 IE
JOIN RBOTRANSACTIONTABLE T 
	ON T.TRANSACTIONID = IE.TRANSACTIONID AND 
	T.DATAAREAID = IE.DATAAREAID AND
	T.TERMINAL = IE.TERMINAL AND	
	T.STORE = IE.STORE	
WHERE T.TERMINAL = @TERMINALID
AND T.STORE = @STOREID
AND T.ZREPORTID = @ZREPORTID
AND T.DATAAREAID = @DATAAREAID
AND T.TYPE = 2
AND T.ENTRYSTATUS = 0
AND IE.TRANSACTIONSTATUS = 0
GROUP BY INCOMEEXEPENSEACCOUNT, ACCOUNTNAME, ACCOUNTTYPE

/****** END ******/
GO

/****** Object:  StoredProcedure [dbo].[LSR_ZREPORT_CURRENCIES]    Script Date: 01/26/2012 20:04:42 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LSR_ZREPORT_CURRENCIES]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[LSR_ZREPORT_CURRENCIES]
GO

/****** Object:  StoredProcedure [dbo].[LSR_ZREPORT_CURRENCIES]    Script Date: 01/26/2012 20:04:42 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[LSR_ZREPORT_CURRENCIES] 
@ZREPORTID NVARCHAR(61),
@STOREID NVARCHAR(20),
@TERMINALID NVARCHAR(20),
@DATAAREAID NVARCHAR(4)
AS

select 
sum(AMOUNTCUR) AMOUNTCUR, 
CURRENCYCODE, 
TXT AS CURRENCYNAME, 
TT.TENDERTYPEID AS TENDERTYPEID, 
TT.NAME AS TENDERTYPENAME,
TT.DEFAULTFUNCTION AS DEFAULTFUNCTION
FROM 
CURRENCY C
JOIN RBOTRANSACTIONPAYMENTTRANS P
	ON P.CURRENCY = C.CURRENCYCODE
	AND P.DATAAREAID = C.DATAAREAID
JOIN RBOSTORETABLE S
	ON P.STORE = S.STOREID
	AND S.DATAAREAID = P.DATAAREAID
JOIN RBOTRANSACTIONTABLE T
	ON P.TRANSACTIONID = T.TRANSACTIONID
	AND P.STORE = T.STORE
	AND P.TERMINAL = T.TERMINAL
	AND P.DATAAREAID = T.DATAAREAID
JOIN RBOTENDERTYPETABLE TT
	ON P.TENDERTYPE = TT.TENDERTYPEID
	AND P.DATAAREAID = TT.DATAAREAID
WHERE 
P.CURRENCY <> S.CURRENCY
AND T.TYPE IN (2,4,5,16,17,20,21)
AND TT.DEFAULTFUNCTION <> 4
AND P.TRANSACTIONSTATUS = 0
AND T.ENTRYSTATUS = 0
AND T.ZREPORTID = @ZREPORTID
AND T.STORE = @STOREID
AND T.TERMINAL = @TERMINALID
AND T.DATAAREAID = @DATAAREAID


GROUP BY 
P.CURRENCY, 
C.CURRENCYCODE, 
C.TXT, 
TT.TENDERTYPEID, 
TT.NAME,
TT.DEFAULTFUNCTION

ORDER BY 
P.CURRENCY
/****** END ******/
GO

/****** Object:  StoredProcedure [dbo].[LSR_ZREPORT_TENDERS]    Script Date: 01/26/2012 20:05:40 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LSR_ZREPORT_TENDERS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[LSR_ZREPORT_TENDERS]
GO

/****** Object:  StoredProcedure [dbo].[LSR_ZREPORT_TENDERS]    Script Date: 01/26/2012 20:05:40 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[LSR_ZREPORT_TENDERS] 
@ZREPORTID NVARCHAR(61),
@STOREID NVARCHAR(20),
@TERMINALID NVARCHAR(20),
@DATAAREAID NVARCHAR(4)
AS

SELECT 
	SUM(PTR.AMOUNTTENDERED) AMOUNTTENDERED, 
	PTR.TENDERTYPE TENDER,
	TT.NAME AS TENDERNAME,
	STT.POSOPERATION
FROM 
	RBOTRANSACTIONPAYMENTTRANS PTR
JOIN RBOTRANSACTIONTABLE TA 
	ON PTR.TRANSACTIONID = TA.TRANSACTIONID 
	AND PTR.DATAAREAID = TA.DATAAREAID 
	AND PTR.STORE = TA.STORE 
	AND PTR.TERMINAL = TA.TERMINAL	   
JOIN RBOSTORETENDERTYPETABLE STT 
	ON PTR.STORE = STT.STOREID 
	AND PTR.DATAAREAID = STT.DATAAREAID 
	AND PTR.TENDERTYPE = STT.TENDERTYPEID
JOIN RBOTENDERTYPETABLE TT
	ON STT.DATAAREAID = TT.DATAAREAID
	AND STT.TENDERTYPEID = TT.TENDERTYPEID
	   
WHERE TA.ZREPORTID = @ZREPORTID
  AND TA.STORE = @STOREID
  AND TA.TERMINAL = @TERMINALID
  AND TA.DATAAREAID = @DATAAREAID
  AND TA.ENTRYSTATUS = 0	
  AND PTR.TRANSACTIONSTATUS = 0
  AND TA.TYPE in (2,3,4,5,16,17,20,21,22)
  AND TT.DEFAULTFUNCTION <> 4 	

GROUP BY PTR.TENDERTYPE, TT.NAME, STT.POSOPERATION
ORDER BY TENDERTYPE

/****** END ******/


GO

/****** Object:  StoredProcedure [dbo].[LSR_ZREPORT_TENDER_DETAILS]    Script Date: 01/26/2012 20:05:40 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LSR_ZREPORT_TENDER_DETAILS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[LSR_ZREPORT_TENDER_DETAILS]
GO

/****** Object:  StoredProcedure [dbo].[LSR_ZREPORT_TENDER_DETAILS]    Script Date: 01/26/2012 20:05:40 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[LSR_ZREPORT_TENDER_DETAILS] 
@ZREPORTID NVARCHAR(61),
@TENDERID NVARCHAR(20),
@STOREID NVARCHAR(20),
@TERMINALID NVARCHAR(20),
@DATAAREAID NVARCHAR(4)
AS

SELECT 
	SUM(PTR.AMOUNTTENDERED) AS AMOUNTTENDERED, 
	PTR.TENDERTYPE AS TENDER,
	COUNT(PTR.CARDTYPEID) AS COUNT,	
	PTR.CARDTYPEID AS CARDTYPEID,
	ISNULL(STC.NAME,PTR.CARDTYPEID) AS CARDNAME  
FROM 
	RBOTRANSACTIONPAYMENTTRANS PTR
JOIN RBOTRANSACTIONTABLE TA 
	ON PTR.TRANSACTIONID = TA.TRANSACTIONID 
	AND PTR.DATAAREAID = TA.DATAAREAID 
	AND PTR.STORE = TA.STORE 
	AND PTR.TERMINAL = TA.TERMINAL	   
LEFT OUTER JOIN RBOSTORETENDERTYPECARDTABLE STC
	ON PTR.STORE = STC.STOREID 
	AND PTR.DATAAREAID = STC.DATAAREAID 
	AND PTR.CARDTYPEID = STC.CARDTYPEID
LEFT OUTER JOIN RBOTENDERTYPETABLE TT
	ON STC.DATAAREAID = TT.DATAAREAID
	AND STC.TENDERTYPEID = TT.TENDERTYPEID
	   
WHERE TA.ZREPORTID = @ZREPORTID
  AND TA.STORE = @STOREID
  AND TA.TERMINAL = @TERMINALID
  AND TA.DATAAREAID = @DATAAREAID
  AND TA.ENTRYSTATUS = 0	
  AND PTR.TRANSACTIONSTATUS = 0
  AND TA.TYPE in (2,3,4,5,16,17,20,21,22)
  AND (TT.DEFAULTFUNCTION is NULL OR TT.DEFAULTFUNCTION <> 4)
  AND PTR.CARDTYPEID <> ''
  AND PTR.TENDERTYPE = @TENDERID
GROUP BY PTR.CARDTYPEID, PTR.TENDERTYPE, STC.NAME
ORDER BY TENDERTYPE

/****** END ******/

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LSR_ZREPORT_CHANGEBACKS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[LSR_ZREPORT_CHANGEBACKS]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[LSR_ZREPORT_CHANGEBACKS] 
@ZREPORTID NVARCHAR(61),
@STOREID NVARCHAR(20),
@TERMINALID NVARCHAR(20),
@DATAAREAID NVARCHAR(4)
AS

SELECT 
	SUM(PTR.AMOUNTTENDERED) CHANGEBACKAMOUNT, 
	PTR.TENDERTYPE TENDERID,
	TT.NAME AS TENDERNAME 
FROM 
	RBOTRANSACTIONPAYMENTTRANS PTR
JOIN RBOTRANSACTIONTABLE TA 
	ON PTR.TRANSACTIONID = TA.TRANSACTIONID 
	AND PTR.DATAAREAID = TA.DATAAREAID 
	AND PTR.STORE = TA.STORE 
	AND PTR.TERMINAL = TA.TERMINAL	   
JOIN RBOSTORETENDERTYPETABLE STT 
	ON PTR.STORE = STT.STOREID 
	AND PTR.DATAAREAID = STT.DATAAREAID 
	AND PTR.TENDERTYPE = STT.TENDERTYPEID
JOIN RBOTENDERTYPETABLE TT
	ON STT.DATAAREAID = TT.DATAAREAID
	AND STT.TENDERTYPEID = TT.TENDERTYPEID
	   
WHERE TA.ZREPORTID = @ZREPORTID
  AND TA.STORE = @STOREID
  AND TA.TERMINAL = @TERMINALID
  AND TA.DATAAREAID = @DATAAREAID
  AND TA.ENTRYSTATUS = 0	
  AND PTR.TRANSACTIONSTATUS = 0
  AND TT.DEFAULTFUNCTION <> 4 	
  AND PTR.CHANGELINE = 1
  
GROUP BY PTR.TENDERTYPE, TT.NAME
ORDER BY TENDERTYPE

/****** END ******/

GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LSR_ZREPORT_CUSTDEPOSITS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[LSR_ZREPORT_CUSTDEPOSITS]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[LSR_ZREPORT_CUSTDEPOSITS] 
@ZREPORTID NVARCHAR(61),
@STOREID NVARCHAR(20),
@TERMINALID NVARCHAR(20),
@DATAAREAID NVARCHAR(4)
AS

select ISNULL(P.AMOUNTTENDERED, 0) AS AMOUNTTENDERED, ISNULL(T.CUSTACCOUNT, '') AS CUSTACCOUNT, 
ISNULL(C.FIRSTNAME, '') AS FIRSTNAME, ISNULL(C.MIDDLENAME, '') AS MIDDLENAME, ISNULL(C.LASTNAME, '') AS LASTNAME, ISNULL(C.NAMEPREFIX, '') AS NAMEPREFIX, ISNULL(C.NAMESUFFIX, '') AS NAMESUFFIX
from RBOTRANSACTIONTABLE T
JOIN RBOTRANSACTIONPAYMENTTRANS P ON T.TRANSACTIONID = P.TRANSACTIONID AND T.STORE = P.STORE AND T.TERMINAL = P.TERMINAL AND T.DATAAREAID = P.DATAAREAID
JOIN CUSTOMER C  ON T.CUSTACCOUNT = C.ACCOUNTNUM AND T.DATAAREAID = C.DATAAREAID
WHERE [TYPE] = 3
AND T.ZREPORTID = @ZREPORTID
AND T.ENTRYSTATUS = 0
AND P.TRANSACTIONSTATUS = 0
AND T.STORE = @STOREID
AND T.TERMINAL = @TERMINALID
AND T.DATAAREAID = @DATAAREAID
ORDER BY CUSTACCOUNT

/****** END ******/

GO

/****** Object:  StoredProcedure [dbo].[LSR_ZREPORT_DISCOUNTS]    Script Date: 06/06/2014 10:36:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LSR_ZREPORT_DISCOUNTS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[LSR_ZREPORT_DISCOUNTS]
GO

/****** Object:  StoredProcedure [dbo].[LSR_ZREPORT_VAT]    Script Date: 06/06/2014 10:36:17 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[LSR_ZREPORT_DISCOUNTS] 
@ZREPORTID NVARCHAR(61),
@STOREID NVARCHAR(20),
@TERMINALID NVARCHAR(20),
@DATAAREAID NVARCHAR(4),
@DISPLAYAMT INT = 0

AS

/*****
@DISPLAYAMT = 0 => the numbers that are returned includes sales and return transactions
@DISPLAYAMT = 1 => the numbers that are returned are only for return transactions
@DISPLAYAMT = 2 => the numbers that are returned are only for sales transactions
****/

-- Discount amount totals for normal sales
SELECT 
COALESCE(SUM(S.WHOLEDISCAMOUNTWITHTAX), 0) AS ALL_DISCOUNTS_INCLTAX, 
COALESCE(SUM(S.TOTALDISCAMOUNTWITHTAX), 0) AS TOTAL_DISCOUNTS_INCLTAX, 
COALESCE(SUM(S.LINEDISCAMOUNTWITHTAX), 0) AS LINE_DISCOUNTS_INCLTAX,
COALESCE(SUM(S.PERIODICDISCAMOUNTWITHTAX), 0) AS PERIODIC_DISCOUNTS_INCLTAX,
COALESCE(SUM(S.DISCAMOUNT), 0) AS ALL_DISCOUNTS, 
COALESCE(SUM(S.TOTALDISCAMOUNT), 0) AS TOTAL_DISCOUNTS, 
COALESCE(SUM(S.LINEDSCAMOUNT), 0) AS LINE_DISCOUNTS, 
COALESCE(SUM(S.PERIODICDISCAMOUNT), 0) AS PERIODIC_DISCOUNTS,
@DISPLAYAMT AS DISPLAYAMT
FROM RBOTRANSACTIONSALESTRANS S
JOIN RBOTRANSACTIONTABLE T ON S.TRANSACTIONID = T.TRANSACTIONID AND S.STORE = T.STORE AND S.TERMINALID = T.TERMINAL AND S.DATAAREAID = T.DATAAREAID
WHERE T.ENTRYSTATUS = 0
AND 1 = CASE WHEN @DISPLAYAMT =  1 AND S.QTY < 0 THEN 0 -- sales
			WHEN @DISPLAYAMT = 2 AND S.QTY > 0 THEN 0 -- returns
			ELSE 1
			END 
AND T.[TYPE] = 2
AND S.TRANSACTIONSTATUS = 0
AND T.ZREPORTID = @ZREPORTID
AND T.DATAAREAID = @DATAAREAID
AND T.TERMINAL = @TERMINALID
AND T.STORE = @STOREID
/****** END ******/

GO

/****** Object:  StoredProcedure [dbo].[LSR_ZREPORT_VAT]    Script Date: 01/26/2012 20:06:11 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LSR_ZREPORT_VAT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[LSR_ZREPORT_VAT]
GO

/****** Object:  StoredProcedure [dbo].[LSR_ZREPORT_VAT]    Script Date: 01/26/2012 20:06:11 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[LSR_ZREPORT_VAT] 
@ZREPORTID NVARCHAR(61),
@STOREID NVARCHAR(20),
@TERMINALID NVARCHAR(20),
@DATAAREAID NVARCHAR(4),
@DISPLAYAMT INT = 0

AS

/*****
@DISPLAYAMT = 0 => the numbers that are returned includes sales and return transactions
@DISPLAYAMT = 1 => the numbers that are returned are only for return transactions
@DISPLAYAMT = 2 => the numbers that are returned are only for sales transactions
****/

SELECT ISNULL(TH.NAME, '') AS TAXGROUPNAME,
ISNULL(S.TAXGROUP, '') AS TAXGROUP,
--(SUM((((S.PRICE * S.QTY) - S.TAXAMOUNT) * -1 ) - S.WHOLEDISCAMOUNTWITHTAX)) AS NETAMOUNT, 
SUM((S.NETAMOUNT) * -1) AS NETAMOUNT, 
(SUM(S.TAXAMOUNT * -1)) AS TAXAMOUNT, 
--(SUM(((S.PRICE * S.QTY) * -1 ) - S.WHOLEDISCAMOUNTWITHTAX)) AS TOTALAMOUNT,
SUM((S.NETAMOUNTINCLTAX) * -1 ) AS TOTALAMOUNT,
@DISPLAYAMT as DISPLAYAMT

FROM RBOTRANSACTIONTABLE T
JOIN RBOTRANSACTIONSALESTRANS S 
	ON T.TRANSACTIONID = S.TRANSACTIONID AND 
	T.DATAAREAID = S.DATAAREAID AND
	T.TERMINAL = S.TERMINALID AND	
	T.STORE = S.STORE	
LEFT OUTER JOIN TAXITEMGROUPHEADING TH 
	ON TH.TAXITEMGROUP = S.TAXGROUP AND
	TH.DATAAREAID = S.DATAAREAID
WHERE T.TERMINAL = @TERMINALID
AND T.STORE = @STOREID
AND T.ZREPORTID = @ZREPORTID
AND T.DATAAREAID = @DATAAREAID
AND T.TYPE = 2
AND 1 = CASE WHEN @DISPLAYAMT =  1 AND S.QTY < 0 THEN 0 -- sales
			WHEN @DISPLAYAMT = 2 AND S.QTY > 0 THEN 0 -- returns
			ELSE 1
			END 			
AND T.ENTRYSTATUS = 0
AND S.TRANSACTIONSTATUS = 0
GROUP BY S.TAXGROUP, TH.NAME
/****** END ******/


GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LSR_ZREPORT_TENDERDECLARATION]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[LSR_ZREPORT_TENDERDECLARATION]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[LSR_ZREPORT_TENDERDECLARATION] 
@ZREPORTID NVARCHAR(61),
@STOREID NVARCHAR(20),
@TERMINALID NVARCHAR(20),
@DATAAREAID NVARCHAR(4),
@TENDERDECLARATIONCALCULATION BIT
AS

;WITH TD_CTE AS(
SELECT 
	RT.AMOUNTTENDERED COUNTEDAMOUNT,
	RT.TENDERTYPE TENDERID,
	TT.NAME TENDERNAME,
	ROW_NUMBER() OVER (PARTITION BY RT.TENDERTYPE ORDER BY RT.TRANSDATE DESC) AS RN
FROM 
	RBOTRANSACTIONTENDERDECLA20165 RT
JOIN RBOTRANSACTIONTABLE TA
	ON TA.TRANSACTIONID = RT.TRANSACTIONID
	AND TA.DATAAREAID = RT.DATAAREAID
	AND TA.STORE = RT.STORE
	AND TA.TERMINAL = RT.TERMINAL
JOIN RBOTENDERTYPETABLE TT
	ON TT.DATAAREAID = RT.DATAAREAID
	AND TT.TENDERTYPEID = RT.TENDERTYPE

WHERE TA.ZREPORTID = @ZREPORTID
  AND TA.STORE = @STOREID
  AND TA.TERMINAL = @TERMINALID
  AND TA.DATAAREAID = @DATAAREAID
  AND TA.ENTRYSTATUS = 0
  AND TA.TYPE = 7
)
SELECT SUM(COUNTEDAMOUNT) AS COUNTEDAMOUNT, TENDERID, TENDERNAME 
FROM TD_CTE WHERE @TENDERDECLARATIONCALCULATION = 1 OR RN = 1
GROUP BY TENDERID, TENDERNAME
ORDER BY TENDERID

/****** END ******/
GO

/****** Object:  StoredProcedure [dbo].[LSR_ZREPORT_TRAINING]    ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LSR_LOG_CLEANUP]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[LSR_LOG_CLEANUP]
GO


/****** Object:  StoredProcedure [dbo].[LSR_LOG_CLEANUP]   ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[LSR_LOG_CLEANUP] 
@TERMINAL NVARCHAR(20),
@STORE NVARCHAR(20),
@DATAAREAID NVARCHAR(4)

AS

-- In the current release there is no configuration for this functionality
-- default will be 30 days, the stored proc params are there for future functionality or customization

DECLARE @HOWMANYDAYS INT

SET @HOWMANYDAYS = 30  --get the configuration from Functionality profile or somewhere else

DELETE FROM POSISLOG
where LOGDATE <= GETDATE()-@HOWMANYDAYS

/****** END ******/

GO

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'[dbo].[LSR_ZREPORT_OVERSHORT]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE [dbo].LSR_ZREPORT_OVERSHORT
GO

/****** Object:  StoredProcedure [dbo].[LSR_ZREPORT_OVERSHORT]    Script Date: 14-Feb-18 4:39:45 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[LSR_ZREPORT_OVERSHORT] 
@ZREPORTID NVARCHAR(61),
@STOREID NVARCHAR(20),
@TERMINALID NVARCHAR(20),
@DATAAREAID NVARCHAR(4)
AS

SELECT 
	SUM(X.DECLAREDAMOUNT - X.AMOUNT) AS AMOUNT,	
	X.TENDER, 
	X.TENDERNAME, 
	X.POSOPERATION 
FROM ( 
	SELECT 
		ISNULL(SUM(PTR.AMOUNTTENDERED), 0) AMOUNT,
		0 AS DECLAREDAMOUNT,
		STT.TENDERTYPEID TENDER,
		TT.NAME AS TENDERNAME,
		STT.POSOPERATION
	FROM 
		RBOSTORETENDERTYPETABLE STT
	JOIN RBOTENDERTYPETABLE TT
		ON STT.DATAAREAID = TT.DATAAREAID
		AND STT.TENDERTYPEID = TT.TENDERTYPEID
	LEFT JOIN RBOTRANSACTIONPAYMENTTRANS PTR
		ON PTR.STORE = STT.STOREID 
		AND PTR.DATAAREAID = STT.DATAAREAID 
		AND PTR.TENDERTYPE = STT.TENDERTYPEID
	LEFT JOIN RBOTRANSACTIONTABLE TA 
		ON PTR.TRANSACTIONID = TA.TRANSACTIONID 
		AND PTR.DATAAREAID = TA.DATAAREAID 
		AND PTR.STORE = TA.STORE 
		AND PTR.TERMINAL = TA.TERMINAL			

	WHERE TT.DEFAULTFUNCTION <> 4 	      
	  AND STT.COUNTINGREQUIRED = 1
	  AND STT.STOREID = @STOREID
	  AND (PTR.ZREPORTID IS NULL 
	  OR (TA.ZREPORTID = @ZREPORTID
	  AND TA.STORE = @STOREID
	  AND TA.TERMINAL = @TERMINALID
	  AND TA.DATAAREAID = @DATAAREAID
	  AND TA.ENTRYSTATUS = 0	
	  AND PTR.TRANSACTIONSTATUS = 0
	  AND TA.TYPE in (2,3,4,5,16,17,20,21,22)))

	GROUP BY STT.TENDERTYPEID, TT.NAME, STT.POSOPERATION

	UNION

	SELECT 
		0 AS AMOUNT,
		ISNULL(SUM(RT.AMOUNTCUR), 0) DECLAREDAMOUNT,
		STT.TENDERTYPEID TENDER,
		TT.NAME AS TENDERNAME,
		STT.POSOPERATION
	FROM 
		RBOSTORETENDERTYPETABLE STT
	JOIN RBOTENDERTYPETABLE TT
		ON STT.DATAAREAID = TT.DATAAREAID
		AND STT.TENDERTYPEID = TT.TENDERTYPEID
	LEFT JOIN RBOTRANSACTIONTENDERDECLA20165 RT
		ON RT.TENDERTYPE = STT.TENDERTYPEID
		AND RT.DATAAREAID = STT.DATAAREAID
		AND RT.STORE = STT.STOREID
	LEFT JOIN RBOTRANSACTIONTABLE TA
		ON TA.TRANSACTIONID = RT.TRANSACTIONID
		AND TA.DATAAREAID = RT.DATAAREAID
		AND TA.STORE = RT.STORE
		AND TA.TERMINAL = RT.TERMINAL

	WHERE STT.COUNTINGREQUIRED = 1	
	AND STT.STOREID = @STOREID
	AND TA.ZREPORTID IS NULL
	OR (TA.ZREPORTID = @ZREPORTID
		AND TA.STORE = @STOREID
		AND TA.TERMINAL = @TERMINALID
		AND TA.DATAAREAID = @DATAAREAID
		AND TA.ENTRYSTATUS = 0
		AND TA.TYPE = 7)

	GROUP BY STT.TENDERTYPEID, TT.NAME, STT.POSOPERATION
) X 
GROUP BY X.TENDER, X.TENDERNAME, X.POSOPERATION
ORDER BY X.TENDERNAME

/****** END ******/
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[spPOSGetLoginType_1_1_Unsecure]'))
begin
   drop procedure dbo.spPOSGetLoginType_1_1_Unsecure
end

GO

create procedure dbo.spPOSGetLoginType_1_1_Unsecure
(@storeID nvarchar(20),@terminalID nvarchar(20),@dataareaID nvarchar(10),@licenseCode nvarchar(30), @version nvarchar(10),@cultureName nvarchar(20) out,@keyboardCode nvarchar(20) out,@layoutName nvarchar(50) out,@allowTrainingMode bit out,
 @licensePassword nvarchar(50) out, @licenseExpireDate datetime out, @storeExists bit out, @terminalExists bit out)
as

set nocount on

declare @showStaffListAtLogon bit
declare @limitStaffListToStore bit
declare @nameConvention nvarchar(10)

set @showStaffListAtLogon = 0
set @limitStaffListToStore = 0
set @storeExists = 0
set @terminalExists = 0
set @licensePassword = ''
set @licenseExpireDate = CURRENT_TIMESTAMP
set @allowTrainingMode = 0

if exists(select 'x' from RBOSTORETABLE where  STOREID = @storeID)
begin
	set @storeExists = 1
end

if exists(select 'x' from RBOTERMINALTABLE where TERMINALID = @terminalID and STOREID = @storeID)
begin
	set @terminalExists = 1
end


select @showStaffListAtLogon = ISNULL(f.SHOWSTAFFLISTATLOGON,0), @limitStaffListToStore = ISNULL(LIMITSTAFFLISTTOSTORE,0),@cultureName = s.CULTURENAME,
@keyboardCode = ISNULL(s.KEYBOARDCODE,''), @layoutName = ISNULL(s.LAYOUTNAME,''), @allowTrainingMode = 0
from RBOTERMINALTABLE t
join RBOSTORETABLE s on t.STOREID = s.STOREID and s.DATAAREAID = t.DATAAREAID and s.STOREID = @storeID
join POSFUNCTIONALITYPROFILE f on 
	case 
		when (t.FUNCTIONALITYPROFILE is NOT NULL and t.FUNCTIONALITYPROFILE <> '') then t.FUNCTIONALITYPROFILE
		when (s.FUNCTIONALITYPROFILE is NOT NULL and s.FUNCTIONALITYPROFILE <> '') then s.FUNCTIONALITYPROFILE
		else ''
	end  = f.PROFILEID  and f.DATAAREAID = s.DATAAREAID
where t.TERMINALID = @terminalID and t.DATAAREAID = @dataareaID

--IF NOT EXISTS(SELECT VOLUMENO FROM POSISLICENSE WHERE DATAAREAID = @dataareaID AND VOLUMENO = @licenseCode AND TERMINALID = @terminalID AND STOREID = @storeID)
--BEGIN
--	INSERT INTO POSISLICENSE(ID, STOREID, TERMINALID, VOLUMENO, PASSWORD, EXPIREDATE, REPLICATIONCOUNTER, [VERSION]) 
--	values(NEWID(),@storeID, @terminalID, @licenseCode, '', CURRENT_TIMESTAMP, 0, @version)
--	set @licensePassword = ''
--	set @licenseExpireDate = CURRENT_TIMESTAMP
--END
--ELSE
--BEGIN
--	select @licensePassword = ISNULL(l.PASSWORD, ''), @licenseExpireDate = ISNULL(l.EXPIREDATE, '1900-01-01 00:00:00.000') 
--	FROM POSISLICENSE l 
--	WHERE DATAAREAID = @dataareaID AND STOREID = @storeID AND TERMINALID = @terminalID AND VOLUMENO = @licenseCode

--	UPDATE POSISLICENSE SET [VERSION] = @version where DATAAREAID = @dataareaID AND STOREID = @storeID AND TERMINALID = @terminalID AND VOLUMENO = @licenseCode
--END


if(@showStaffListAtLogon = 1)
	begin
		select @nameConvention=Value from SystemSettings where GUID='{2CF043AA-B7C2-4158-90EE-69AC5B7AEC32}'
		if(@limitStaffListToStore = 1)
			-- We want the staff list but only limited to the store
			begin
				if(@nameConvention='1')
					begin
						select u.[GUID],[Login], u.FirstName,u.MiddleName, u.LastName, u.NamePrefix, u.NameSuffix, ISNULL(u.STAFFID,'') as STAFFID,settings2.[Value] as NameConvention
						from USERS u
						join RBOSTAFFTABLE s on u.STAFFID = s.STAFFID and u.DATAAREAID = s.DATAAREAID
						join POSUSERPROFILE up on s.USERPROFILE = up.PROFILEID and up.STOREID = @storeID
						inner join dbo.SYSTEMSETTINGS as settings on settings.GUID = '{6278EA02-CC60-4AD2-BEA6-88CD0A8312AB}'
						inner join dbo.SYSTEMSETTINGS as settings2 on settings2.GUID ='{2CF043AA-B7C2-4158-90EE-69AC5B7AEC32}'
						where ((CASE WHEN (LockOutCounter >= settings.[Value]) 
							   THEN 1 ELSE 0 END)) = 0 and IsServerUser = 0 and Deleted=0 and u.DATAAREAID = @dataareaID
						order by u.FirstName, u.MiddleName, u.LastName
					end
				else
					begin
						select u.[GUID],[Login], u.FirstName,u.MiddleName, u.LastName, u.NamePrefix, u.NameSuffix, ISNULL(u.STAFFID,'') as STAFFID,settings2.[Value] as NameConvention
						from USERS u
						join RBOSTAFFTABLE s on u.STAFFID = s.STAFFID and u.DATAAREAID = s.DATAAREAID
						join POSUSERPROFILE up on s.USERPROFILE = up.PROFILEID and up.STOREID = @storeID
						inner join dbo.SYSTEMSETTINGS as settings on settings.GUID = '{6278EA02-CC60-4AD2-BEA6-88CD0A8312AB}'
						inner join dbo.SYSTEMSETTINGS as settings2 on settings2.GUID ='{2CF043AA-B7C2-4158-90EE-69AC5B7AEC32}'
						where ((CASE WHEN (LockOutCounter >= settings.[Value]) 
							   THEN 1 ELSE 0 END)) = 0 and IsServerUser = 0 and Deleted=0 and u.DATAAREAID = @dataareaID
						order by u.LastName, u.FirstName, u.MiddleName
					end
			end
		else
			begin
				if(@nameConvention='1')
					begin
						-- We want the staff list
						select u.[GUID],[Login], FirstName,MiddleName, LastName, NamePrefix, NameSuffix, ISNULL(STAFFID,'') as STAFFID,settings2.[Value] as NameConvention
						from USERS u
						inner join dbo.SYSTEMSETTINGS as settings on settings.GUID = '{6278EA02-CC60-4AD2-BEA6-88CD0A8312AB}'
						inner join dbo.SYSTEMSETTINGS as settings2 on settings2.GUID ='{2CF043AA-B7C2-4158-90EE-69AC5B7AEC32}'
						where ((CASE WHEN (LockOutCounter >= settings.[Value]) 
							   THEN 1 ELSE 0 END)) = 0 and IsServerUser = 0 and Deleted=0 and u.DATAAREAID = @dataareaID
						order by u.FirstName, u.MiddleName, u.LastName
					end
				else
					begin
						-- We want the staff list
						select u.[GUID],[Login], FirstName,MiddleName, LastName, NamePrefix, NameSuffix, ISNULL(STAFFID,'') as STAFFID,settings2.[Value] as NameConvention
						from USERS u
						inner join dbo.SYSTEMSETTINGS as settings on settings.GUID = '{6278EA02-CC60-4AD2-BEA6-88CD0A8312AB}'
						inner join dbo.SYSTEMSETTINGS as settings2 on settings2.GUID ='{2CF043AA-B7C2-4158-90EE-69AC5B7AEC32}'
						where ((CASE WHEN (LockOutCounter >= settings.[Value]) 
							   THEN 1 ELSE 0 END)) = 0 and IsServerUser = 0 and Deleted=0 and u.DATAAREAID = @dataareaID
						order by u.LastName, u.FirstName, u.MiddleName
					end
			end
	end
else
	begin
		-- We do not want the stafflist
		-- We on purpose do a select statement that will return no result
		select 1 where 0 = 1
	end

/****** END ******/

GO


if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[spPOSGetLoginType_1_0_Unsecure]'))
begin
   drop procedure dbo.spPOSGetLoginType_1_0_Unsecure
end

GO

create procedure dbo.spPOSGetLoginType_1_0_Unsecure
(@storeID nvarchar(20),@terminalID nvarchar(20),@dataareaID nvarchar(10),@licenseCode nvarchar(30), @version nvarchar(10),@cultureName nvarchar(20) out,@keyboardCode nvarchar(20) out,@layoutName nvarchar(50) out,@allowTrainingMode bit out,
 @licensePassword nvarchar(50) out, @licenseExpireDate datetime out)
as

declare @storeExists bit
declare @terminalExists bit

set @storeExists = 0
set @terminalExists = 0

exec spPOSGetLoginType_1_1_Unsecure @storeID, @terminalID, @dataareaID, @licenseCode, @version, @cultureName, @keyboardCode, @layoutName, @allowTrainingMode, @licensePassword, @licenseExpireDate

/****** END ******/
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[spPOSSetLicensePassword_1_0_Unsecure]'))
begin
   drop procedure dbo.spPOSSetLicensePassword_1_0_Unsecure 
end

GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[spPOSGetTempHardwareProfile_1_0_Unsecure]'))
begin
   drop procedure dbo.spPOSGetTempHardwareProfile_1_0_Unsecure 
end

GO

CREATE PROCEDURE dbo.spPOSGetTempHardwareProfile_1_0_Unsecure 
(@storeID NVARCHAR(20), @terminalID NVARCHAR(20),@dataAreaID NVARCHAR(4))
AS

SET NOCOUNT ON

SELECT
ISNULL(MSR,0) AS MSR,ISNULL(MSRDEVICENAME,'') AS MSRDEVICENAME,ISNULL(MSRDESCRIPTION,'') AS MSRDESCRIPTION, 
ISNULL(STARTTRACK1,'') AS STARTTRACK1,ISNULL(SEPARATOR1,'') AS SEPARATOR1,ISNULL(ENDTRACK1,'') AS ENDTRACK1, 
ISNULL(SCANNER,0) AS SCANNER,ISNULL(SCANNERDEVICENAME,'') AS SCANNERDEVICENAME,ISNULL(SCANNERDESCRIPTION,'') AS SCANNERDESCRIPTION, 
ISNULL(RFIDSCANNERTYPE,0) AS RFIDSCANNERTYPE,ISNULL(RFIDDEVICENAME,'') AS RFIDDEVICENAME,ISNULL(RFIDDESCRIPTION,'') AS RFIDDESCRIPTION, 
ISNULL(DALLASKEYCONNECTED, 0) AS DALLASKEYCONNECTED,  
ISNULL(DALLASMESSAGEPREFIX, '') AS DALLASMESSAGEPREFIX,  
ISNULL(DALLASKEYREMOVEDMESSAGE, '') AS DALLASKEYREMOVEDMESSAGE,  
ISNULL(DALLASCOMPORT, '') AS DALLASCOMPORT,  
ISNULL(DALLASBAUDRATE, 9600) AS DALLASBAUDRATE,  
ISNULL(DALLASPARITY, 3) AS DALLASPARITY,  
ISNULL(DALLASSTOPBITS, 0) AS DALLASSTOPBITS,  
ISNULL(DALLASDATABITS, 8) AS DALLASDATABITS,
ISNULL(SCALE, 0) AS SCALE  
FROM POSHARDWAREPROFILE p JOIN RBOTERMINALTABLE t ON t.DATAAREAID = p.DATAAREAID AND p.PROFILEID = t.HARDWAREPROFILE
WHERE t.STOREID = @storeID AND p.DATAAREAID = @dataAreaID AND t.TERMINALID = @terminalID

GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[spPOSGetVisualProfile_1_0_Unsecure]'))
begin
   drop procedure dbo.spPOSGetVisualProfile_1_0_Unsecure 
end

GO

CREATE PROCEDURE dbo.spPOSGetVisualProfile_1_0_Unsecure 
(@storeID NVARCHAR(20), @terminalID NVARCHAR(20),@dataAreaID NVARCHAR(4), @posBorderColor INT, @posSelectedRowColor INT)
AS

SET NOCOUNT ON

SELECT
V.PROFILEID,
ISNULL(V.NAME,'') as NAME,
ISNULL(RESOLUTION, 0) as RESOLUTION,
ISNULL(TERMINALTYPE, 0) as TERMINALTYPE,
ISNULL(HIDECURSOR, 0) as HIDECURSOR,
ISNULL(DESIGNALLOWEDONPOS, 0) as DESIGNALLOWEDONPOS,
ISNULL(OPAQUEBACKGROUNDFORM, 0) as OPAQUEBACKGROUNDFORM,
ISNULL(OPACITY, 0) as OPACITY,
ISNULL(USEFORMBACKGROUNDIMAGE, 0) as USEFORMBACKGROUNDIMAGE,
ISNULL(SHOWCURRENCYSYMBOLONCOLUMNS, 0) as SHOWCURRENCYSYMBOLONCOLUMNS,
ISNULL(SCREENINDEX,0) as SCREENINDEX,
ISNULL(RECEIPTPAYMENTLINESSIZE, 30) as RECEIPTPAYMENTLINESSIZE,
ISNULL(RECEIPTRETURNBACKGROUNDIMAGEID, '') as RECEIPTRETURNBACKGROUNDIMAGEID,
RECEIPTRETURNBACKGROUNDIMAGELAYOUT,
RECEIPTRETURNBORDERCOLOR,
CAST(CASE WHEN EXISTS(SELECT 1 FROM RBOTERMINALTABLE TE WHERE TE.VISUALPROFILE = V.PROFILEID)
            OR EXISTS(SELECT 1 FROM RBOSTAFFTABLE ST WHERE ST.VISUALPROFILE = V.PROFILEID)
    THEN 1
    ELSE 0
END AS BIT) AS PROFILEISUSED,
ISNULL(CONFIRMBUTTONSTYLEID, '') as CONFIRMBUTTONSTYLEID,
ISNULL(CANCELBUTTONSTYLEID, '') as CANCELBUTTONSTYLEID,
ISNULL(ACTIONBUTTONSTYLEID, '') as ACTIONBUTTONSTYLEID,
ISNULL(NORMALBUTTONSTYLEID, '') as NORMALBUTTONSTYLEID,
ISNULL(OTHERBUTTONSTYLEID, '') as OTHERBUTTONSTYLEID,
ISNULL(OVERRIDEPOSCONTROLBORDERCOLOR, 0) as OVERRIDEPOSCONTROLBORDERCOLOR,
ISNULL(POSCONTROLBORDERCOLOR, @posBorderColor) as POSCONTROLBORDERCOLOR,
ISNULL(OVERRIDEPOSSELECTEDROWCOLOR, 0) as OVERRIDEPOSSELECTEDROWCOLOR,
ISNULL(POSSELECTEDROWCOLOR, @posSelectedRowColor) as POSSELECTEDROWCOLOR
FROM POSVISUALPROFILE V JOIN RBOTERMINALTABLE t ON t.DATAAREAID = V.DATAAREAID AND V.PROFILEID = t.HARDWAREPROFILE
WHERE t.STOREID = @storeID AND V.DATAAREAID = @dataAreaID AND t.TERMINALID = @terminalID

GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[spPOSGetLicenseFile_1_0_Unsecure]'))
begin
   drop procedure dbo.spPOSGetLicenseFile_1_0_Unsecure
end

GO

CREATE PROCEDURE dbo.spPOSGetLicenseFile_1_0_Unsecure
(@licenseCode NVARCHAR(30), @dataAreaID NVARCHAR(4), @machineID NVARCHAR(1024))
AS

SET NOCOUNT ON

IF NOT EXISTS(SELECT VOLUMENO FROM POSISLICENSE WHERE DATAAREAID = @dataAreaID AND VOLUMENO = @licenseCode)
BEGIN
	INSERT INTO POSISLICENSE(STOREID, TERMINALID, VOLUMENO, PASSWORD, EXPIREDATE, REPLICATIONCOUNTER, LICENSEFILE, MACHINEID) 
	values('', '', @licenseCode, '', CURRENT_TIMESTAMP, 0, NULL, @machineID)
	SELECT 1 WHERE 1 = 0
END
ELSE
BEGIN
	IF NOT EXISTS(SELECT MACHINEID FROM POSISLICENSE WHERE DATAAREAID = @dataAreaID AND VOLUMENO = @licenseCode AND MACHINEID = @machineID)
	BEGIN
		UPDATE POSISLICENSE SET MACHINEID = @machineID WHERE DATAAREAID = @dataAreaID AND VOLUMENO = @licenseCode
		SELECT 1 WHERE 1 = 0
	END
	ELSE
	BEGIN
		SELECT
		LICENSEFILE
		FROM POSISLICENSE 
		WHERE VOLUMENO = @licenseCode AND DATAAREAID = @dataAreaID AND LICENSEFILE IS NOT NULL
	END
END

GO

if exists (select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_NAME = 'spPOSGetSiteServiceAddress_1_0_Unsecure')
drop procedure [dbo].[spPOSGetSiteServiceAddress_1_0_Unsecure]

GO

CREATE PROCEDURE dbo.spPOSGetSiteServiceAddress_1_0_Unsecure
	(@storeID nvarchar(20),
	 @serviceHost nvarchar(50) out, 
	 @servicePort nvarchar(10) out)
AS
BEGIN
	SET NOCOUNT ON;

	select 
		@serviceHost = sp.CENTRALTABLESERVER,
		@servicePort = sp.CENTRALTABLESERVERPORT
	from POSTRANSACTIONSERVICEPROFILE sp
	join RBOSTORETABLE s on s.TRANSACTIONSERVICEPROFILE = sp.PROFILEID
	where s.STOREID = @storeID
END
GO

if exists (select * from INFORMATION_SCHEMA.ROUTINES where ROUTINE_NAME = 'spGetSystemInfo_1_0_Unsecure')
drop procedure [dbo].[spGetSystemInfo_1_0_Unsecure]

go	
Create procedure dbo.spGetSystemInfo_1_0_Unsecure
	(@storeID nvarchar(40),
		@terminalID nvarchar(40),
		@storeName nvarchar(40) out,
		@storeCurrency nvarchar(32) out ,
		@companyName nvarchar(32) out,
		@companyCurrency nvarchar(32) out,
		@lastTransactionID nvarchar(32) out,
		@forcourtActive bit out)
	as

set nocount on
SELECT 
	@companyName = NAME, 
	@companyCurrency = CURRENCYCODE 
FROM COMPANYINFO

SELECT 
	@storeName = NAME, 
	@storeCurrency = CURRENCY

 FROM RBOSTORETABLE WHERE STOREID = @storeID

 SELECT TOP 1 @lastTransactionID =  TRANSACTIONID FROM RBOTRANSACTIONTABLE ORDER BY TRANSDATE DESC

 select @forcourtActive =  FORECOURTMANAGER from RBOTERMINALTABLE terminal
join POSHARDWAREPROFILE hardware on  terminal.HARDWAREPROFILE = hardware.PROFILEID
 where terminalid = @terminalID and STOREID = @storeID


GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_NAME = 'spGetSystemInfo_2_0_Unsecure')
	DROP PROCEDURE [dbo].[spGetSystemInfo_2_0_Unsecure]
GO

CREATE PROCEDURE dbo.spGetSystemInfo_2_0_Unsecure
	(@storeID NVARCHAR(40),
		@terminalID NVARCHAR(40),
		@storeName NVARCHAR(40) OUT,
		@storeCurrency NVARCHAR(32) OUT,
		@companyName NVARCHAR(32) OUT,
		@companyCurrency NVARCHAR(32) OUT,
		@lastTransactionID NVARCHAR(32) OUT,
		@forcourtActive BIT OUT,
        @totalStores INT OUT,
        @totalPos INT OUT,
        @storeLocation NVARCHAR(700) OUT)
AS
BEGIN
    SET NOCOUNT ON

    SELECT 
	    @companyName = NAME, 
	    @companyCurrency = CURRENCYCODE 
    FROM COMPANYINFO

    SELECT 
	    @storeName = NAME, 
	    @storeCurrency = CURRENCY,
        @storeLocation = STUFF(
						   COALESCE(',' + NULLIF(ADDRESS, ''), '')  + 
						   COALESCE(',' + NULLIF(STREET, ''), '') +
						   COALESCE(',' + NULLIF(CITY, ''), '') +
						   COALESCE(',' + NULLIF(ZIPCODE , ''), '') +
						   COALESCE(',' + NULLIF(STATE , ''), '') +
						   COALESCE(',' + NULLIF(COUNTRY , ''), ''),
						   1, 1, '')
    FROM RBOSTORETABLE 
    WHERE STOREID = @storeID

    SELECT TOP 1 @lastTransactionID =  ISNULL(TRANSACTIONID , '')
    FROM RBOTRANSACTIONTABLE 
    ORDER BY TRANSDATE DESC

    SELECT @forcourtActive =  ISNULL(FORECOURTMANAGER, 0) 
    FROM RBOTERMINALTABLE terminal
        JOIN POSHARDWAREPROFILE hardware ON  terminal.HARDWAREPROFILE = hardware.PROFILEID
    WHERE terminalid = @terminalID AND STOREID = @storeID

    SELECT @totalStores = COUNT(STOREID)
    FROM RBOSTORETABLE

    SELECT @totalPos = COUNT(TERMINALID)
    FROM RBOTERMINALTABLE
END
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_NAME = 'spGetSystemInfo_3_0_Unsecure')
	DROP PROCEDURE [dbo].[spGetSystemInfo_3_0_Unsecure]
GO
            
CREATE PROCEDURE dbo.spGetSystemInfo_3_0_Unsecure
	(@storeID NVARCHAR(40),
		@terminalID NVARCHAR(40),
		@storeName NVARCHAR(40) OUT,
		@storeCurrency NVARCHAR(32) OUT,
		@companyName NVARCHAR(32) OUT,
		@companyCurrency NVARCHAR(32) OUT,
		@lastTransactionID NVARCHAR(32) OUT,
		@forcourtActive BIT OUT,
        @totalStores INT OUT,
        @totalPos INT OUT,
        @storeLocation NVARCHAR(700) OUT,
        @featuresUsed NVARCHAR(1000) OUT)
AS
BEGIN
    SET NOCOUNT ON

    SELECT 
	    @companyName = NAME, 
	    @companyCurrency = CURRENCYCODE 
    FROM COMPANYINFO

    SELECT 
	    @storeName = NAME, 
	    @storeCurrency = CURRENCY,
        @storeLocation =  STUFF(
						    COALESCE(',' + NULLIF(ADDRESS, ''), '')  + 
						    COALESCE(',' + NULLIF(STREET, ''), '') +
						    COALESCE(',' + NULLIF(CITY, ''), '') +
						    COALESCE(',' + NULLIF(ZIPCODE , ''), '') +
						    COALESCE(',' + NULLIF(STATE , ''), '') +
						    COALESCE(',' + NULLIF(COUNTRY , ''), ''),
						    1, 1, '')
    FROM RBOSTORETABLE 
    WHERE STOREID = @storeID

    SELECT TOP 1 @lastTransactionID =  ISNULL(TRANSACTIONID , '') 
    FROM RBOTRANSACTIONTABLE 
    ORDER BY TRANSDATE DESC

    SELECT @forcourtActive =  ISNULL(FORECOURTMANAGER, 0) 
    FROM RBOTERMINALTABLE terminal
        JOIN POSHARDWAREPROFILE hardware ON  terminal.HARDWAREPROFILE = hardware.PROFILEID
    WHERE terminalid = @terminalID AND STOREID = @storeID

    SELECT @totalStores = COUNT(STOREID)
    FROM RBOSTORETABLE

    SELECT @totalPos = COUNT(TERMINALID)
    FROM RBOTERMINALTABLE
        
    -- Feature check: SAPB1Connector	
	IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'SAPCONNECTIONSETTINGS')
	BEGIN
		IF EXISTS (SELECT 1 FROM SAPCONNECTIONSETTINGS)
			SET @featuresUsed = 'SAPB1Connector'
	END
END
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[spGetAccessTokens_1_0_Unsecure]'))
BEGIN
	DROP PROCEDURE [dbo].[spGetAccessTokens_1_0_Unsecure]
END
GO

CREATE PROCEDURE [dbo].[spGetAccessTokens_1_0_Unsecure]
AS
	SELECT [DESCRIPTION], [SENDERDNS], [USERID], [STOREID], [TIMESTAMP], [ACTIVE], COALESCE([TOKEN], '') AS TOKEN FROM ACCESSTOKENTABLE
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[spRecalculateOriginalNumberOfTransactionLines]'))
BEGIN
	DROP PROCEDURE [dbo].[spRecalculateOriginalNumberOfTransactionLines]
END
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[spGetPOSStyleByName_1_0_Unsecure]'))
BEGIN
	DROP PROCEDURE [dbo].[spGetPOSStyleByName_1_0_Unsecure]
END
GO

CREATE PROCEDURE [dbo].[spGetPOSStyleByName_1_0_Unsecure]
(@NAME NVARCHAR(100))
AS
	SELECT ID, GUID, 
        ISNULL (NAME,'') as NAME, 
        ISNULL (SYSTEMSTYLE,0) as SYSTEMSTYLE, 
        ISNULL (FONTNAME,'') as FONTNAME, 
        ISNULL (FONTSIZE, 0) AS FONTSIZE, 
        ISNULL (FONTBOLD, 0) AS FONTBOLD, 
        ISNULL (FONTSTRIKETHROUGH, 0) AS FONTSTRIKETHROUGH, 
        ISNULL (FORECOLOR, 0) AS FORECOLOR, 
        ISNULL (BACKCOLOR, 0) AS BACKCOLOR, 
        ISNULL (FONTITALIC, 0) AS FONTITALIC, 
        ISNULL (FONTCHARSET, 0) AS FONTCHARSET, 
        ISNULL (BACKCOLOR2, 0) AS BACKCOLOR2, 
        ISNULL (GRADIENTMODE, 0) AS GRADIENTMODE, 
        ISNULL (SHAPE, 0) AS SHAPE, 
        ISNULL (STYLETYPE, 0) AS STYLETYPE,
        TEXTPOSITION,
        IMPORTDATETIME 
        FROM POSSTYLE
		WHERE NAME = @NAME
GO
