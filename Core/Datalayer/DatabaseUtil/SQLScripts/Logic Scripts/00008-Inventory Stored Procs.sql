/****** 

This script contains any stored procedure that relates to inventory operations

	**** All inventory stored procedures should be created in this script ****
	
	**** This script has to be able to run again and again without producing errors ****

Script Date: 04/10/2018 

******/

USE LSPOSNET 
GO

/****** Object:  StoredProcedure [dbo].[spINVENTORY_CopyStockCountingLines]    Script Date: 04/10/2018 14:18:00 ******/
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[spINVENTORY_CopyStockCountingLines]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[spINVENTORY_CopyStockCountingLines]
GO

/****** Object:  StoredProcedure [dbo].[spINVENTORY_CopyStockCountingLines]    Script Date: 04/10/2018 14:18:00 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spINVENTORY_CopyStockCountingLines] 
@STAFFID NVARCHAR(20),
@FROMADJUSTMENTID NVARCHAR(20),
@TOADJUSTMENTID NVARCHAR(20),
@STOREID NVARCHAR(20),
@DATAAREAID NVARCHAR(10)

AS
INSERT INTO INVENTJOURNALTRANS 
			(JOURNALID, LINENUM, TRANSDATE, ITEMID, ADJUSTMENT,
			COSTPRICE, PRICEUNIT, COSTMARKUP, COSTAMOUNT, SALESAMOUNT, 
			INVENTONHAND, COUNTED, REASONREFRECID, POSTED, POSTEDDATETIME, 
			DATAAREAID, UNITID, MASTERID, PARENTMASTERID, STAFFID, AREA, LINESTATUS)
SELECT @TOADJUSTMENTID, IJT.LINENUM, GETDATE(), IJT.ITEMID, ISNULL(-INV.QUANTITY, 0), --Adjument is Counted - Inventory on hand, but Counted will always be inserted as 0
		0, 0, 0, 0, 0,
		ISNULL(INV.QUANTITY, 0), 0, IJT.REASONREFRECID, 0, GETDATE(),
		@DATAAREAID, IJT.UNITID, NEWID(), NULL, @STAFFID, IJT.AREA, 0
FROM INVENTJOURNALTRANS IJT
INNER JOIN RETAILITEM R ON R.ITEMID = IJT.ITEMID
CROSS JOIN RBOSTORETABLE RST
LEFT OUTER JOIN VINVENTSUM INV ON INV.ITEMID = R.ITEMID AND INV.STOREID = RST.STOREID
LEFT OUTER JOIN UNIT U ON  R.INVENTORYUNITID = U.UNITID
WHERE IJT.JOURNALID = @FROMADJUSTMENTID
AND RST.STOREID = @STOREID
AND IJT.DATAAREAID = @DATAAREAID
GO

/****** Object:  StoredProcedure [dbo].[spINVENTORY_GetItemsFromInventoryFilter]    Script Date: 18/09/2020 13:50:00 ******/
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[spINVENTORY_GetItemsFromInventoryFilter]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[spINVENTORY_GetItemsFromInventoryFilter]
GO

/****** Object:  StoredProcedure [dbo].[spINVENTORY_GetItemsFromInventoryFilter]    Script Date: 04/10/2018 15:21:00 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spINVENTORY_GetItemsFromInventoryFilter] 
@STOREID NVARCHAR(20),
@RETAILGROUPS VARCHAR(MAX),
@RETAILDEPARTMENTS VARCHAR(MAX),
@SPECIALGROUPS VARCHAR(MAX),
@FILTERDELIMITER VARCHAR(MAX)
AS

DECLARE @ITEMTYPEASSEMBLY TINYINT;
DECLARE @ITEMTYPESERVICE TINYINT;
DECLARE @ITEMTYPEMASTER TINYINT;
DECLARE @RETAILGROUPSTABLE TABLE (ID NVARCHAR(20));
DECLARE @RETAILDEPARTMENTSTABLE TABLE (ID NVARCHAR(20));
DECLARE @SPECIALGROUPSTABLE TABLE (ID NVARCHAR(20));

SET @ITEMTYPESERVICE = 2;
SET @ITEMTYPEMASTER = 3;
SET @ITEMTYPEASSEMBLY = 4;

INSERT INTO @RETAILGROUPSTABLE SELECT Value FROM dbo.SplitList(@RETAILGROUPS, @FILTERDELIMITER);
INSERT INTO @RETAILDEPARTMENTSTABLE SELECT Value FROM dbo.SplitList(@RETAILDEPARTMENTS, @FILTERDELIMITER);
INSERT INTO @SPECIALGROUPSTABLE SELECT Value FROM dbo.SplitList(@SPECIALGROUPS, @FILTERDELIMITER);

IF OBJECT_ID('tempdb..#ASSEMBLYCOMPONENTTABLE', 'U') IS NOT NULL
	DROP TABLE #ASSEMBLYCOMPONENTTABLE;

CREATE TABLE #ASSEMBLYCOMPONENTTABLE (
	ASSEMBLYITEMID NVARCHAR(40) COLLATE database_default,
	ITEMID NVARCHAR(40) COLLATE database_default,
	ITEMTYPE TINYINT);

INSERT INTO #ASSEMBLYCOMPONENTTABLE 
SELECT 
    ISNULL(A1.ITEMID, A2.ITEMID),
    CI.ITEMID, 
    CI.ITEMTYPE
FROM RETAILITEM R
LEFT OUTER JOIN RETAILITEMASSEMBLY A1 ON A1.ID = (
    SELECT TOP 1 A.ID FROM RETAILITEMASSEMBLY A 
    WHERE A.ITEMID = R.ITEMID AND A.ENABLED = 1 AND A.STOREID = @STOREID AND CAST(STARTINGDATE AS DATE) <= CAST(GETDATE() AS DATE) 
    ORDER BY STARTINGDATE DESC
)
LEFT OUTER JOIN RETAILITEMASSEMBLY A2 ON A2.ID = (
    SELECT TOP 1 A.ID FROM RETAILITEMASSEMBLY A 
    WHERE A.ITEMID = R.ITEMID AND A.ENABLED = 1 AND A.STOREID = '' AND CAST(STARTINGDATE AS DATE) <= CAST(GETDATE() AS DATE) 
    ORDER BY STARTINGDATE DESC
)
LEFT OUTER JOIN RETAILITEMASSEMBLYCOMPONENTS C ON C.ASSEMBLYID = ISNULL(A1.ID, A2.ID)
LEFT OUTER JOIN RETAILITEM CI ON CI.ITEMID = C.ITEMID;

WITH ITEMSFROMFILTER (ITEMID, ITEMTYPE) AS (
	SELECT 
		R.ITEMID, 
		R.ITEMTYPE
	FROM RETAILITEM R
	
	LEFT OUTER JOIN RETAILGROUP RG ON R.RETAILGROUPMASTERID = RG.MASTERID
	LEFT OUTER JOIN RETAILDEPARTMENT RD ON RG.DEPARTMENTMASTERID = RD.MASTERID
	LEFT OUTER JOIN SPECIALGROUPITEMS SG ON SG.ITEMID = R.ITEMID

	WHERE R.ITEMTYPE NOT IN (@ITEMTYPESERVICE, @ITEMTYPEMASTER) AND R.DELETED = 0
	AND (@RETAILGROUPS = '' OR RG.GROUPID IN (SELECT ID FROM @RETAILGROUPSTABLE))
	AND (@RETAILDEPARTMENTS = '' OR RD.DEPARTMENTID IN (SELECT ID FROM @RETAILDEPARTMENTSTABLE))
	AND (@SPECIALGROUPS = '' OR SG.GROUPID IN (SELECT ID FROM @SPECIALGROUPSTABLE))
),
COMPONENTITEMS (ITEMID, ITEMTYPE) AS (
	-- Anchor member: find all components for the assembly items in the filter
	SELECT 
		AC1.ITEMID, 
		AC1.ITEMTYPE
	FROM #ASSEMBLYCOMPONENTTABLE AC1
	JOIN ITEMSFROMFILTER FI ON FI.ITEMID = AC1.ASSEMBLYITEMID AND FI.ITEMTYPE = @ITEMTYPEASSEMBLY

	-- Recursive member: Find the components of the components that are assembly items
	UNION ALL
	SELECT 
		AC2.ITEMID, 
		AC2.ITEMTYPE
	FROM #ASSEMBLYCOMPONENTTABLE AC2
	INNER JOIN COMPONENTITEMS CI
	ON AC2.ASSEMBLYITEMID = CI.ITEMID
)
SELECT DISTINCT ITEMID
FROM (
	SELECT * FROM COMPONENTITEMS CI
	UNION ALL
	SELECT * FROM ITEMSFROMFILTER FI
) ITEMS
WHERE ITEMTYPE NOT IN (@ITEMTYPESERVICE, @ITEMTYPEMASTER, @ITEMTYPEASSEMBLY) 
ORDER BY ITEMID ASC;

DROP TABLE #ASSEMBLYCOMPONENTTABLE;

RETURN
GO

/****** Object:  StoredProcedure [dbo].[spINVENTORY_CreateStockCountingLinesFromFilter]    Script Date: 04/10/2018 15:21:00 ******/
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[spINVENTORY_CreateStockCountingLinesFromFilter]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[spINVENTORY_CreateStockCountingLinesFromFilter]
GO

/****** Object:  StoredProcedure [dbo].[spINVENTORY_CreateStockCountingLinesFromFilter]    Script Date: 04/10/2018 15:21:00 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spINVENTORY_CreateStockCountingLinesFromFilter] 
@STAFFID NVARCHAR(20),
@ADJUSTMENTID NVARCHAR(20),
@STOREID NVARCHAR(20),
@RETAILGROUPS VARCHAR(MAX),
@RETAILDEPARTMENTS VARCHAR(MAX),
@VENDORS VARCHAR(MAX),
@SPECIALGROUPS VARCHAR(MAX),
@FILTERDELIMITER VARCHAR(MAX),
@DATAAREAID NVARCHAR(10),
@FILTERBYINVENTONHAND BIT,
@INVENTORYONHAND INT,
@INVENTORYONHANDCOMPARISON INT
AS

DECLARE @VENDORSTABLE TABLE (ID NVARCHAR(20));
INSERT INTO @VENDORSTABLE SELECT Value FROM dbo.SplitList(@VENDORS, @FILTERDELIMITER);

IF OBJECT_ID('tempdb..#ITEMLIST', 'U') IS NOT NULL
	DROP TABLE #ITEMLIST;

CREATE TABLE #ITEMLIST (ITEMID NVARCHAR(40) COLLATE database_default);

INSERT INTO 
	#ITEMLIST 
EXECUTE 
	spINVENTORY_GetItemsFromInventoryFilter 
		@STOREID,
		@RETAILGROUPS,
		@RETAILDEPARTMENTS,
		@SPECIALGROUPS,
		@FILTERDELIMITER;

WITH JOURNALTRANSACTIONS (JOURNALID, TRANSDATE, ITEMID, ADJUSTMENT,
					COSTPRICE, PRICEUNIT, COSTMARKUP, COSTAMOUNT, SALESAMOUNT, 
					INVENTONHAND, COUNTED, REASONREFRECID, POSTED, POSTEDDATETIME, 
					DATAAREAID, UNITID, PARENTMASTERID, STAFFID, AREA, LINESTATUS) 
AS (
    SELECT DISTINCT @ADJUSTMENTID, GETDATE(), R.ITEMID, ISNULL(-INV.QUANTITY, 0),
            		0, 0, 0, 0, 0,
            		ISNULL(INV.QUANTITY, 0), 0, '', 0, GETDATE(),
            		@DATAAREAID, R.INVENTORYUNITID, NULL, @STAFFID, NULL, 0	
	FROM #ITEMLIST ITEMS
    JOIN RETAILITEM R ON R.ITEMID = ITEMS.ITEMID

	LEFT OUTER JOIN VENDORITEMS VI ON VI.RETAILITEMID = R.ITEMID AND VI.VENDORID IN (
		CASE WHEN @VENDORS = '' THEN '' ELSE (SELECT ID FROM @VENDORSTABLE) END
	)
	LEFT OUTER JOIN VENDTABLE VT ON VT.ACCOUNTNUM = VI.VENDORID
	CROSS JOIN RBOSTORETABLE RST
	LEFT OUTER JOIN VINVENTSUM INV ON INV.ITEMID = R.ITEMID AND INV.STOREID = RST.STOREID
	LEFT OUTER JOIN UNIT U ON  R.INVENTORYUNITID = U.UNITID

	WHERE RST.STOREID = @STOREID
	AND (@VENDORS = '' OR VT.ACCOUNTNUM IN (SELECT ID FROM @VENDORSTABLE))
	AND (@FILTERBYINVENTONHAND = 0 OR ((@INVENTORYONHANDCOMPARISON = 0 AND ISNULL(INV.QUANTITY, 0) = @INVENTORYONHAND)
									 OR (@INVENTORYONHANDCOMPARISON = 1 AND ISNULL(INV.QUANTITY, 0) > @INVENTORYONHAND)
									 OR (@INVENTORYONHANDCOMPARISON = 2 AND ISNULL(INV.QUANTITY, 0) < @INVENTORYONHAND)))
)
INSERT INTO INVENTJOURNALTRANS 
			(JOURNALID, LINENUM, TRANSDATE, ITEMID, ADJUSTMENT,
			COSTPRICE, PRICEUNIT, COSTMARKUP, COSTAMOUNT, SALESAMOUNT, 
			INVENTONHAND, COUNTED, REASONREFRECID, POSTED, POSTEDDATETIME, 
			DATAAREAID, UNITID, MASTERID, PARENTMASTERID, STAFFID, AREA, LINESTATUS)
SELECT JOURNALID, CONCAT(@ADJUSTMENTID, '-F', FORMAT(ROW_NUMBER() OVER (ORDER BY (SELECT NULL)), '0000000000')), TRANSDATE, ITEMID, ADJUSTMENT,
			COSTPRICE, PRICEUNIT, COSTMARKUP, COSTAMOUNT, SALESAMOUNT, 
			INVENTONHAND, COUNTED, REASONREFRECID, POSTED, POSTEDDATETIME, 
			DATAAREAID, UNITID, NEWID(), PARENTMASTERID, STAFFID, AREA, LINESTATUS
FROM JOURNALTRANSACTIONS

DROP TABLE #ITEMLIST;
GO

/****** Object:  StoredProcedure [dbo].[spINVENTORY_ImportStockCountingLinesFromXML]    Script Date: 05/10/2018 15:11:00 ******/
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[spINVENTORY_ImportStockCountingLinesFromXML]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[spINVENTORY_ImportStockCountingLinesFromXML]
GO

/****** Object:  StoredProcedure [dbo].[spINVENTORY_ImportStockCountingLinesFromXML]    Script Date: 05/10/2018 15:11:00 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spINVENTORY_ImportStockCountingLinesFromXML] 
@XMLDATA XML,
@STAFFID NVARCHAR(20),
@DATAAREAID NVARCHAR(10),
@LANGUAGECODE NVARCHAR(10),
@INSERTEDRECORDS INT OUTPUT
AS
WITH XMLTABLE (STOCKCOUNTINGID, ITEMID, LINENUMBER, COUNTED, UNITID) AS
(
	SELECT Tab.Col.value('STOCKCOUNTINGID[1]', 'nvarchar(20)'),
	Tab.Col.value('ITEMID[1]', 'nvarchar(30)'),
	COALESCE(TRY_CONVERT(int, Tab.Col.value('LINENUMBER[1]', 'nvarchar(20)')), ROW_NUMBER() OVER (ORDER BY (SELECT NULL))),
	COALESCE(TRY_PARSE(Tab.Col.value('COUNTED[1]', 'nvarchar(40)') AS numeric(28,12) USING @LANGUAGECODE), 0),
	Tab.Col.value('UNITID[1]', 'nvarchar(20)')
	FROM @XMLDATA.nodes('/DocumentElement/StockCountingLine') Tab(Col)
)
INSERT INTO INVENTJOURNALTRANS 
			(JOURNALID, LINENUM, TRANSDATE, ITEMID, ADJUSTMENT,
			COSTPRICE, PRICEUNIT, COSTMARKUP, COSTAMOUNT, SALESAMOUNT, 
			INVENTONHAND, COUNTED, REASONREFRECID, POSTED, POSTEDDATETIME, 
			DATAAREAID, UNITID, MASTERID, PARENTMASTERID, STAFFID, AREA, LINESTATUS)
SELECT IJT.JOURNALID, CONCAT('XLS-', R.ITEMID, '-', IJT.JOURNALID, '-', FORMAT(X.LINENUMBER, '0000000')), GETDATE(), R.ITEMID, X.COUNTED - ISNULL(INV.QUANTITY, 0),
		0, 0, 0, 0, 0,
		ISNULL(INV.QUANTITY, 0), X.COUNTED, '', 0, GETDATE(),
		@DATAAREAID, X.UNITID, NEWID(), NULL, @STAFFID, NULL, 0
FROM XMLTABLE X
INNER JOIN INVENTJOURNALTABLE IJT ON IJT.JOURNALID = X.STOCKCOUNTINGID
INNER JOIN RETAILITEM R ON R.ITEMID = X.ITEMID
INNER JOIN RBOSTORETABLE RST ON RST.STOREID = IJT.STOREID
LEFT OUTER JOIN VINVENTSUM INV ON INV.ITEMID = R.ITEMID AND INV.STOREID = RST.STOREID
WHERE IJT.DATAAREAID = @DATAAREAID

SET @INSERTEDRECORDS = @@ROWCOUNT;
GO

/****** Object:  StoredProcedure [dbo].[spINVENTORY_PostAdjustment]    Script Date: 01/11/2018 13:51:00 ******/
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[spINVENTORY_PostAdjustment]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[spINVENTORY_PostAdjustment]
GO

/****** Object:  StoredProcedure [dbo].[spINVENTORY_PostAdjustment]    Script Date: 01/11/2018 13:51:00 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spINVENTORY_PostAdjustment]
	@JOURNALID NVARCHAR(40),
	@DATAAREAID NVARCHAR(4),
	@POSTINGRESULT INT OUT
AS
	--Posting result matches PostStockCountingResult enum
	SET @POSTINGRESULT = 0

	DECLARE @EXISTINGJOURNALID NVARCHAR(40);
	DECLARE @HASUNPOSTEDLINES BIT;
	DECLARE @STATUS INT;
	DECLARE @PROCESSINGSTATUS INT;

	SELECT @EXISTINGJOURNALID = J.JOURNALID, 
	@STATUS = MIN(J.POSTED),
	@PROCESSINGSTATUS = MIN(J.PROCESSINGSTATUS), 
	@HASUNPOSTEDLINES = CAST((SELECT COUNT(T.JOURNALID) FROM INVENTJOURNALTRANS T 
							  JOIN RETAILITEM I ON T.ITEMID = I.ITEMID AND I.DELETED = 0 
							  WHERE T.POSTED = 0 AND T.JOURNALID = @JOURNALID AND T.DATAAREAID = @DATAAREAID) AS BIT)
	FROM INVENTJOURNALTABLE J
	WHERE J.JOURNALID = @JOURNALID AND J.DATAAREAID = @DATAAREAID GROUP BY J.JOURNALID

	IF @EXISTINGJOURNALID IS NULL
	BEGIN
		SET @POSTINGRESULT = 1 -- Journal not found
		RETURN @POSTINGRESULT
	END

	IF @HASUNPOSTEDLINES = 1
	BEGIN
		SET @POSTINGRESULT = 8 -- Journal has unposted lines
		RETURN @POSTINGRESULT
	END

	IF @STATUS = 1
	BEGIN
		SET @POSTINGRESULT = 3 -- Journal is already posted
		RETURN @POSTINGRESULT
	END

	IF @PROCESSINGSTATUS <> 0
	BEGIN
		SET @POSTINGRESULT = 9 -- Journal currently processing
		RETURN @POSTINGRESULT
	END

	IF @POSTINGRESULT = 0
	BEGIN
		UPDATE INVENTJOURNALTABLE SET POSTED = 1, POSTEDDATETIME = GETDATE() WHERE JOURNALID = @JOURNALID AND DATAAREAID = @DATAAREAID  
	END
GO

/****** Object:  StoredProcedure [dbo].[spINVENTORY_CompressStockCountingLines]    Script Date: 12/11/2018 11:30:00 ******/
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[spINVENTORY_CompressStockCountingLines]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[spINVENTORY_CompressStockCountingLines]
GO

/****** Object:  StoredProcedure [dbo].[spINVENTORY_CompressStockCountingLines]    Script Date: 12/11/2018 11:30:00 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [DBO].[spINVENTORY_CompressStockCountingLines]
	@JOURNALID NVARCHAR(40),
	@DATAAREAID NVARCHAR(4),
	@SETPROCESSINGSTATUS BIT,
	@COMPRESSINGRESULT INT OUT
AS

SET @COMPRESSINGRESULT = 0

DECLARE @EXISTINGJOURNALID NVARCHAR(40) = NULL;
DECLARE @JOURNALTYPE INT;
DECLARE @STATUS INT;
DECLARE @PROCESSINGSTATUS INT;

SELECT @EXISTINGJOURNALID = JOURNALID, @JOURNALTYPE = JOURNALTYPE, @STATUS = POSTED, @PROCESSINGSTATUS = PROCESSINGSTATUS FROM INVENTJOURNALTABLE WHERE JOURNALID = @JOURNALID AND DATAAREAID = @DATAAREAID

IF(@EXISTINGJOURNALID IS NULL)
BEGIN
	SET @COMPRESSINGRESULT = 1 -- Journal not found
END

IF(@COMPRESSINGRESULT = 0 AND @JOURNALTYPE <> 4)
BEGIN
	SET @COMPRESSINGRESULT = 2 -- Invalid journal type
END

IF(@COMPRESSINGRESULT = 0 AND @STATUS = 1)
BEGIN
	SET @COMPRESSINGRESULT = 3 -- Journal already posted
END

IF(@COMPRESSINGRESULT = 0 AND @SETPROCESSINGSTATUS = 1)
BEGIN
	IF(@PROCESSINGSTATUS <> 0)
	BEGIN
		SET @COMPRESSINGRESULT = 4 -- Journal processing
	END
	ELSE
	BEGIN
		-- Set journal processing status to None
		UPDATE INVENTJOURNALTABLE SET PROCESSINGSTATUS = 1 WHERE JOURNALID = @JOURNALID AND DATAAREAID = @DATAAREAID  
	END
END

IF(@COMPRESSINGRESULT = 0)
BEGIN
	BEGIN TRY
		BEGIN TRANSACTION
	
	DECLARE @UNITCONVERSIONSTABLE UNITCONVERSIONSTABLETYPE

		-- Get all unit conversions needed
		INSERT INTO @UNITCONVERSIONSTABLE SELECT FROMUNIT, TOUNIT, FACTOR, ITEMID FROM UNITCONVERT 
		WHERE (ITEMID = '' OR ITEMID IN (SELECT IJT.ITEMID FROM INVENTJOURNALTRANS IJT WHERE IJT.JOURNALID = @JOURNALID AND IJT.DATAAREAID = DATAAREAID)) AND DATAAREAID = DATAAREAID

		--Select all duplicate lines and sum up the values to be merged
		SELECT S.NEWCOUNTED, S.NEWTRANSDATE, S.NEWLINENUM, S.INVENTORYUNITID, T.* INTO #DUPLICATELINES FROM INVENTJOURNALTRANS T
		JOIN (SELECT JOURNALID, IJT.ITEMID, R.INVENTORYUNITID, SUM(IIF(UNITID <> R.INVENTORYUNITID, dbo.CONVERTQTYBETWEENUNITS(IJT.ITEMID, COUNTED, IJT.UNITID, R.INVENTORYUNITID, @UNITCONVERSIONSTABLE), COUNTED)) AS NEWCOUNTED, MIN(TRANSDATE) AS NEWTRANSDATE, MIN(LINENUM) AS NEWLINENUM, COUNT(*) AS CNT 
			  FROM INVENTJOURNALTRANS IJT
			  JOIN RETAILITEM R ON R.ITEMID = IJT.ITEMID
			  WHERE POSTED = 0 AND JOURNALID = @JOURNALID AND DATAAREAID = @DATAAREAID GROUP BY JOURNALID, IJT.ITEMID, R.INVENTORYUNITID HAVING COUNT(*) > 1) 
			  S ON T.JOURNALID = S.JOURNALID AND T.ITEMID = S.ITEMID ORDER BY TRANSDATE
		
		IF @@ROWCOUNT = 0
			GOTO NODUPLICATES
	
		--Delete all duplicate lines from the original table
		DELETE INVENTJOURNALTRANS WHERE JOURNALID = @JOURNALID AND DATAAREAID = @DATAAREAID AND LINENUM IN (SELECT LINENUM FROM #DUPLICATELINES)
	
		--Insert one line with merged values
		;WITH ToInsert AS (
		SELECT *, ROW_NUMBER() OVER(PARTITION BY ITEMID, UNITID ORDER BY TRANSDATE ASC) AS RN FROM #DUPLICATELINES)
		INSERT INTO INVENTJOURNALTRANS SELECT JOURNALID, NEWLINENUM, NEWTRANSDATE, ITEMID, ADJUSTMENT, COSTPRICE, PRICEUNIT, COSTMARKUP, COSTAMOUNT, SALESAMOUNT, INVENTONHAND, NEWCOUNTED, REASONREFRECID, POSTED, POSTEDDATETIME, DATAAREAID, INVENTORYUNITID, MASTERID, PARENTMASTERID, STAFFID, AREA, LINESTATUS, PICTUREID, OMNILINEID, OMNITRANSACTIONID 
		FROM ToInsert WHERE RN = 1
	
	NODUPLICATES:
		DROP TABLE #DUPLICATELINES
		COMMIT
	END TRY
	BEGIN CATCH
		ROLLBACK
		SET @COMPRESSINGRESULT = 5
	END CATCH
END

IF(@COMPRESSINGRESULT = 0 AND @SETPROCESSINGSTATUS = 1)
BEGIN
	-- Set journal processing status to None
	UPDATE INVENTJOURNALTABLE SET PROCESSINGSTATUS = 0 WHERE JOURNALID = @JOURNALID AND DATAAREAID = @DATAAREAID  
END
GO

/****** Object:  StoredProcedure [dbo].[spINVENTORY_PostAllStockCountingLines]    Script Date: 05/10/2018 15:11:00 ******/
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[spINVENTORY_PostAllStockCountingLines]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[spINVENTORY_PostAllStockCountingLines]
GO

/****** Object:  StoredProcedure [dbo].[spINVENTORY_PostAllStockCountingLines]    Script Date: 05/10/2018 15:11:00 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spINVENTORY_PostAllStockCountingLines]
	@JOURNALID NVARCHAR(40),
	@DATAAREAID NVARCHAR(4),
	@POSTINGRESULT INT OUT
AS

DECLARE @STOREID NVARCHAR(40)
DECLARE @DEBUG INT

SET @DEBUG = 0

/*

@POSTINGRESULT VALUES:
0 = Successful posting
1 = Journal not found
2 = Journal not a stock counting journal
3 = Journal already fully posted
4 = N/A in this context
5 = Error posting journal

*/

SET @POSTINGRESULT = 0 -- DEFAULT VALUE SET

-- Make sure the stock counting journal exists
IF NOT EXISTS (SELECT JOURNALID FROM INVENTJOURNALTABLE WHERE JOURNALID = @JOURNALID AND DATAAREAID = @DATAAREAID)
BEGIN
	SET @POSTINGRESULT = 1
	IF (@DEBUG = 1)	PRINT 'Journal does not exist'
END

-- Make sure the journal being posted is a stock counting journal
IF @POSTINGRESULT = 0 AND NOT EXISTS (SELECT JOURNALID FROM INVENTJOURNALTABLE WHERE JOURNALID = @JOURNALID AND DATAAREAID = @DATAAREAID AND JOURNALTYPE = 4)
BEGIN
	SET @POSTINGRESULT = 2
	IF (@DEBUG = 1)	PRINT 'Journal not a stock counting journal'
END

-- Make sure there are any lines to be posted
IF @POSTINGRESULT = 0 AND NOT EXISTS (SELECT TOP 1 JOURNALID FROM INVENTJOURNALTRANS WHERE JOURNALID = @JOURNALID AND DATAAREAID = @DATAAREAID AND POSTED = 0)
BEGIN
	SET @POSTINGRESULT = 3
	IF (@DEBUG = 1)	PRINT 'All lines already posted'
END

IF @POSTINGRESULT = 0 AND NOT EXISTS (SELECT TOP 1 JOURNALID FROM INVENTJOURNALTABLE WHERE JOURNALID = @JOURNALID AND DATAAREAID = @DATAAREAID AND PROCESSINGSTATUS = 0)
BEGIN
	SET @POSTINGRESULT = 9
	IF (@DEBUG = 1)	PRINT 'Journal is currently processing'
END

IF(@POSTINGRESULT = 0)
BEGIN
	DECLARE @COMPRESSINGRESULT INT = 0;
	
	-- Set journal processing status to Compressing
	UPDATE INVENTJOURNALTABLE SET PROCESSINGSTATUS = 1 WHERE JOURNALID = @JOURNALID AND DATAAREAID = @DATAAREAID  

	EXEC spINVENTORY_CompressStockCountingLines @JOURNALID, @DATAAREAID, 0, @COMPRESSINGRESULT OUT

	IF(@COMPRESSINGRESULT <> 0)
	BEGIN
		SET @POSTINGRESULT = 4
		IF (@DEBUG = 1)	PRINT 'Error compressing journal lines'
		-- Set journal processing status to None
		UPDATE INVENTJOURNALTABLE SET PROCESSINGSTATUS = 0 WHERE JOURNALID = @JOURNALID AND DATAAREAID = @DATAAREAID  
	END
END

IF (@POSTINGRESULT = 0)
BEGIN
	IF (@DEBUG = 1)	PRINT 'Start the posting'

	BEGIN TRY

	-- Set journal processing status to Posting
	UPDATE INVENTJOURNALTABLE SET PROCESSINGSTATUS = 2 WHERE JOURNALID = @JOURNALID AND DATAAREAID = @DATAAREAID  

	DECLARE @ONHAND_QUANTITY NUMERIC(28,12)
	DECLARE @ITEMID NVARCHAR(40)
	DECLARE @ADJUSTMENT_IN_COUNTED_UNIT NUMERIC(28,12)
	DECLARE @ADJUSTMENT_IN_INVENTORY_UNIT NUMERIC(28,12)
	DECLARE @COUNTED NUMERIC(28,12)
	DECLARE @COUNTED_UNITID NVARCHAR(40)
	DECLARE @INVENTORY_UNITID NVARCHAR(40)
	DECLARE @FACTOR NUMERIC(28,12)
	DECLARE @PURCHASEPRICE NUMERIC(28,12)	
	DECLARE @SALESPRICE NUMERIC(28,12)	
	DECLARE @SALESPRICEWITHTAX NUMERIC(28,12)			
	DECLARE @COUNTED_IN_INVENTORYUNIT NUMERIC(28,12)
	DECLARE @LINENUM NVARCHAR(60)
	DECLARE @MASTERID UNIQUEIDENTIFIER
	DECLARE @REASONCODE NVARCHAR(40)
	DECLARE @ITEMID_INV_UNITID TABLE (ITEMID NVARCHAR(30), UNITID NVARCHAR(20), DELETED BIT)
	DECLARE @UNITCONVERSIONSTABLE UNITCONVERSIONSTABLETYPE
	
	DECLARE @COSTCALCULATION INT
	SELECT @COSTCALCULATION = CAST([Value] AS INT) FROM SYSTEMSETTINGS WHERE [GUID] = '2BAB2653-C366-480E-8DC2-99107BC03D5F'

	-- Get the store ID for the journal
	SELECT @STOREID = STOREID FROM INVENTJOURNALTABLE WHERE JOURNALID = @JOURNALID AND DATAAREAID = @DATAAREAID

	-- Create a temporary table with item ID's, inventory ID's and the deletion status of the items
	INSERT INTO @ITEMID_INV_UNITID SELECT R.ITEMID, INVENTORYUNITID AS UNITID, R.DELETED FROM RETAILITEM R
	WHERE R.ITEMID IN (SELECT IJT.ITEMID FROM INVENTJOURNALTRANS IJT WHERE IJT.JOURNALID = @JOURNALID AND IJT.DATAAREAID = @DATAAREAID AND IJT.POSTED = 0)

	-- Get all unit conversions needed
	INSERT INTO @UNITCONVERSIONSTABLE SELECT FROMUNIT, TOUNIT, FACTOR, ITEMID FROM UNITCONVERT WHERE (ITEMID = '' OR ITEMID IN (SELECT ITEMID FROM @ITEMID_INV_UNITID)) AND DATAAREAID = @DATAAREAID

	DECLARE LINESFORPOSTING CURSOR FOR
	SELECT IJT.MASTERID, IJT.ITEMID, LINENUM, ISNULL(COUNTED, 0) AS COUNTED, UNITID, REASONREFRECID, ISNULL(INV.QUANTITY, 0), ISNULL(R.SALESPRICEINCLTAX, 0), ISNULL(R.SALESPRICE, 0), IIF(@COSTCALCULATION = 2, ISNULL(R.PURCHASEPRICE, 0), ISNULL(C.COST, 0))
	FROM INVENTJOURNALTRANS IJT
	LEFT OUTER JOIN VINVENTSUM INV ON INV.ITEMID = IJT.ITEMID AND INV.STOREID = @STOREID
	LEFT OUTER JOIN RETAILITEM R ON R.ITEMID = IJT.ITEMID
	OUTER APPLY (SELECT TOP 1 COST FROM RETAILITEMCOST WHERE ITEMID = IJT.ITEMID AND STOREID = @STOREID ORDER BY ENTRYDATE DESC) C
	WHERE JOURNALID = @JOURNALID 
	AND DATAAREAID = @DATAAREAID
	AND POSTED = 0		
	OPEN LINESFORPOSTING

	FETCH FROM LINESFORPOSTING INTO @MASTERID, @ITEMID, @LINENUM, @COUNTED, @COUNTED_UNITID, @REASONCODE, @ONHAND_QUANTITY, @SALESPRICEWITHTAX, @SALESPRICE, @PURCHASEPRICE

	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF (@DEBUG = 1)	PRINT 'Item ID: ' + @ITEMID

		IF EXISTS(SELECT 1 FROM @ITEMID_INV_UNITID WHERE ITEMID = @ITEMID AND DELETED = 1)
		BEGIN
			IF (@DEBUG = 1)	PRINT 'Item ID ' + @ITEMID + ' is deleted.'
			GOTO CONTINUEFETCH
		END

		-- Set default values
		SET @FACTOR = 1 
		SET @COUNTED_IN_INVENTORYUNIT = @COUNTED

		-- Get the inventory unit for the item
		SELECT @INVENTORY_UNITID = UNITID FROM @ITEMID_INV_UNITID WHERE ITEMID = @ITEMID						

		IF (@DEBUG = 1)	PRINT 'On hand qty: ' + CAST (@ONHAND_QUANTITY AS NVARCHAR) 

		IF (@DEBUG = 1)	PRINT 'Inventory unit: ' + @INVENTORY_UNITID
		IF (@DEBUG = 1)	PRINT 'Counted unit: ' + @COUNTED_UNITID

		-- Check if the counted amount was done in the inventory unit
		IF (@INVENTORY_UNITID <> @COUNTED_UNITID)
		BEGIN
			IF (@DEBUG = 1)	PRINT 'Convert the counted number ' +  CAST (@COUNTED_IN_INVENTORYUNIT AS NVARCHAR) + ' to a inventory unit'						
		
			SELECT @COUNTED_IN_INVENTORYUNIT = dbo.CONVERTQTYBETWEENUNITS(@ITEMID, @COUNTED, @COUNTED_UNITID, @INVENTORY_UNITID, @UNITCONVERSIONSTABLE)		
			IF (@DEBUG = 1)	PRINT 'Converted counted in inventory unit: ' + CAST (@COUNTED_IN_INVENTORYUNIT AS NVARCHAR) 			
		
		END -- check counted was in inventory unit

		SET @ADJUSTMENT_IN_INVENTORY_UNIT = @COUNTED_IN_INVENTORYUNIT - @ONHAND_QUANTITY

		IF (@DEBUG = 1) PRINT 'Adjustment in inventory unit: ' + CAST(@ADJUSTMENT_IN_INVENTORY_UNIT AS NVARCHAR)

		SET @ADJUSTMENT_IN_COUNTED_UNIT = dbo.CONVERTQTYBETWEENUNITS(@ITEMID, @ADJUSTMENT_IN_INVENTORY_UNIT, @INVENTORY_UNITID, @COUNTED_UNITID, @UNITCONVERSIONSTABLE)
		IF (@DEBUG = 1)	PRINT 'Total counted: ' + CAST(@ADJUSTMENT_IN_COUNTED_UNIT AS NVARCHAR)
		
		UPDATE INVENTJOURNALTRANS
		SET 
			INVENTONHAND = @ONHAND_QUANTITY,
			ADJUSTMENT = @ADJUSTMENT_IN_INVENTORY_UNIT,
			POSTED = 1, 
			POSTEDDATETIME = GETDATE()
		WHERE JOURNALID = @JOURNALID 
		AND DATAAREAID = @DATAAREAID 
		AND LINENUM = @LINENUM
		AND MASTERID = @MASTERID
		
		IF (@DEBUG = 1)	PRINT 'INVENTJOURNALTRANS updated'
		
		INSERT INTO INVENTTRANS (
			POSTINGDATE, ITEMID, STOREID, ADJUSTMENT, [TYPE], OFFERID, COSTPRICEPERITEM, SALESPRICEWITHOUTTAXPERITEM, SALESPRICEWITHTAXPERITEM, 
			REASONCODE, DATAAREAID, DISCOUNTAMOUNTPERITEM, OFFERDISCOUNTAMOUNTPERITEM, [GUID], UNITID, ADJUSTMENTININVENTORYUNIT, REFERENCE, COMPATIBILITY)
		VALUES (
			GETDATE(), @ITEMID, @STOREID, @ADJUSTMENT_IN_COUNTED_UNIT, 8, '', @PURCHASEPRICE, @SALESPRICE, @SALESPRICEWITHTAX,
			@REASONCODE, @DATAAREAID, 0, 0, NEWID(), @COUNTED_UNITID, @ADJUSTMENT_IN_INVENTORY_UNIT, @JOURNALID, '2016.1' 
			)
		
		IF (@DEBUG = 1)	PRINT 'INVENTTRANS updated'

	CONTINUEFETCH:
		FETCH NEXT FROM LINESFORPOSTING INTO @MASTERID, @ITEMID, @LINENUM, @COUNTED, @COUNTED_UNITID, @REASONCODE, @ONHAND_QUANTITY, @SALESPRICEWITHTAX, @SALESPRICE, @PURCHASEPRICE
	END	

	IF (@DEBUG = 1)	PRINT '------------------------ FINISHED'

	CLOSE LINESFORPOSTING
	DEALLOCATE LINESFORPOSTING
	END TRY
	BEGIN CATCH
		SET @POSTINGRESULT = 5
	END CATCH

	-- Set journal processing back to None
	UPDATE INVENTJOURNALTABLE SET PROCESSINGSTATUS = 0 WHERE JOURNALID = @JOURNALID AND DATAAREAID = @DATAAREAID

	IF @POSTINGRESULT = 0 -- Try to post the journal
	BEGIN
		EXEC spINVENTORY_PostAdjustment @JOURNALID, @DATAAREAID, @POSTINGRESULT OUTPUT
	END
END
GO

/****** Object:  StoredProcedure [dbo].[spINVENTORY_UpdateInventoryForTransferOrder]    Script Date: 016/11/2018 15:04:00 ******/
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[spINVENTORY_UpdateInventoryForTransferOrder]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[spINVENTORY_UpdateInventoryForTransferOrder]
GO

/****** Object:  StoredProcedure [dbo].[spINVENTORY_UpdateInventoryForTransferOrder]    Script Date: 016/11/2018 15:04:00 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spINVENTORY_UpdateInventoryForTransferOrder]
	@TRANSFERORDERID NVARCHAR(40),
	@DATAAREAID NVARCHAR(4),
	@ACTIONTYPE INT, -- 0 = Receiving, 1 = Sending, 2 = Reject
	@ADJUSTMENTNEEDED BIT,
	@ADJUSTMENTREASONCODE NVARCHAR(20),
	@ADJUSTMENTJOURNALID NVARCHAR(40),
	@RESULT BIT OUT

AS
	SET @RESULT = 1

	BEGIN TRY
		IF NOT EXISTS (SELECT ID FROM INVENTORYTRANSFERORDER WHERE ID = @TRANSFERORDERID AND DATAAREAID = @DATAAREAID)
		BEGIN
			SET @RESULT = 0
		END

		DECLARE @ITEMID_INV_UNITID TABLE (ITEMID NVARCHAR(30), UNITID NVARCHAR(20), PURCHASEUNITID NVARCHAR(20), PURCHASEPRICE NUMERIC(28,12), DELETED BIT)
		DECLARE @UNITCONVERSIONSTABLE UNITCONVERSIONSTABLETYPE
		DECLARE @STOREID NVARCHAR(40)

		SELECT @STOREID = IIF(@ACTIONTYPE = 0, RECEIVINGSTOREID, SENDINGSTOREID) FROM INVENTORYTRANSFERORDER WHERE ID = @TRANSFERORDERID AND DATAAREAID = @DATAAREAID

		-- Get minimal item info
		INSERT INTO @ITEMID_INV_UNITID SELECT R.ITEMID, INVENTORYUNITID AS UNITID, R.PURCHASEUNITID, R.PURCHASEPRICE, R.DELETED FROM RETAILITEM R
		WHERE R.ITEMID IN (SELECT TOL.ITEMID FROM INVENTORYTRANSFERORDERLINE TOL WHERE TOL.INVENTORYTRANSFERORDERID = @TRANSFERORDERID AND TOL.DATAAREAID = @DATAAREAID AND (@ACTIONTYPE <> 2 OR TOL.SENT = 1))

		-- Get all unit conversions needed
		INSERT INTO @UNITCONVERSIONSTABLE SELECT FROMUNIT, TOUNIT, FACTOR, ITEMID FROM UNITCONVERT WHERE (ITEMID = '' OR ITEMID IN (SELECT ITEMID FROM @ITEMID_INV_UNITID)) AND DATAAREAID = @DATAAREAID

		INSERT INTO INVENTTRANS (
            POSTINGDATE, ITEMID, STOREID, ADJUSTMENT, [TYPE], OFFERID, COSTPRICEPERITEM, SALESPRICEWITHOUTTAXPERITEM, SALESPRICEWITHTAXPERITEM, 
            REASONCODE, DATAAREAID, DISCOUNTAMOUNTPERITEM, OFFERDISCOUNTAMOUNTPERITEM, [GUID], UNITID, ADJUSTMENTININVENTORYUNIT, REFERENCE, COMPATIBILITY)
        SELECT GETDATE(), TOL.ITEMID, @STOREID, IIF(@ACTIONTYPE = 1, -TOL.QUANTITYSENT, TOL.QUANTITYSENT), IIF(@ACTIONTYPE = 1, 7, 6), '', 
			TOL.COSTPRICE, 0, 0, 
			'', @DATAAREAID, 0, 0, NEWID(), TOL.UNITID, 
			IIF(@ACTIONTYPE = 1, IIF(TOL.UNITID != ITM.UNITID, dbo.CONVERTQTYBETWEENUNITS(TOL.ITEMID, -TOL.QUANTITYSENT, TOL.UNITID, ITM.UNITID, @UNITCONVERSIONSTABLE), -TOL.QUANTITYSENT), 
			IIF(TOL.UNITID != ITM.UNITID, dbo.CONVERTQTYBETWEENUNITS(TOL.ITEMID, TOL.QUANTITYSENT, TOL.UNITID, ITM.UNITID, @UNITCONVERSIONSTABLE), TOL.QUANTITYSENT)), 
			@TRANSFERORDERID, '2016.1'
		FROM INVENTORYTRANSFERORDERLINE TOL 
        INNER JOIN @ITEMID_INV_UNITID ITM ON ITM.ITEMID = TOL.ITEMID
        WHERE TOL.INVENTORYTRANSFERORDERID = @TRANSFERORDERID AND TOL.DATAAREAID = @DATAAREAID AND (@ACTIONTYPE <> 2 OR TOL.SENT = 1) AND ITM.DELETED = 0

		-- When receiving item we need to adjustments for items that do not have the same sent and received quantity
		IF @ACTIONTYPE = 0 AND @ADJUSTMENTNEEDED = 1
		BEGIN
			-- Add lines to adjustment journal
			INSERT INTO INVENTJOURNALTRANS 
			(JOURNALID, LINENUM, TRANSDATE, ITEMID, ADJUSTMENT,
			COSTPRICE, PRICEUNIT, COSTMARKUP, COSTAMOUNT, SALESAMOUNT, 
			INVENTONHAND, COUNTED, REASONREFRECID, POSTED, POSTEDDATETIME, 
			DATAAREAID, UNITID, MASTERID, PARENTMASTERID, STAFFID, AREA, LINESTATUS)
			SELECT @ADJUSTMENTJOURNALID, CONCAT(@ADJUSTMENTJOURNALID, '-', ROW_NUMBER() OVER (ORDER BY (SELECT 1))), GETDATE(), TOL.ITEMID, TOL.QUANTITYRECEIVED - TOL.QUANTITYSENT,
				TOL.COSTPRICE, 0, 0, 0, 0, 0, 0, @ADJUSTMENTREASONCODE, 1, GETDATE(), @DATAAREAID, TOL.UNITID, NEWID(), NULL, '', NULL, 0
			FROM  INVENTORYTRANSFERORDERLINE TOL 
			INNER JOIN @ITEMID_INV_UNITID ITM ON ITM.ITEMID = TOL.ITEMID
			WHERE TOL.INVENTORYTRANSFERORDERID = @TRANSFERORDERID AND TOL.DATAAREAID = @DATAAREAID AND ITM.DELETED = 0 AND TOL.QUANTITYSENT != TOL.QUANTITYRECEIVED

			-- Update inventory
			INSERT INTO INVENTTRANS (
				POSTINGDATE, ITEMID, STOREID, ADJUSTMENT, [TYPE], OFFERID, COSTPRICEPERITEM, SALESPRICEWITHOUTTAXPERITEM, SALESPRICEWITHTAXPERITEM, 
				REASONCODE, DATAAREAID, DISCOUNTAMOUNTPERITEM, OFFERDISCOUNTAMOUNTPERITEM, [GUID], UNITID, ADJUSTMENTININVENTORYUNIT, REFERENCE, COMPATIBILITY)
            SELECT GETDATE(), IJT.ITEMID, @STOREID, IJT.ADJUSTMENT, 2, '', 
				IJT.COSTPRICE, 0, 0, 
				@ADJUSTMENTREASONCODE, @DATAAREAID, 0, 0, NEWID(), IJT.UNITID, 
				IIF(IJT.UNITID != ITM.UNITID, dbo.CONVERTQTYBETWEENUNITS(IJT.ITEMID, IJT.ADJUSTMENT, IJT.UNITID, ITM.UNITID, @UNITCONVERSIONSTABLE), IJT.ADJUSTMENT),
				@ADJUSTMENTJOURNALID, '2016.1'
			FROM INVENTJOURNALTRANS IJT
            INNER JOIN @ITEMID_INV_UNITID ITM ON ITM.ITEMID = IJT.ITEMID
            WHERE IJT.JOURNALID = @ADJUSTMENTJOURNALID AND IJT.DATAAREAID = @DATAAREAID

			-- Close adjustment
			UPDATE INVENTJOURNALTABLE SET POSTED = 1, POSTEDDATETIME = GETDATE() WHERE JOURNALID = @ADJUSTMENTJOURNALID AND DATAAREAID = @DATAAREAID
		END
	END TRY
	BEGIN CATCH
		SET @RESULT = 0
	END CATCH
GO

/****** Object:  StoredProcedure [dbo].[spINVENTORY_CalculateReceivingTransferOrderCosts]    Script Date: 08/12/2020 11:00:00 ******/
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[spINVENTORY_CalculateReceivingTransferOrderCosts]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[spINVENTORY_CalculateReceivingTransferOrderCosts]
GO

/****** Object:  StoredProcedure [dbo].[spINVENTORY_CalculateReceivingTransferOrderCosts]    Script Date: 08/12/2020 11:00:00 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spINVENTORY_CalculateReceivingTransferOrderCosts]
	@TRANSFERORDERID NVARCHAR(40),
	@DATAAREAID NVARCHAR(4),
	@USERID UNIQUEIDENTIFIER
AS
DECLARE @STOREID NVARCHAR(40)
SELECT @STOREID = RECEIVINGSTOREID FROM INVENTORYTRANSFERORDER WHERE ID = @TRANSFERORDERID AND DATAAREAID = @DATAAREAID

DECLARE @SENDINGSTOREID NVARCHAR(40)
SELECT @SENDINGSTOREID = SENDINGSTOREID FROM INVENTORYTRANSFERORDER WHERE ID = @TRANSFERORDERID AND DATAAREAID = @DATAAREAID

DECLARE @COSTCALCULATION INT
SELECT @COSTCALCULATION = CAST([Value] AS INT) FROM SYSTEMSETTINGS WHERE [GUID] = '2BAB2653-C366-480E-8DC2-99107BC03D5F'

IF(@COSTCALCULATION <> 2) -- Not manual
BEGIN

	DECLARE @ITEMID_INV_UNITID TABLE (ITEMID NVARCHAR(30), UNITID NVARCHAR(20), PURCHASEUNITID NVARCHAR(20), PURCHASEPRICE NUMERIC(28,12), DELETED BIT)

	-- Get minimal item info
	INSERT INTO @ITEMID_INV_UNITID SELECT R.ITEMID, INVENTORYUNITID AS UNITID, R.PURCHASEUNITID, R.PURCHASEPRICE, R.DELETED FROM RETAILITEM R
	WHERE R.ITEMID IN (SELECT TOL.ITEMID FROM INVENTORYTRANSFERORDERLINE TOL WHERE TOL.INVENTORYTRANSFERORDERID = @TRANSFERORDERID AND TOL.DATAAREAID = @DATAAREAID AND TOL.SENT = 1)

	IF(@COSTCALCULATION = 0) -- Last purchase price
	BEGIN
		INSERT INTO RETAILITEMCOST (ID, ITEMID, STOREID, COST, UNITID, ENTRYDATE, REASON, USERID)
		SELECT NEWID(), ITR.ITEMID, @STOREID, ITR.COSTPRICE, R.UNITID, GETDATE(), 'Transfer order / ID: ' + @TRANSFERORDERID, @USERID FROM INVENTORYTRANSFERORDERLINE ITR
		INNER JOIN @ITEMID_INV_UNITID R ON R.ITEMID = ITR.ITEMID
		INNER JOIN RBOSTORETABLE RBOS ON RBOS.STOREID = @SENDINGSTOREID
		WHERE ITR.SENT = 1 AND ITR.INVENTORYTRANSFERORDERID = @TRANSFERORDERID AND ITR.DATAAREAID = @DATAAREAID
	END
	ELSE
	BEGIN -- 1 - Weighted average

		DECLARE @UNITCONVERSIONSTABLE UNITCONVERSIONSTABLETYPE

		-- Get all unit conversions needed
		INSERT INTO @UNITCONVERSIONSTABLE SELECT FROMUNIT, TOUNIT, FACTOR, ITEMID FROM UNITCONVERT WHERE (ITEMID = '' OR ITEMID IN (SELECT ITEMID FROM @ITEMID_INV_UNITID)) AND DATAAREAID = @DATAAREAID

		;WITH ItemToCalculate AS
		(
			SELECT 
			ITR.ITEMID, 
			IIF(ISNULL(V.QUANTITY, 0) < 0, 0, ISNULL(V.QUANTITY, 0)) AS AVAILABLEQUANTITY, 
			dbo.CONVERTQTYBETWEENUNITS(ITR.ITEMID, ITR.QUANTITYRECEIVED, ITR.UNITID, R.UNITID, @UNITCONVERSIONSTABLE) AS QUANTITYRECEIVED, 
			ISNULL(C.COST, R.PURCHASEPRICE) AS LASTPURCHASEPRICE,
			ITR.COSTPRICE AS RECEIVINGCOST,
			R.UNITID,
			RBOS.NAME AS SENDINGSTORENAME,
			@USERID as USERID,
			@TRANSFERORDERID as TRANSFERORDERID
			FROM INVENTORYTRANSFERORDERLINE ITR
			INNER JOIN @ITEMID_INV_UNITID R ON R.ITEMID = ITR.ITEMID
			INNER JOIN RBOSTORETABLE RBOS ON RBOS.STOREID = @SENDINGSTOREID
			LEFT JOIN VINVENTSUM V ON V.ITEMID = ITR.ITEMID AND V.STOREID = @STOREID
			OUTER APPLY (SELECT TOP 1 COST FROM RETAILITEMCOST C WHERE C.STOREID = @STOREID AND C.ITEMID = ITR.ITEMID ORDER BY ENTRYDATE DESC) C
			WHERE ITR.SENT = 1 AND ITR.INVENTORYTRANSFERORDERID = @TRANSFERORDERID AND ITR.DATAAREAID = @DATAAREAID
		)
		INSERT INTO RETAILITEMCOST (ID, ITEMID, STOREID, COST, UNITID, ENTRYDATE, REASON, USERID)
		SELECT NEWID(), ITEMID, @STOREID, ((LASTPURCHASEPRICE * AVAILABLEQUANTITY) + (RECEIVINGCOST * QUANTITYRECEIVED)) / (AVAILABLEQUANTITY + QUANTITYRECEIVED), UNITID, GETDATE(), 'Transfer order / ID: ' + TRANSFERORDERID, USERID FROM ItemToCalculate

	END
END
GO

/****** Object:  StoredProcedure [dbo].[spINVENTORY_CreateStoreTransferLinesFromFilter]    Script Date: 21/11/2018 14:26:00 ******/
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[spINVENTORY_CreateStoreTransferLinesFromFilter]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[spINVENTORY_CreateStoreTransferLinesFromFilter]
GO

/****** Object:  StoredProcedure [dbo].[spINVENTORY_CreateStoreTransferLinesFromFilter]    Script Date: 21/11/2018 14:26:00 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spINVENTORY_CreateStoreTransferLinesFromFilter] 
@STOREID NVARCHAR(20),
@TRANSFERID NVARCHAR(20),
@RETAILGROUPS VARCHAR(MAX),
@RETAILDEPARTMENTS VARCHAR(MAX),
@VENDORS VARCHAR(MAX),
@SPECIALGROUPS VARCHAR(MAX),
@FILTERDELIMITER VARCHAR(MAX),
@DATAAREAID NVARCHAR(10),
@TRANSFERTYPE INT, -- 0 = Order, 1 = Request
@INSERTEDRECORDS INT OUTPUT
AS

DECLARE @VENDORSTABLE TABLE (ID NVARCHAR(20));
INSERT INTO @VENDORSTABLE SELECT Value FROM dbo.SplitList(@VENDORS, @FILTERDELIMITER);

IF OBJECT_ID('tempdb..#TRANSFERITEMLIST', 'U') IS NOT NULL
	DROP TABLE #TRANSFERITEMLIST;

CREATE TABLE #TRANSFERITEMLIST (ITEMID NVARCHAR(40) COLLATE database_default);

INSERT INTO 
	#TRANSFERITEMLIST 
EXECUTE 
	spINVENTORY_GetItemsFromInventoryFilter 
		@STOREID,
		@RETAILGROUPS,
		@RETAILDEPARTMENTS,
		@SPECIALGROUPS,
		@FILTERDELIMITER;

IF @TRANSFERTYPE = 0 
BEGIN
	WITH TO_ITEMLINES (ITEMID, UNITID) AS
	(
		SELECT DISTINCT 
			R.ITEMID,
			R.INVENTORYUNITID
		FROM RETAILITEM R
		JOIN #TRANSFERITEMLIST t on t.ITEMID = R.ITEMID
		LEFT OUTER JOIN VENDORITEMS VI ON VI.RETAILITEMID = R.ITEMID AND VI.VENDORID IN (
			CASE WHEN @VENDORS = '' THEN '' ELSE (SELECT ID FROM @VENDORSTABLE) END)
		LEFT OUTER JOIN VENDTABLE VT ON VT.ACCOUNTNUM = VI.VENDORID
		WHERE @VENDORS = '' OR VT.ACCOUNTNUM IN (SELECT ID FROM @VENDORSTABLE)
	)
	INSERT INTO INVENTORYTRANSFERORDERLINE (ID, INVENTORYTRANSFERORDERID, ITEMID, UNITID, QUANTITYSENT, QUANTITYRECEIVED, SENT, DATAAREAID)
	SELECT NEWID(), @TRANSFERID, I.ITEMID, I.UNITID, 1, 0, 0, @DATAAREAID FROM TO_ITEMLINES I
END
ELSE
BEGIN
	WITH TO_ITEMLINES (ITEMID, UNITID) AS
	(
		SELECT DISTINCT 
			R.ITEMID,
			R.INVENTORYUNITID
		FROM RETAILITEM R
		JOIN #TRANSFERITEMLIST t on t.ITEMID = R.ITEMID
		LEFT OUTER JOIN VENDORITEMS VI ON VI.RETAILITEMID = R.ITEMID AND VI.VENDORID IN (
			CASE WHEN @VENDORS = '' THEN '' ELSE (SELECT ID FROM @VENDORSTABLE) END)
		LEFT OUTER JOIN VENDTABLE VT ON VT.ACCOUNTNUM = VI.VENDORID
		WHERE @VENDORS = '' OR VT.ACCOUNTNUM IN (SELECT ID FROM @VENDORSTABLE)
	)
	INSERT INTO INVENTORYTRANSFERREQUESTLINE(ID, INVENTORYTRANSFERREQUESTID, ITEMID, UNITID, QUANTITYREQUESTED, SENT, DATAAREAID)
	SELECT NEWID(), @TRANSFERID, I.ITEMID, I.UNITID, 1, 0, @DATAAREAID FROM TO_ITEMLINES I
END

SET @INSERTEDRECORDS = @@ROWCOUNT

DROP TABLE #TRANSFERITEMLIST;
GO

/****** Object:  StoredProcedure [dbo].[spINVENTORY_CreatePurchaseOrderLinesFromFilter]    Script Date: 03/07/2019 11:02:00 ******/
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[spINVENTORY_CreatePurchaseOrderLinesFromFilter]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[spINVENTORY_CreatePurchaseOrderLinesFromFilter]
GO

/****** Object:  StoredProcedure [dbo].[spINVENTORY_CreatePurchaseOrderLinesFromFilter]    Script Date: 03/07/2019 11:02:00 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spINVENTORY_CreatePurchaseOrderLinesFromFilter] 
@PURCHASEORDERID NVARCHAR(20),
@RETAILGROUPS VARCHAR(MAX),
@RETAILDEPARTMENTS VARCHAR(MAX),
@VENDORS VARCHAR(MAX),
@SPECIALGROUPS VARCHAR(MAX),
@FILTERDELIMITER VARCHAR(MAX),
@DATAAREAID NVARCHAR(10),
@INSERTEDRECORDS INT OUTPUT
AS

DECLARE @VENDORSTABLE TABLE (ID NVARCHAR(20));
DECLARE @STOREID NVARCHAR(20);
DECLARE @VENDORID NVARCHAR(20);
DECLARE @DISCOUNTAMOUNT DECIMAL(24, 6);
DECLARE @DISCOUNTPERCENTAGE DECIMAL (24, 6);
DECLARE @TAXCALCULATIONMETHOD INT;

SELECT @STOREID = P.STOREID, 
	   @VENDORID = P.VENDORID,
	   @DISCOUNTAMOUNT = P.DEFAULTDISCOUNTAMOUNT, 
	   @DISCOUNTPERCENTAGE = P.DEFAULTDISCOUNTPERCENTAGE, 
	   @TAXCALCULATIONMETHOD = ISNULL(V.TAXCALCULATIONMETHOD, 0)
FROM PURCHASEORDERS P
LEFT JOIN VENDTABLE V ON V.ACCOUNTNUM = P.VENDORID
WHERE P.PURCHASEORDERID = @PURCHASEORDERID;

INSERT INTO @VENDORSTABLE SELECT Value FROM dbo.SplitList(@VENDORS, @FILTERDELIMITER);

IF OBJECT_ID('tempdb..#ITEMLIST', 'U') IS NOT NULL
	DROP TABLE #ITEMLIST;

CREATE TABLE #ITEMLIST (ITEMID NVARCHAR(40) COLLATE database_default);

INSERT INTO 
	#ITEMLIST 
EXECUTE 
	spINVENTORY_GetItemsFromInventoryFilter 
		@STOREID,
		@RETAILGROUPS,
		@RETAILDEPARTMENTS,
		@SPECIALGROUPS,
		@FILTERDELIMITER;

WITH PO_ITEMLINES (ITEMID, UNITID, VENDORITEMID, PRICE, QUANTITY) AS (
	SELECT DISTINCT 
		R.ITEMID, 
		R.INVENTORYUNITID, 
		ISNULL(VNI.VENDORITEMID, ''), 
		ISNULL(VNI.DEFAULTPURCHASEPRICE, 0),
		IIF(IRS.ITEMID IS NOT NULL, IIF(IRS.MAXIMUMINVENTORY - ISNULL(INV.QUANTITY, 0) > 0, IRS.MAXIMUMINVENTORY - ISNULL(INV.QUANTITY, 0), 0), 0)
	FROM #ITEMLIST ITEMS
    JOIN RETAILITEM R ON R.ITEMID = ITEMS.ITEMID

	LEFT OUTER JOIN VENDORITEMS VI ON VI.RETAILITEMID = R.ITEMID AND VI.VENDORID IN (
        CASE WHEN @VENDORS = '' THEN '' ELSE (SELECT ID FROM @VENDORSTABLE) END
    )
	LEFT OUTER JOIN VENDTABLE VT ON VT.ACCOUNTNUM = VI.VENDORID
	LEFT OUTER JOIN ITEMREPLENISHMENTSETTING IRS ON IRS.ITEMID = R.ITEMID
	LEFT OUTER JOIN VENDORITEMS VNI ON VNI.RETAILITEMID = R.ITEMID AND VNI.UNITID = R.INVENTORYUNITID AND VNI.VENDORID = @VENDORID
	CROSS JOIN RBOSTORETABLE RST
	LEFT OUTER JOIN VINVENTSUM INV ON INV.ITEMID = R.ITEMID AND INV.STOREID = RST.STOREID

    WHERE RST.STOREID = @STOREID
	AND (@VENDORS = '' OR VT.ACCOUNTNUM IN (SELECT ID FROM @VENDORSTABLE))
)
INSERT INTO PURCHASEORDERLINE (
	PURCHASEORDERID, LINENUMBER, RETAILITEMID, VENDORITEMID, UNITID, QUANTITY, PRICE, 
	DATAAREAID, DISCOUNTAMOUNT, DISCOUNTPERCENTAGE, TAXAMOUNT, TAXCALCULATIONMETHOD
)
SELECT 
	@PURCHASEORDERID, CONCAT(@PURCHASEORDERID, '-F', FORMAT(ROW_NUMBER() OVER (ORDER BY (SELECT NULL)), '0000000000')), 
	I.ITEMID, I.VENDORITEMID, I.UNITID, I.QUANTITY, I.PRICE, 
	@DATAAREAID, @DISCOUNTAMOUNT, @DISCOUNTPERCENTAGE, 0, @TAXCALCULATIONMETHOD 
FROM 
	PO_ITEMLINES I

DROP TABLE #ITEMLIST;

SET @INSERTEDRECORDS = @@ROWCOUNT
GO

/****** Object:  StoredProcedure [dbo].[spINVENTORY_ImportOmniJournalLinesFromXML]    Script Date: 08/07/2019 11:22:00 ******/
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[spINVENTORY_ImportOmniJournalLinesFromXML]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[spINVENTORY_ImportOmniJournalLinesFromXML]
GO

/****** Object:  StoredProcedure [dbo].[spINVENTORY_ImportOmniJournalLinesFromXML]    Script Date: 08/07/2019 11:22:00 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spINVENTORY_ImportOmniJournalLinesFromXML] 
@OMNIJOURNALID NVARCHAR(20),
@DATAAREAID NVARCHAR(10),
@INSERTEDRECORDS INT OUTPUT
AS

/****

	Based on an Omni journal ID from the OMNIJOURNALTABLE, this stored procedure does the following:

	Find an existing document header based on the JOURNALTYPE, TEMPLATEID, which was created from OMNI and which was not posted and is not processing
	Lock the document by setting a processing status
	Import all lines from the XML attached to the OMNIJOURNALTABLE
	Unlock the documents by reverting the processing status
	Mark the Omni journal as Done.

	Notes:
		Purchase orders calculates default price based on the vendor of the document. Tax is calculated in code after this SP
		Stock counting calculates adjustments based on inventory on hand
		Transfer orders has no additional logic
****/

DECLARE @JOURNALTYPE INT, @TEMPLATEID NVARCHAR(20), @STAFFID NVARCHAR(20), @STATUS INT, @PROCESSING BIT
DECLARE @DOCUMENTID NVARCHAR(20), @DOCUMENTPROCESSED BIT
DECLARE @TRANSACTIONID NVARCHAR(20)
SET @INSERTEDRECORDS = 0

BEGIN TRY
	SELECT @JOURNALTYPE = JOURNALTYPE, @TEMPLATEID = TEMPLATEID, @STAFFID = STAFFID, @STATUS = [STATUS], @TRANSACTIONID = TRANSACTIONID FROM OMNIJOURNAL WHERE JOURNALID = @OMNIJOURNALID
	
	IF(@JOURNALTYPE IS NOT NULL AND @STATUS = 0)
	BEGIN
		UPDATE OMNIJOURNAL SET [STATUS] = 1 WHERE JOURNALID = @OMNIJOURNALID
	
		SET @DOCUMENTPROCESSED = 0

		IF(@JOURNALTYPE = 0) -- Purchase order
		BEGIN
			SELECT @DOCUMENTID = PURCHASEORDERID FROM PURCHASEORDERS WHERE CREATEDFROMOMNI = 1 AND TEMPLATEID = @TEMPLATEID AND PURCHASESTATUS = 0 AND DATAAREAID = @DATAAREAID AND PROCESSINGSTATUS = 0
			UPDATE PURCHASEORDERS SET PROCESSINGSTATUS = 3 WHERE DATAAREAID = @DATAAREAID AND PURCHASEORDERID = @DOCUMENTID
		END
		ELSE IF(@JOURNALTYPE = 4) -- Transfer order
		BEGIN
			SELECT @DOCUMENTID = ID FROM INVENTORYTRANSFERORDER WHERE CREATEDFROMOMNI = 1 AND TEMPLATEID = @TEMPLATEID AND [SENT] = 0 AND DATAAREAID = @DATAAREAID AND PROCESSINGSTATUS = 0
			UPDATE INVENTORYTRANSFERORDER SET PROCESSINGSTATUS = 3 WHERE DATAAREAID = @DATAAREAID AND ID = @DOCUMENTID
		END
		ELSE IF(@JOURNALTYPE = 5) -- Stock counting
		BEGIN
			SELECT @DOCUMENTID = JOURNALID FROM INVENTJOURNALTABLE WHERE CREATEDFROMOMNI = 1 AND TEMPLATEID = @TEMPLATEID AND POSTED = 0 AND DATAAREAID = @DATAAREAID AND JOURNALTYPE = 4 AND PROCESSINGSTATUS = 0
			UPDATE INVENTJOURNALTABLE SET PROCESSINGSTATUS = 3 WHERE DATAAREAID = @DATAAREAID AND JOURNALID = @DOCUMENTID
		END

		IF(@DOCUMENTID IS NOT NULL)
		BEGIN
			DECLARE @docHandle INT, @XMLDATA XML;
			SELECT @XMLDATA = XMLDATA FROM OMNIJOURNAL WHERE JOURNALID = @OMNIJOURNALID
			EXEC sp_xml_preparedocument @docHandle OUTPUT, @XMLDATA
		
			DECLARE @LINES TABLE(ITEMID NVARCHAR(30), UNITID NVARCHAR(20), LINENUMBER NVARCHAR(20), QUANTITY DECIMAL(24, 6), AREAID UNIQUEIDENTIFIER, OMNITRANSACTIONID NVARCHAR(20), OMNILINEID NVARCHAR(38))
		
			INSERT INTO @LINES (ITEMID, UNITID, LINENUMBER, QUANTITY, AREAID, OMNITRANSACTIONID, OMNILINEID)
			SELECT ITEMID, UNITID, LINENUMBER, QUANTITY, AREAID, @TRANSACTIONID, OMNILINEID
			FROM OPENXML(@docHandle, 'DOCUMENT/DOCUMENTLINE')
			WITH 
			(
				ITEMID [varchar](30) 'ITEMID',
				UNITID [varchar](20) 'UNITID',
				LINENUMBER [int] 'LINENUMBER',
				QUANTITY [decimal](24,6) 'QUANTITY',
				AREAID [uniqueidentifier] 'AREAID',
				OMNILINEID [varchar] (38) 'OMNILINEID'
			)
		
			EXEC sp_xml_removedocument @docHandle
			
			DECLARE @LASTLINENUMBER NVARCHAR(20)
			DECLARE @LASTLINENUMBERINDEX INT = 0

			IF(@JOURNALTYPE = 0) -- Purchase order
			BEGIN
				
				SELECT TOP 1 @LASTLINENUMBER = LINENUMBER FROM PURCHASEORDERLINE WHERE PURCHASEORDERID = @DOCUMENTID AND LINENUMBER LIKE 'OMNI[-][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]' ORDER BY LINENUMBER DESC
				
				IF(@LASTLINENUMBER IS NOT NULL)
				BEGIN
					SET @LASTLINENUMBERINDEX = CONVERT(INT, SUBSTRING(@LASTLINENUMBER, 6, 10))
				END
				
				INSERT INTO PURCHASEORDERLINE 
					(PURCHASEORDERID, LINENUMBER, RETAILITEMID, VENDORITEMID, UNITID, 
					QUANTITY, PRICE, DATAAREAID, DISCOUNTAMOUNT, DISCOUNTPERCENTAGE, 
					TAXAMOUNT, TAXCALCULATIONMETHOD, OMNITRANSACTIONID, OMNILINEID)
				SELECT PO.PURCHASEORDERID, CONCAT('OMNI-', FORMAT(@LASTLINENUMBERINDEX + L.LINENUMBER, '0000000000')), 
				L.ITEMID, ISNULL(VI.VENDORITEMID, ''), 
				L.UNITID, L.QUANTITY,
				ISNULL(VI.DEFAULTPURCHASEPRICE, 0), @DATAAREAID, 
				PO.DEFAULTDISCOUNTAMOUNT, PO.DEFAULTDISCOUNTPERCENTAGE, 0, ISNULL(V.TAXCALCULATIONMETHOD, 0),
				OMNITRANSACTIONID, OMNILINEID
				FROM @LINES L
				INNER JOIN PURCHASEORDERS PO ON PO.PURCHASEORDERID = @DOCUMENTID
				INNER JOIN RETAILITEM R ON R.ITEMID = L.ITEMID
				INNER JOIN RBOSTORETABLE RST ON RST.STOREID = PO.STOREID
				LEFT OUTER JOIN VENDTABLE V ON V.ACCOUNTNUM = PO.VENDORID
				LEFT OUTER JOIN VENDORITEMS VI ON VI.RETAILITEMID = R.ITEMID AND VI.UNITID = R.INVENTORYUNITID AND VI.VENDORID = PO.VENDORID
				WHERE R.ITEMTYPE <> 3 AND R.ITEMTYPE <> 2 AND R.DELETED = 0 AND PO.DATAAREAID = @DATAAREAID

				SET @INSERTEDRECORDS = @@ROWCOUNT;
				
				UPDATE PURCHASEORDERS SET PROCESSINGSTATUS = 0 WHERE PURCHASEORDERID = @DOCUMENTID AND DATAAREAID = @DATAAREAID
				SET @DOCUMENTPROCESSED = 1
			END
			ELSE IF(@JOURNALTYPE = 4) -- Transfer order
			BEGIN
				INSERT INTO INVENTORYTRANSFERORDERLINE (ID, INVENTORYTRANSFERORDERID, ITEMID, UNITID, QUANTITYSENT, QUANTITYRECEIVED, SENT, DATAAREAID, OMNITRANSACTIONID, OMNILINEID)
				SELECT NEWID(), @DOCUMENTID, L.ITEMID, L.UNITID, L.QUANTITY, 0, 0, @DATAAREAID, OMNITRANSACTIONID, OMNILINEID  FROM @LINES L

				SET @INSERTEDRECORDS = @@ROWCOUNT;
				
				UPDATE INVENTORYTRANSFERORDER SET PROCESSINGSTATUS = 0 WHERE ID = @DOCUMENTID AND DATAAREAID = @DATAAREAID
				SET @DOCUMENTPROCESSED = 1
			END
			ELSE IF(@JOURNALTYPE = 5) -- Stock counting
			BEGIN
			
				SELECT TOP 1 @LASTLINENUMBER = LINENUM FROM INVENTJOURNALTRANS WHERE JOURNALID = @DOCUMENTID AND LINENUM LIKE 'OMNI[-][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]' ORDER BY LINENUM DESC
				
				IF(@LASTLINENUMBER IS NOT NULL)
				BEGIN
					SET @LASTLINENUMBERINDEX = CONVERT(INT, SUBSTRING(@LASTLINENUMBER, 6, 10))
				END
				
				INSERT INTO INVENTJOURNALTRANS 
					(JOURNALID, LINENUM, TRANSDATE, ITEMID, ADJUSTMENT,
					COSTPRICE, PRICEUNIT, COSTMARKUP, COSTAMOUNT, SALESAMOUNT, 
					INVENTONHAND, COUNTED, REASONREFRECID, POSTED, POSTEDDATETIME, 
					DATAAREAID, UNITID, MASTERID, PARENTMASTERID, STAFFID, AREA, LINESTATUS, 
					OMNITRANSACTIONID, OMNILINEID)
				SELECT IJT.JOURNALID, CONCAT('OMNI-', FORMAT(@LASTLINENUMBERINDEX + L.LINENUMBER, '0000000000')), GETDATE(), R.ITEMID, L.QUANTITY - ISNULL(INV.QUANTITY, 0),
						0, 0, 0, 0, 0,
						ISNULL(INV.QUANTITY, 0), L.QUANTITY, '', 0, GETDATE(),
						@DATAAREAID, L.UNITID, NEWID(), NULL, @STAFFID, L.AREAID, 0,
						OMNITRANSACTIONID, OMNILINEID
				FROM @LINES L
				INNER JOIN INVENTJOURNALTABLE IJT ON IJT.JOURNALID = @DOCUMENTID
				INNER JOIN RETAILITEM R ON R.ITEMID = L.ITEMID
				INNER JOIN RBOSTORETABLE RST ON RST.STOREID = IJT.STOREID
				LEFT OUTER JOIN VINVENTSUM INV ON INV.ITEMID = R.ITEMID AND INV.STOREID = RST.STOREID
				WHERE R.ITEMTYPE <> 3 AND R.ITEMTYPE <> 2 AND R.DELETED = 0 AND IJT.DATAAREAID = @DATAAREAID

				SET @INSERTEDRECORDS = @@ROWCOUNT;
				
				UPDATE INVENTJOURNALTABLE SET PROCESSINGSTATUS = 0 WHERE JOURNALID = @DOCUMENTID AND DATAAREAID = @DATAAREAID  
				SET @DOCUMENTPROCESSED = 1
			END
		END
	END

	UPDATE OMNIJOURNAL SET [STATUS] = CASE WHEN @DOCUMENTPROCESSED = 1 THEN 2 ELSE 0 END WHERE JOURNALID = @OMNIJOURNALID
END TRY
BEGIN CATCH
	UPDATE OMNIJOURNAL SET [STATUS] = 0 WHERE JOURNALID = @OMNIJOURNALID

	IF(@DOCUMENTID IS NOT NULL)
	BEGIN
		IF(@JOURNALTYPE = 0) -- Purchase order
		BEGIN
			UPDATE PURCHASEORDERS SET PROCESSINGSTATUS = 0 WHERE DATAAREAID = @DATAAREAID AND PURCHASEORDERID = @DOCUMENTID
		END
		ELSE IF(@JOURNALTYPE = 4) -- Transfer order
		BEGIN
			UPDATE INVENTORYTRANSFERORDER SET PROCESSINGSTATUS = 0 WHERE DATAAREAID = @DATAAREAID AND ID = @DOCUMENTID
		END
		ELSE IF(@JOURNALTYPE = 5) -- Stock counting
		BEGIN
			UPDATE INVENTJOURNALTABLE SET PROCESSINGSTATUS = 0 WHERE DATAAREAID = @DATAAREAID AND JOURNALID = @DOCUMENTID
		END
	END
END CATCH
GO

/****** Object:  StoredProcedure [dbo].[spINVENTORY_PostAllGoodsReceivingLines]    Script Date: 16/07/2019 11:10:00 ******/
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[spINVENTORY_PostAllGoodsReceivingLines]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[spINVENTORY_PostAllGoodsReceivingLines]
GO

/****** Object:  StoredProcedure [dbo].[spINVENTORY_PostAllGoodsReceivingLines]    Script Date: 16/07/2019 11:10:00 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spINVENTORY_PostAllGoodsReceivingLines]
	@GOODSRECEIVINGID NVARCHAR(40),
	@DATAAREAID NVARCHAR(4),
	@POSTINGRESULT INT OUT,
	@USERID UNIQUEIDENTIFIER
AS

DECLARE @DEBUG INT
SET @DEBUG = 0

/*

@POSTINGRESULT VALUES:
0 = Successful posting
1 = Missing unit conversion
2 = Invalid receiving quantity
3 = Not found
4 = No lines to post
5 = Already processing
6 = Already posted
7 = Error

*/

SET @POSTINGRESULT = 0 -- DEFAULT VALUE SET

DECLARE @PURCHASEORDERID NVARCHAR(40), @STATUS INT, @PROCESSING INT, @STOREID NVARCHAR(40)

SELECT @PURCHASEORDERID = P.PURCHASEORDERID, @STATUS = G.STATUS, @PROCESSING = P.PROCESSINGSTATUS, @STOREID = P.STOREID FROM GOODSRECEIVING G
INNER JOIN PURCHASEORDERS P ON G.PURCHASEORDERID = P.PURCHASEORDERID
WHERE GOODSRECEIVINGID = @GOODSRECEIVINGID AND G.DATAAREAID = @DATAAREAID

IF @PURCHASEORDERID IS NULL
BEGIN
	SET @POSTINGRESULT = 3
	IF (@DEBUG = 1)	PRINT 'Purchase order not found'
END

IF @POSTINGRESULT = 0 AND @STATUS = 1
BEGIN
	SET @POSTINGRESULT = 6
	IF (@DEBUG = 1)	PRINT 'Purchase order was already posted'
END

IF @POSTINGRESULT = 0 AND @PROCESSING > 0
BEGIN
	SET @POSTINGRESULT = 5
	IF (@DEBUG = 1)	PRINT 'Purchase order is already processing'
END

IF @POSTINGRESULT = 0 AND NOT EXISTS(SELECT 1 FROM GOODSRECEIVINGLINE WHERE GOODSRECEIVINGID = @GOODSRECEIVINGID AND POSTED = 0 AND DATAAREAID = @DATAAREAID)
BEGIN
	SET @POSTINGRESULT = 4
	IF (@DEBUG = 1)	PRINT 'Purchase order has no lines to post'
END

IF (@POSTINGRESULT = 0)
BEGIN
	IF (@DEBUG = 1)	PRINT 'Start the posting'

	BEGIN TRY

	-- Set processing status to Posting
	UPDATE PURCHASEORDERS SET PROCESSINGSTATUS = 2 WHERE PURCHASEORDERID = @PURCHASEORDERID AND DATAAREAID = @DATAAREAID

	DECLARE @ITEMID_INV_UNITID TABLE (ITEMID NVARCHAR(30), UNITID NVARCHAR(20), DELETED BIT, PURCHASEPRICE DECIMAL(24,12))
	DECLARE @UNITCONVERSIONSTABLE UNITCONVERSIONSTABLETYPE
	DECLARE @MAXOVERRECEIVE INT
	SELECT @MAXOVERRECEIVE = CAST([Value] AS INT) FROM SYSTEMSETTINGS WHERE [GUID] = '2880A888-7EB6-49B3-AC1C-1024DE0F9EE4'
	DECLARE @COSTCALCULATION INT -- 0 = Last purchase, 1 = Weighted average, 2 = Manual
	SELECT @COSTCALCULATION = CAST([Value] AS INT) FROM SYSTEMSETTINGS WHERE [GUID] = '2BAB2653-C366-480E-8DC2-99107BC03D5F'
	
	-- Create a temporary table with item ID's, inventory ID's and the deletion status of the items
	INSERT INTO @ITEMID_INV_UNITID SELECT R.ITEMID, INVENTORYUNITID AS UNITID, R.DELETED, R.PURCHASEPRICE FROM RETAILITEM R
	WHERE R.ITEMID IN (SELECT PL.RETAILITEMID FROM GOODSRECEIVINGLINE GL 
					   INNER JOIN PURCHASEORDERLINE PL ON PL.LINENUMBER = GL.PURCHASEORDERLINENUMBER
					   WHERE PL.PURCHASEORDERID = @PURCHASEORDERID AND GL.DATAAREAID = @DATAAREAID AND GL.POSTED = 0)

	-- Get all unit conversions needed
	INSERT INTO @UNITCONVERSIONSTABLE SELECT FROMUNIT, TOUNIT, FACTOR, ITEMID FROM UNITCONVERT WHERE (ITEMID = '' OR ITEMID IN (SELECT ITEMID FROM @ITEMID_INV_UNITID)) AND DATAAREAID = @DATAAREAID

	DECLARE @POLINENUMBER NVARCHAR(40)
	DECLARE @GLLINENUMBER NVARCHAR(40)
	DECLARE @ITEMID NVARCHAR(40)
	DECLARE @UNITID NVARCHAR(40)
	DECLARE @ORDEREDQUANTITY DECIMAL(24, 6)
	DECLARE @RECEIVEDQUANTITY DECIMAL(24, 6)
	DECLARE @AVAILABLEQUANTITY DECIMAL(24, 6)
	DECLARE @UNITPRICE DECIMAL(24, 6)
	DECLARE @LASTPRICE DECIMAL(24, 6)
	DECLARE @INVENTORY_UNITID NVARCHAR(40)
	DECLARE @RECEIVED_IN_INVENTORYUNIT NUMERIC(24, 6)

	DECLARE @TAXCALCULATIONMETHOD INT -- 0 = No tax, 1 = Add tax, 2 = Include tax
	DECLARE @DISCOUNTAMOUNT DECIMAL(24, 6)
	DECLARE @DISCOUNTPERCENTAGE DECIMAL(24, 6)
	DECLARE @TAXAMOUNT DECIMAL(24, 6)

	DECLARE LINESFORPOSTING CURSOR FOR
	SELECT PURCHASEORDERLINENUMBER, PL.RETAILITEMID, GL.LINENUMBER, PL.QUANTITY, PL.UNITID, GL.RECEIVEDQUANTITY, PL.PRICE, C.COST AS LASTCOST, ISNULL(VI.QUANTITY, 0) AS AVAILABLEQUANTITY, PL.TAXCALCULATIONMETHOD, PL.DISCOUNTAMOUNT, PL.DISCOUNTPERCENTAGE, PL.TAXAMOUNT
	FROM GOODSRECEIVINGLINE GL 
    INNER JOIN PURCHASEORDERLINE PL ON PL.LINENUMBER = GL.PURCHASEORDERLINENUMBER
    LEFT JOIN VINVENTSUM VI ON VI.ITEMID = PL.RETAILITEMID AND VI.STOREID = @STOREID
	OUTER APPLY (SELECT TOP 1 COST FROM RETAILITEMCOST WHERE ITEMID = PL.RETAILITEMID AND STOREID = @STOREID ORDER BY ENTRYDATE DESC) C
    WHERE PL.PURCHASEORDERID = @PURCHASEORDERID AND GL.GOODSRECEIVINGID = @GOODSRECEIVINGID AND GL.DATAAREAID = @DATAAREAID AND GL.POSTED = 0	
	OPEN LINESFORPOSTING

	FETCH FROM LINESFORPOSTING INTO @POLINENUMBER, @ITEMID, @GLLINENUMBER, @ORDEREDQUANTITY, @UNITID, @RECEIVEDQUANTITY, @UNITPRICE, @LASTPRICE, @AVAILABLEQUANTITY, @TAXCALCULATIONMETHOD, @DISCOUNTAMOUNT, @DISCOUNTPERCENTAGE, @TAXAMOUNT

	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF (@DEBUG = 1)	PRINT 'Item ID: ' + @ITEMID

		IF @RECEIVEDQUANTITY = 0 OR (SELECT CASE WHEN SUM(GL.RECEIVEDQUANTITY) - SUM(PL.QUANTITY) > @MAXOVERRECEIVE THEN 1 ELSE 0 END FROM PURCHASEORDERLINE PL 
											INNER JOIN GOODSRECEIVINGLINE GL ON GL.PURCHASEORDERLINENUMBER = PL.LINENUMBER
											WHERE RETAILITEMID = @ITEMID AND UNITID = @UNITID AND PURCHASEORDERID = @PURCHASEORDERID AND GL.GOODSRECEIVINGID = @GOODSRECEIVINGID AND GL.DATAAREAID = @DATAAREAID) = 1
		BEGIN
			IF @POSTINGRESULT < 2
			BEGIN
				SET @POSTINGRESULT = 2
			END
			IF (@DEBUG = 1)	PRINT 'Item ID ' + @ITEMID + ' has invalid receiving quantity.'
			GOTO CONTINUEFETCH
		END

		IF EXISTS(SELECT 1 FROM @ITEMID_INV_UNITID WHERE ITEMID = @ITEMID AND DELETED = 1)
		BEGIN
			IF (@DEBUG = 1)	PRINT 'Item ID ' + @ITEMID + ' is deleted.'
			GOTO CONTINUEFETCH
		END

		-- Set default values
		SET @RECEIVED_IN_INVENTORYUNIT = @RECEIVEDQUANTITY

		-- Get the inventory unit for the item
		SELECT @INVENTORY_UNITID = UNITID, @LASTPRICE = ISNULL(@LASTPRICE, PURCHASEPRICE) FROM @ITEMID_INV_UNITID WHERE ITEMID = @ITEMID						

		IF (@DEBUG = 1)	PRINT 'Inventory unit: ' + @INVENTORY_UNITID
		IF (@DEBUG = 1)	PRINT 'Received unit: ' + @UNITID

		-- Calculate final unit price
		SET @UNITPRICE = ((@UNITPRICE - @DISCOUNTAMOUNT) * (1 - @DISCOUNTPERCENTAGE / 100)) + IIF(@TAXCALCULATIONMETHOD = 1, @TAXAMOUNT, 0)
		SET @UNITPRICE = IIF(@UNITPRICE >= 0, @UNITPRICE, 0)

		-- Check if the counted amount was done in the inventory unit
		IF (@INVENTORY_UNITID <> @UNITID)
		BEGIN
			IF (@DEBUG = 1)	PRINT 'Convert the received number ' +  CAST (@RECEIVEDQUANTITY AS NVARCHAR) + ' to a inventory unit'						
		
			SELECT @RECEIVED_IN_INVENTORYUNIT = dbo.CONVERTQTYBETWEENUNITS(@ITEMID, @RECEIVEDQUANTITY, @UNITID, @INVENTORY_UNITID, @UNITCONVERSIONSTABLE)
			-- Convert unit price with unit of measure factor
			SET @UNITPRICE = @UNITPRICE * dbo.GETCONVERSIONFACTOR(@ITEMID, @UNITID, @INVENTORY_UNITID, @UNITCONVERSIONSTABLE)

			IF (@DEBUG = 1)	PRINT 'Converted received in inventory unit: ' + CAST (@RECEIVED_IN_INVENTORYUNIT AS NVARCHAR) 
			
			IF @RECEIVED_IN_INVENTORYUNIT = 0 
			BEGIN
				IF @POSTINGRESULT < 1
				BEGIN
					SET @POSTINGRESULT = 1
				END

				IF (@DEBUG = 1)	PRINT 'Item ID ' + @ITEMID + ' has no unit conversion rule.'
				GOTO CONTINUEFETCH
			END		
		END
		
		UPDATE GOODSRECEIVINGLINE
		SET POSTED = 1
		WHERE GOODSRECEIVINGID = @GOODSRECEIVINGID 
		AND DATAAREAID = @DATAAREAID 
		AND LINENUMBER = @GLLINENUMBER
		
		IF (@DEBUG = 1)	PRINT 'GOODSRECEIVINGLINE updated'
		
		IF(@AVAILABLEQUANTITY < 0) SET @AVAILABLEQUANTITY = 0

		IF(@COSTCALCULATION <> 2) -- Not manual
			INSERT INTO RETAILITEMCOST (ID, ITEMID, STOREID, COST, UNITID, ENTRYDATE, REASON, USERID) VALUES (NEWID(), @ITEMID, @STOREID, IIF(@COSTCALCULATION = 0, @UNITPRICE, ((@LASTPRICE * @AVAILABLEQUANTITY) + (@UNITPRICE * @RECEIVED_IN_INVENTORYUNIT)) / (@AVAILABLEQUANTITY + @RECEIVED_IN_INVENTORYUNIT)), @INVENTORY_UNITID, GETDATE(), 'Purchase order / ID: ' + @PURCHASEORDERID, @USERID)

		INSERT INTO INVENTTRANS (
			POSTINGDATE, ITEMID, STOREID, ADJUSTMENT, [TYPE], OFFERID, COSTPRICEPERITEM, SALESPRICEWITHOUTTAXPERITEM, SALESPRICEWITHTAXPERITEM, 
			REASONCODE, DATAAREAID, DISCOUNTAMOUNTPERITEM, OFFERDISCOUNTAMOUNTPERITEM, [GUID], UNITID, ADJUSTMENTININVENTORYUNIT, REFERENCE, COMPATIBILITY)
		VALUES (
			GETDATE(), @ITEMID, @STOREID, @RECEIVEDQUANTITY, 1, '', @UNITPRICE, 0, 0, 
			'', @DATAAREAID, 0, 0, NEWID(), @UNITID, @RECEIVED_IN_INVENTORYUNIT, @GOODSRECEIVINGID, '2016.1')
		
		IF (@DEBUG = 1)	PRINT 'INVENTTRANS updated'

	CONTINUEFETCH:
		FETCH NEXT FROM LINESFORPOSTING INTO @POLINENUMBER, @ITEMID, @GLLINENUMBER, @ORDEREDQUANTITY, @UNITID, @RECEIVEDQUANTITY, @UNITPRICE, @LASTPRICE, @AVAILABLEQUANTITY, @TAXCALCULATIONMETHOD, @DISCOUNTAMOUNT, @DISCOUNTPERCENTAGE, @TAXAMOUNT
	END	

	IF (@DEBUG = 1)	PRINT '------------------------ FINISHED'

	CLOSE LINESFORPOSTING
	DEALLOCATE LINESFORPOSTING
	END TRY
	BEGIN CATCH
		SET @POSTINGRESULT = 7
	END CATCH

	-- Set journal processing back to None
	UPDATE PURCHASEORDERS SET PROCESSINGSTATUS = 0 WHERE PURCHASEORDERID = @PURCHASEORDERID AND DATAAREAID = @DATAAREAID

	IF @POSTINGRESULT = 0 -- Post the goods receiving document
	BEGIN
		UPDATE PURCHASEORDERS SET PURCHASESTATUS = 1 WHERE PURCHASEORDERID = @PURCHASEORDERID AND DATAAREAID = @DATAAREAID
		UPDATE GOODSRECEIVING SET STATUS = 1, POSTEDDATE = GETDATE() WHERE GOODSRECEIVINGID = @GOODSRECEIVINGID AND DATAAREAID = @DATAAREAID
	END
END
GO

/****** Object:  StoredProcedure [dbo].[spINVENTORY_ImportOmniGoodsReceivingLinesFromXML]    Script Date: 16/07/2019 14:48:00 ******/
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[spINVENTORY_ImportOmniGoodsReceivingLinesFromXML]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[spINVENTORY_ImportOmniGoodsReceivingLinesFromXML]
GO

/****** Object:  StoredProcedure [dbo].[spINVENTORY_ImportOmniGoodsReceivingLinesFromXML]    Script Date: 16/07/2019 14:48:00 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spINVENTORY_ImportOmniGoodsReceivingLinesFromXML] 
@OMNIJOURNALID NVARCHAR(20),
@DATAAREAID NVARCHAR(10),
@INSERTEDRECORDS INT OUTPUT
AS

DECLARE @JOURNALTYPE INT, @STAFFID NVARCHAR(20), @STOREID NVARCHAR(20), @STATUS INT, @PROCESSING BIT
DECLARE @DOCUMENTID NVARCHAR(20), @DOCUMENTPROCESSED BIT
SET @INSERTEDRECORDS = 0
SET @DOCUMENTPROCESSED = 0

BEGIN TRY
	SELECT @JOURNALTYPE = JOURNALTYPE, @DOCUMENTID = TEMPLATEID, @STAFFID = STAFFID, @STATUS = [STATUS], @STOREID = STOREID FROM OMNIJOURNAL WHERE JOURNALID = @OMNIJOURNALID
	
	IF(@DOCUMENTID IS NOT NULL AND @DOCUMENTID != '' AND @JOURNALTYPE = 8 AND @STATUS = 0)
	BEGIN
		UPDATE OMNIJOURNAL SET [STATUS] = 1 WHERE JOURNALID = @OMNIJOURNALID
	
		IF NOT EXISTS(SELECT 1 FROM PURCHASEORDERS WHERE PURCHASEORDERID = @DOCUMENTID AND PURCHASESTATUS = 0 AND DATAAREAID = @DATAAREAID AND PROCESSINGSTATUS = 0)
		BEGIN
			SET @DOCUMENTID = NULL
		END

		IF(@DOCUMENTID IS NOT NULL)
		BEGIN
			UPDATE PURCHASEORDERS SET PROCESSINGSTATUS = 3 WHERE DATAAREAID = @DATAAREAID AND PURCHASEORDERID = @DOCUMENTID

			BEGIN TRANSACTION
			DECLARE @docHandle INT, @XMLDATA XML;
			SELECT @XMLDATA = XMLDATA FROM OMNIJOURNAL WHERE JOURNALID = @OMNIJOURNALID
			EXEC sp_xml_preparedocument @docHandle OUTPUT, @XMLDATA
		
			DECLARE @LINES TABLE(ITEMID NVARCHAR(30), UNITID NVARCHAR(20), LINENUMBER NVARCHAR(20), POLINENUMBER NVARCHAR(20), QUANTITY DECIMAL(24, 6), ROWID INT)
		
			INSERT INTO @LINES (ITEMID, UNITID, LINENUMBER, POLINENUMBER, QUANTITY, ROWID)
			SELECT ITEMID, UNITID, NULLIF(LINENUMBER, ''), NULLIF(POLINENUMBER, ''), QUANTITY, ROW_NUMBER() OVER (ORDER BY (SELECT 1) ASC)
			FROM OPENXML(@docHandle, 'DOCUMENT/DOCUMENTLINE')
			WITH 
			(
				ITEMID [nvarchar](30) 'ITEMID',
				UNITID [nvarchar](20) 'UNITID',
				LINENUMBER [nvarchar](20) 'LINENUMBER',
				POLINENUMBER [nvarchar](20) 'POLINENUMBER',
				QUANTITY [decimal](24,6) 'QUANTITY'
			)
		
			EXEC sp_xml_removedocument @docHandle
			
			DECLARE @INSERTEDPOLINES TABLE(RowID INT, POLINENUMBER NVARCHAR(20))

			DECLARE @LASTLINENUMBER NVARCHAR(20)
			DECLARE @LASTLINENUMBERINDEX INT = 0
				
			SELECT TOP 1 @LASTLINENUMBER = LINENUMBER FROM PURCHASEORDERLINE WHERE PURCHASEORDERID = @DOCUMENTID AND LINENUMBER LIKE 'OMNI[-][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]' ORDER BY LINENUMBER DESC
			
			IF(@LASTLINENUMBER IS NOT NULL)
			BEGIN
				SET @LASTLINENUMBERINDEX = CONVERT(INT, SUBSTRING(@LASTLINENUMBER, 6, 10))
			END
			
			-- Add new purchase order lines
			-- We use merge with an always false condition to allow getting values from both source and target as output in order to update the goods receiving lines before inserting
			MERGE INTO PURCHASEORDERLINE AS dest
			USING (SELECT ITEMID, UNITID, ROW_NUMBER() OVER (ORDER BY (SELECT 1) ASC) + @LASTLINENUMBERINDEX AS LINENUMBER, QUANTITY, RowID FROM @LINES WHERE POLINENUMBER IS NULL) AS ins ON 1=0 -- always false
			
			WHEN NOT MATCHED BY TARGET  -- happens for every row, because 1 is never 0
			    THEN INSERT (PURCHASEORDERID, LINENUMBER, RETAILITEMID, VENDORITEMID, UNITID, QUANTITY, PRICE, DATAAREAID, DISCOUNTAMOUNT, DISCOUNTPERCENTAGE, TAXAMOUNT, TAXCALCULATIONMETHOD)
			         VALUES (@DOCUMENTID, CONCAT('OMNI-', FORMAT(ins.LINENUMBER, '0000000000')), ins.ITEMID, '', ins.UNITID, ins.QUANTITY, 0, @DATAAREAID, 0, 0, 0, 0)
			
			OUTPUT ins.RowID, inserted.LINENUMBER
			INTO @INSERTEDPOLINES (RowID, POLINENUMBER);

			UPDATE po SET po.POLINENUMBER = l.POLINENUMBER FROM @LINES po INNER JOIN @INSERTEDPOLINES l ON l.RowID = po.RowID WHERE l.RowID = po.RowID

			-- Get line number for goods receiving
			SELECT TOP 1 @LASTLINENUMBER = LINENUMBER FROM GOODSRECEIVINGLINE WHERE GOODSRECEIVINGID = @DOCUMENTID AND LINENUMBER LIKE 'OMNI[-][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]' ORDER BY LINENUMBER DESC
			
			IF(@LASTLINENUMBER IS NOT NULL)
			BEGIN
				SET @LASTLINENUMBERINDEX = CONVERT(INT, SUBSTRING(@LASTLINENUMBER, 6, 10))
			END

			-- Add or update goods receiving lines
			MERGE INTO GOODSRECEIVINGLINE AS target
			USING 
			(SELECT ITEMID, UNITID, POLINENUMBER, 
			CASE WHEN LINENUMBER IS NULL THEN  CONCAT('OMNI-', FORMAT(ROW_NUMBER() OVER (PARTITION BY CASE WHEN LINENUMBER IS NULL THEN 1 ELSE 0 END ORDER BY (SELECT 1) ASC) + @LASTLINENUMBERINDEX, '0000000000')) ELSE LINENUMBER END AS LINENUMBER, 
			QUANTITY, @DOCUMENTID AS DOCUMENTID FROM @LINES) AS source 

			ON target.GOODSRECEIVINGID = source.DOCUMENTID AND target.LINENUMBER = source.LINENUMBER
			WHEN MATCHED AND target.POSTED = 0 THEN
				UPDATE SET RECEIVEDQUANTITY = source.QUANTITY, RECEIVEDDATE = GETDATE()
			WHEN NOT MATCHED BY TARGET
			    THEN INSERT (GOODSRECEIVINGID, PURCHASEORDERLINENUMBER, LINENUMBER, STOREID, RECEIVEDQUANTITY, RECEIVEDDATE, POSTED, DATAAREAID)
			         VALUES (@DOCUMENTID, POLINENUMBER, LINENUMBER, @STOREID, source.QUANTITY, GETDATE(), 0, @DATAAREAID);

			SET @INSERTEDRECORDS = @@ROWCOUNT;
			COMMIT

			UPDATE PURCHASEORDERS SET PROCESSINGSTATUS = 0 WHERE PURCHASEORDERID = @DOCUMENTID AND DATAAREAID = @DATAAREAID
			SET @DOCUMENTPROCESSED = 1
		END
	END

	UPDATE OMNIJOURNAL SET [STATUS] = CASE WHEN @DOCUMENTPROCESSED = 1 THEN 2 ELSE 0 END WHERE JOURNALID = @OMNIJOURNALID
END TRY
BEGIN CATCH
	ROLLBACK

	UPDATE OMNIJOURNAL SET [STATUS] = 0 WHERE JOURNALID = @OMNIJOURNALID

	IF(@DOCUMENTID IS NOT NULL)
	BEGIN
		UPDATE PURCHASEORDERS SET PROCESSINGSTATUS = 0 WHERE DATAAREAID = @DATAAREAID AND PURCHASEORDERID = @DOCUMENTID
	END
END CATCH
GO

/****** Object:  StoredProcedure [dbo].[spINVENTORY_ImportTransferOrderLinesFromXML]    Script Date: 24/07/2019 10:28:00 ******/
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[spINVENTORY_ImportTransferOrderLinesFromXML]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[spINVENTORY_ImportTransferOrderLinesFromXML]
GO

/****** Object:  StoredProcedure [dbo].[spINVENTORY_ImportTransferOrderLinesFromXML]    Script Date: 24/07/2019 10:28:00 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spINVENTORY_ImportTransferOrderLinesFromXML] 
@TRANSFERORDERID NVARCHAR(20),
@XMLDATA XML,
@DATAAREAID NVARCHAR(10),
@INSERTEDRECORDS INT OUTPUT
AS

DECLARE @DOCUMENTID NVARCHAR(20), @DOCUMENTPROCESSED BIT, @PROCESSING BIT, @RECEIVED BIT
SET @INSERTEDRECORDS = 0
SET @DOCUMENTPROCESSED = 0

BEGIN TRY
	SELECT @DOCUMENTID = ID, @PROCESSING = PROCESSINGSTATUS, @RECEIVED = RECEIVED FROM INVENTORYTRANSFERORDER WHERE ID = @TRANSFERORDERID AND DATAAREAID = @DATAAREAID
	
	IF(@DOCUMENTID IS NOT NULL AND @DOCUMENTID != '' AND @PROCESSING = 0)
	BEGIN
		UPDATE INVENTORYTRANSFERORDER SET [PROCESSINGSTATUS] = 1 WHERE ID = @TRANSFERORDERID AND DATAAREAID = @DATAAREAID
	
		BEGIN TRANSACTION
		DECLARE @docHandle INT
		EXEC sp_xml_preparedocument @docHandle OUTPUT, @XMLDATA
		
		DECLARE @LINES TABLE(ITEMID NVARCHAR(30), UNITID NVARCHAR(20), LINEID UNIQUEIDENTIFIER, SENTQUANTITY DECIMAL(24, 6), RECEIVEDQUANTITY DECIMAL(24, 6))
		
		INSERT INTO @LINES (ITEMID, UNITID, LINEID, SENTQUANTITY, RECEIVEDQUANTITY)
		SELECT ITEMID, UNITID, LINEID, SENTQUANTITY, RECEIVEDQUANTITY
		FROM OPENXML(@docHandle, 'DOCUMENT/DOCUMENTLINE')
		WITH 
		(
			ITEMID [nvarchar](30) 'ITEMID',
			UNITID [nvarchar](20) 'UNITID',
			LINEID uniqueidentifier 'LINEID',
			SENTQUANTITY [decimal](24,6) 'SENTQUANTITY',
			RECEIVEDQUANTITY [decimal](24,6) 'RECEIVEDQUANTITY'
		)
		
		EXEC sp_xml_removedocument @docHandle

		-- Add or update transfer order lines
		MERGE INTO INVENTORYTRANSFERORDERLINE AS target
		USING 
		(SELECT @DOCUMENTID AS DOCUMENTID, ITEMID, UNITID, LINEID, SENTQUANTITY, RECEIVEDQUANTITY FROM @LINES) AS source 
		ON target.ID = source.LINEID AND target.INVENTORYTRANSFERORDERID = source.DOCUMENTID
		WHEN MATCHED AND @RECEIVED = 0 THEN
			UPDATE SET UNITID = source.UNITID, QUANTITYSENT = source.SENTQUANTITY,  QUANTITYRECEIVED = source.RECEIVEDQUANTITY
		WHEN NOT MATCHED BY TARGET
			THEN INSERT (ID, INVENTORYTRANSFERORDERID, ITEMID, UNITID, QUANTITYSENT, QUANTITYRECEIVED, SENT, DATAAREAID)
			        VALUES (NEWID(), @DOCUMENTID, source.ITEMID, source.UNITID, source.SENTQUANTITY, source.RECEIVEDQUANTITY, 0, @DATAAREAID);

		SET @INSERTEDRECORDS = @@ROWCOUNT;
		
		-- Delete lines with sent quantity 0
		DELETE FROM INVENTORYTRANSFERORDERLINE WHERE INVENTORYTRANSFERORDERID = @TRANSFERORDERID AND DATAAREAID = @DATAAREAID AND SENT = 0 AND QUANTITYSENT = 0
		
		COMMIT

		UPDATE INVENTORYTRANSFERORDER SET [PROCESSINGSTATUS] = 0 WHERE ID = @TRANSFERORDERID AND DATAAREAID = @DATAAREAID
		SET @DOCUMENTPROCESSED = 1
	END

END TRY
BEGIN CATCH
	ROLLBACK
	IF(@DOCUMENTID IS NOT NULL)
	BEGIN
		UPDATE INVENTORYTRANSFERORDER SET [PROCESSINGSTATUS] = 0 WHERE ID = @TRANSFERORDERID AND DATAAREAID = @DATAAREAID
	END
END CATCH
GO

/****** Object:  StoredProcedure [dbo].[spINVENTORY_GetItemsFromTemplateFilter]    Script Date: 17/09/2019 16:42:00 ******/
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[spINVENTORY_GetItemsFromTemplateFilter]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[spINVENTORY_GetItemsFromTemplateFilter]
GO

/****** Object:  StoredProcedure [dbo].[spINVENTORY_GetItemsFromTemplateFilter]    Script Date: 17/09/2019 16:42:00 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spINVENTORY_GetItemsFromTemplateFilter] 
(
	@TEMPLATEID NVARCHAR(20),
	@STOREID NVARCHAR(20),
	@GETITEMSWITHNOVENDOR BIT
)
AS
BEGIN
    /*
     -------------------------------------------------------------------------------------------------------------------s
     Description  : Returns all items that match the item filter for given inventory template.
     Changes      : [17.09.2019][ONE-7632] Added
     -------------------------------------------------------------------------------------------------------------------
    */
    SET NOCOUNT ON;

	DECLARE @SELECTEDVENDORID NVARCHAR(20)
	DECLARE @INCLUDERETAILGROUP BIT
	DECLARE @INCLUDERETAILDEPARTMENT BIT
	DECLARE @INCLUDEVENDOR BIT
	DECLARE @INCLUDESPECIALGROUP BIT
	DECLARE @INCLUDEINVENTONHAND BIT
	DECLARE @INVENTORYONHAND INT = 0
	DECLARE @INVENTORYONHANDCOMPARISON INT = 0
	
	-- selectedVendorId is the first selected vendor in the filter
	SELECT TOP 1 @SELECTEDVENDORID = ID FROM INVENTORYTEMPLATEITEMFILTERSELECTIONS WHERE SECTIONID = 'Vendor' AND INVENTORYTEMPLATEIDID = @TEMPLATEID
	SELECT TOP 1 @INCLUDERETAILGROUP = IIF(COUNT(1) > 0, 1, 0) FROM INVENTORYTEMPLATEITEMFILTERSELECTIONS WHERE SECTIONID = 'RetailGroup' AND INVENTORYTEMPLATEIDID = @TEMPLATEID;
	SELECT TOP 1 @INCLUDERETAILDEPARTMENT = IIF(COUNT(1) > 0, 1, 0) FROM INVENTORYTEMPLATEITEMFILTERSELECTIONS WHERE SECTIONID = 'RetailDepartment' AND INVENTORYTEMPLATEIDID = @TEMPLATEID;
	SELECT TOP 1 @INCLUDEVENDOR = IIF(COUNT(1) > 0, 1, 0) FROM INVENTORYTEMPLATEITEMFILTERSELECTIONS WHERE SECTIONID = 'Vendor' AND INVENTORYTEMPLATEIDID = @TEMPLATEID;
	SELECT TOP 1 @INCLUDESPECIALGROUP = IIF(COUNT(1) > 0, 1, 0) FROM INVENTORYTEMPLATEITEMFILTERSELECTIONS WHERE SECTIONID = 'SpecialGroup' AND INVENTORYTEMPLATEIDID = @TEMPLATEID;
	SELECT TOP 1 @INCLUDEINVENTONHAND = IIF(COUNT(1) > 0, 1, 0) FROM INVENTORYTEMPLATEITEMFILTERSELECTIONS WHERE SECTIONID = 'InventoryOnHand' AND INVENTORYTEMPLATEIDID = @TEMPLATEID;

	IF(@INCLUDERETAILGROUP = 0 AND @INCLUDERETAILDEPARTMENT = 0 AND @INCLUDEVENDOR = 0 AND @INCLUDESPECIALGROUP = 0 AND @INCLUDEINVENTONHAND = 0)
		RETURN;

	IF(@INCLUDEINVENTONHAND = 1)
	BEGIN
		SELECT @INVENTORYONHANDCOMPARISON = CAST(LEFT(ID, 1) AS INT), @INVENTORYONHAND = CAST(SUBSTRING(ID, 3, LEN(ID)) AS INT) FROM  INVENTORYTEMPLATEITEMFILTERSELECTIONS WHERE SECTIONID = 'InventoryOnHand' AND INVENTORYTEMPLATEIDID = @TEMPLATEID;
	END

	SELECT 
		IT.ITEMID AS ITEMID,
		IT.ITEMNAME AS ITEMNAME,
		IT.VARIANTNAME AS VARIANTNAME,
		ISNULL(RG.NAME, '') AS RETAILGROUPNAME,
		ISNULL(RD.NAME, '') AS RETAILDEPARTMENTNAME,
		IT.INVENTORYUNITID AS INVENTORYUNIT,
		ISNULL(IU.TXT, '') AS INVENTORYUNITDESCRIPTION,
		ISNULL(IT.PURCHASEUNITID, IT.INVENTORYUNITID) AS PURCHASEUNIT,
		COALESCE(PU.TXT, IU.TXT) AS PURCHASEUNITDESCRIPTION,
		ISNULL(IT.SALESUNITID, IT.INVENTORYUNITID) AS SALESUNIT,
		ISNULL(SU.TXT, IU.TXT) AS SALESUNITDESCRIPTION,
		ISNULL(VT.ACCOUNTNUM, '') AS VENDORID,
		ISNULL(VT.NAME, '') AS VENDORTXT,
		ISNULL(barcode.ITEMBARCODE, '') AS DEFAULTBARCODE,
		(SELECT COUNT(*) FROM ITEMREPLENISHMENTSETTING itemSetting where itemSetting.ITEMID = it.ITEMID) AS HASSETTING,
	    ISNULL(ITH.ITEMID, '') AS HEADERITEMID,
        '' AS VENDORITEMID

	FROM RETAILITEM IT
	    LEFT OUTER JOIN RETAILITEM ITH ON IT.HEADERITEMID = ITH.MASTERID
		LEFT OUTER JOIN RETAILGROUP RG ON IT.RETAILGROUPMASTERID = RG.MASTERID
		LEFT OUTER JOIN RETAILDEPARTMENT RD ON RG.DEPARTMENTMASTERID = RD.MASTERID
		LEFT OUTER JOIN SPECIALGROUPITEMS SG ON SG.GROUPID = IT.ITEMID
		LEFT OUTER JOIN VENDTABLE VT ON VT.ACCOUNTNUM = IT.DEFAULTVENDORID
		LEFT OUTER JOIN VINVENTSUM INV ON INV.ITEMID = IT.ITEMID AND INV.STOREID = @STOREID
		LEFT OUTER JOIN (SELECT *, ROW_NUMBER() OVER (PARTITION BY ITEMID ORDER BY RBOSHOWFORITEM DESC, ITEMID) AS BARCODE_ROW FROM INVENTITEMBARCODE WHERE DELETED = 0) barcode ON barcode.ITEMID = IT.ITEMID AND barcode.BARCODE_ROW = 1
		LEFT OUTER JOIN UNIT IU ON IT.INVENTORYUNITID = IU.UNITID
		LEFT OUTER JOIN UNIT PU ON IT.PURCHASEUNITID = PU.UNITID
		LEFT OUTER JOIN UNIT SU ON IT.SALESUNITID = SU.UNITID
	WHERE IT.ITEMTYPE <> 3
	AND IT.ITEMTYPE <> 2
	AND IT.ITEMTYPE <> 4
	AND IT.DELETED = 0
	AND (@INCLUDERETAILGROUP = 0 OR RG.GROUPID IN (SELECT ID FROM INVENTORYTEMPLATEITEMFILTERSELECTIONS WHERE SECTIONID = 'RetailGroup' AND INVENTORYTEMPLATEIDID = @TEMPLATEID))
	AND (@INCLUDERETAILDEPARTMENT = 0 OR RD.DEPARTMENTID IN (SELECT ID FROM INVENTORYTEMPLATEITEMFILTERSELECTIONS WHERE SECTIONID = 'RetailDepartment' AND INVENTORYTEMPLATEIDID = @TEMPLATEID))
	AND (@INCLUDEVENDOR = 0 OR VT.ACCOUNTNUM IN (SELECT ID FROM INVENTORYTEMPLATEITEMFILTERSELECTIONS WHERE SECTIONID = 'Vendor' AND INVENTORYTEMPLATEIDID = @TEMPLATEID))
	AND (@INCLUDESPECIALGROUP = 0 OR SG.GROUPID IN (SELECT ID FROM INVENTORYTEMPLATEITEMFILTERSELECTIONS WHERE SECTIONID = 'SpecialGroup' AND INVENTORYTEMPLATEIDID = @TEMPLATEID))
	AND (@INCLUDEINVENTONHAND = 0 OR ((@INVENTORYONHANDCOMPARISON = 0 AND ISNULL(INV.QUANTITY, 0) = @INVENTORYONHAND)
								 OR (@INVENTORYONHANDCOMPARISON = 1 AND ISNULL(INV.QUANTITY, 0) > @INVENTORYONHAND)
								 OR (@INVENTORYONHANDCOMPARISON = 2 AND ISNULL(INV.QUANTITY, 0) < @INVENTORYONHAND)))
	AND (@GETITEMSWITHNOVENDOR = 1 OR VT.ACCOUNTNUM IS NOT NULL)

    ORDER BY IT.ITEMNAME ASC, IT.VARIANTNAME ASC
END 
GO

EXECUTE spDB_SetRoutineDescription_1_0 'spINVENTORY_GetItemsFromTemplateFilter', 'Returns all items that match the item filter for given inventory template';
GO

/****** Object:  StoredProcedure [dbo].[spINVENTORY_CreatePurchaseWorksheetLinesFromFilter]    Script Date: 16-Oct-19 3:34:39 PM ******/
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[spINVENTORY_CreatePurchaseWorksheetLinesFromFilter]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[spINVENTORY_CreatePurchaseWorksheetLinesFromFilter]
GO

/****** Object:  StoredProcedure [dbo].[spINVENTORY_CreatePurchaseWorksheetLinesFromFilter]    Script Date: 16-Oct-19 3:34:39 PM ******/
CREATE PROCEDURE [dbo].[spINVENTORY_CreatePurchaseWorksheetLinesFromFilter] 
@PURCHASEWORKSHEETID NVARCHAR(20),
@RETAILGROUPS VARCHAR(MAX),
@RETAILDEPARTMENTS VARCHAR(MAX),
@VENDORS VARCHAR(MAX),
@SPECIALGROUPS VARCHAR(MAX),
@FILTERDELIMITER VARCHAR(MAX),
@DATAAREAID NVARCHAR(10),
@INSERTEDRECORDS INT OUTPUT
AS

/**** CREATE ALL LINES IN A PURCHASE WORKSHEET DOCUMENT BASED ON THE FILTER FROM THE INVENTORY TEMPLATE ****/

DECLARE @VENDORSTABLE TABLE (ID NVARCHAR(20));
DECLARE @UNITSELECTION INT;
DECLARE @ADDLINESWITHZEROSUGGESTEDQTY BIT;
DECLARE @CALCULATESUGGESTEDQTY BIT;
DECLARE @SETQTYTOSUGGESTEDQTY BIT;
DECLARE @STOREID NVARCHAR(20);
DECLARE @CURRENTDATE DATETIME = GETDATE();

SELECT @UNITSELECTION = IT.UNITSELECTION, 
	   @ADDLINESWITHZEROSUGGESTEDQTY = IT.ADDLINESWITHZEROSUGGESTEDQTY,
	   @CALCULATESUGGESTEDQTY = IT.CALCULATESUGGESTEDQUANTITY, 
	   @SETQTYTOSUGGESTEDQTY = IT.SETQUANTITYTOSUGGESTEDQUANTITY,
	   @STOREID = PW.STOREID
FROM PURCHASEWORKSHEET PW
INNER JOIN INVENTORYTEMPLATE IT ON IT.ID = PW.INVENTORYTEMPLATEID
WHERE PW.ID = @PURCHASEWORKSHEETID AND PW.DATAAREAID = @DATAAREAID;

INSERT INTO @VENDORSTABLE SELECT Value FROM dbo.SplitList(@VENDORS, @FILTERDELIMITER);

IF OBJECT_ID('tempdb..#ITEMLIST', 'U') IS NOT NULL
	DROP TABLE #ITEMLIST;

CREATE TABLE #ITEMLIST (ITEMID NVARCHAR(40) COLLATE database_default);

INSERT INTO 
	#ITEMLIST 
EXECUTE 
	spINVENTORY_GetItemsFromInventoryFilter 
		@STOREID,
		@RETAILGROUPS,
		@RETAILDEPARTMENTS,
		@SPECIALGROUPS,
		@FILTERDELIMITER;

DECLARE @UNITCONVERSIONSTABLE UNITCONVERSIONSTABLETYPE
INSERT INTO @UNITCONVERSIONSTABLE 
	SELECT FROMUNIT, TOUNIT, FACTOR, ITEMID FROM UNITCONVERT 
	WHERE (ITEMID = '' OR ITEMID IN (Select ItemID from #ITEMLIST)) AND DATAAREAID = DATAAREAID;

-- CREATE CTE WITH BASIC ITEM INFO AND EFFECTIVE INVENTORY
WITH LINES_CTE (ITEMID, BARCODENUMBER, INVENTORYUNITID, UNITID, VENDORID, EFFECTIVEINVENTORY) AS (
    SELECT DISTINCT 
        R.ITEMID, barcode.ITEMBARCODE AS BARCODENUMBER, 
        R.INVENTORYUNITID,
        CASE WHEN @UNITSELECTION = 0 THEN R.INVENTORYUNITID
            WHEN @UNITSELECTION = 1 THEN COALESCE(R.PURCHASEUNITID, R.INVENTORYUNITID)
            WHEN @UNITSELECTION = 2 THEN COALESCE(R.SALESUNITID, R.INVENTORYUNITID)
        END AS UNITID, 
        VTD.ACCOUNTNUM AS VENDORID,
        dbo.GETEFFECTIVEINVENTORY(R.ITEMID, @STOREID) AS EFFECTIVEINVENTORY
	FROM #ITEMLIST ITEMS
    JOIN RETAILITEM R ON R.ITEMID = ITEMS.ITEMID

    LEFT OUTER JOIN VENDORITEMS VI ON VI.RETAILITEMID = R.ITEMID AND VI.VENDORID IN (
        CASE WHEN @VENDORS = '' THEN '' ELSE (SELECT ID FROM @VENDORSTABLE) END
    )
    LEFT OUTER JOIN VENDTABLE VT ON VT.ACCOUNTNUM = VI.VENDORID
    LEFT OUTER JOIN (SELECT ITEMID, ITEMBARCODE, ROW_NUMBER() OVER (PARTITION BY ITEMID ORDER BY RBOSHOWFORITEM DESC, ITEMID) AS BARCODE_ROW FROM INVENTITEMBARCODE WHERE DELETED = 0) barcode ON barcode.ITEMID = R.ITEMID AND barcode.BARCODE_ROW = 1
    LEFT OUTER JOIN VENDTABLE VTD ON VTD.ACCOUNTNUM = R.DEFAULTVENDORID

    WHERE (@VENDORS = '' OR VT.ACCOUNTNUM IN (SELECT ID FROM @VENDORSTABLE))
	AND VTD.ACCOUNTNUM IS NOT NULL
),
-- CREATE CTE WITH SUGGESTED QUANTITY BASED ON ITEM REPLENISHMENT SETTINGS
CALCULATED_CTE (ITEMID, BARCODENUMBER, INVENTORYUNITID, UNITID, FACTOR, VENDORID, SUGGESTEDQTY) AS (
	SELECT 
		LC.ITEMID, LC.BARCODENUMBER, LC.INVENTORYUNITID, LC.UNITID, 
		dbo.CONVERTQTYBETWEENUNITS(LC.ITEMID, 1, LC.UNITID, LC.INVENTORYUNITID, @UNITCONVERSIONSTABLE),

		LC.VENDORID,
		dbo.CALCULATESUGGESTEDQUANTITY(@CALCULATESUGGESTEDQTY, COALESCE(LC.EFFECTIVEINVENTORY, 0), 
		COALESCE(IRS.PURCHASEORDERMULTIPLEROUNDING, IR.PURCHASEORDERMULTIPLEROUNDING), 
		COALESCE(IRS.PURCHASEORDERMULTIPLE, IR.PURCHASEORDERMULTIPLE), COALESCE(IRS.MAXIMUMINVENTORY, IR.MAXIMUMINVENTORY)) AS SUGGESTEDQTY
	FROM LINES_CTE LC
	LEFT OUTER JOIN ITEMREPLENISHMENTSETTING IRS ON IRS.ITEMID = LC.ITEMID AND IRS.STOREID = @STOREID
	LEFT OUTER JOIN ITEMREPLENISHMENTSETTING IR ON IR.ITEMID = LC.ITEMID AND IRS.ITEMID IS NULL AND IR.STOREID = ''
	WHERE COALESCE(IRS.ITEMID, IR.ITEMID, '') <> ''
	AND (COALESCE(IRS.REORDERPOINT, IR.REORDERPOINT) > COALESCE(LC.EFFECTIVEINVENTORY, 0) OR @ADDLINESWITHZEROSUGGESTEDQTY = 1)
	AND (COALESCE(IRS.BLOCKEDFORREPLENISHMENT, IR.BLOCKEDFORREPLENISHMENT) = 0 OR COALESCE(IRS.BLOCKINGDATE, IR.BLOCKINGDATE) > @CURRENTDATE)
)
-- INSERT CALCULATED LINES
INSERT INTO PURCHASEWORKSHEETLINE (ID, PURCHASEWORKSHEETID, BARCODENUMBER, ITEMID, QUANTITY, UNITID, VENDORID, SUGGESTEDQUANTITY, DATAAREAID, DELETED, MANUALLYEDITED) 
SELECT NEWID(), @PURCHASEWORKSHEETID, ISNULL(C.BARCODENUMBER, ''), C.ITEMID, 
IIF(@SETQTYTOSUGGESTEDQTY = 1,C.SUGGESTEDQTY * (1/C.FACTOR),0),
C.UNITID, C.VENDORID, C.SUGGESTEDQTY, @DATAAREAID, 0, 0 FROM CALCULATED_CTE AS C

DROP TABLE #ITEMLIST;

SET @INSERTEDRECORDS = @@ROWCOUNT
GO

EXECUTE spDB_SetRoutineDescription_1_0 'spINVENTORY_CreatePurchaseWorksheetLinesFromFilter', 'Creates all lines in a purchase worksheet based on a filter and calculates suggested quantities.';
GO

/****** Object:  StoredProcedure [dbo].[spINVENTORY_RefreshPurchaseWorksheetLines]    Script Date: 30-Oct-19 10:24:39 AM ******/
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[spINVENTORY_RefreshPurchaseWorksheetLines]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[spINVENTORY_RefreshPurchaseWorksheetLines]
GO

/****** Object:  StoredProcedure [dbo].[spINVENTORY_RefreshPurchaseWorksheetLines]    Script Date: 30-Oct-19 10:24:39 AM ******/
CREATE PROCEDURE [dbo].[spINVENTORY_RefreshPurchaseWorksheetLines] 
@PURCHASEWORKSHEETID NVARCHAR(20),
@DATAAREAID NVARCHAR(10)
AS

/**** 
	REFRESH ALL LINES FROM A PURCHASE WORKSHEET 

	1. Recalculate quantities for existing lines that are not manually edited
	2. Update ordered quantity and unit of measure
****/

DECLARE @UNITSELECTION INT
DECLARE @CALCULATESUGGESTEDQTY BIT
DECLARE @SETQTYTOSUGGESTEDQTY BIT
DECLARE @STOREID NVARCHAR(20)

SELECT @UNITSELECTION = IT.UNITSELECTION,
	   @CALCULATESUGGESTEDQTY = IT.CALCULATESUGGESTEDQUANTITY, 
	   @SETQTYTOSUGGESTEDQTY = IT.SETQUANTITYTOSUGGESTEDQUANTITY,
	   @STOREID = PW.STOREID
FROM PURCHASEWORKSHEET PW
INNER JOIN INVENTORYTEMPLATE IT ON IT.ID = PW.INVENTORYTEMPLATEID
WHERE PW.ID = @PURCHASEWORKSHEETID AND PW.DATAAREAID = @DATAAREAID

/**** RECALCULATE EXISTING LINES THAT ARE NOT MANUALLY EDITED  ****/

IF(@CALCULATESUGGESTEDQTY = 1)
BEGIN

	DECLARE @UNITCONVERSIONSTABLE UNITCONVERSIONSTABLETYPE

	-- Get all unit conversions needed
	INSERT INTO @UNITCONVERSIONSTABLE SELECT FROMUNIT, TOUNIT, FACTOR, ITEMID FROM UNITCONVERT 
	WHERE (ITEMID = '' OR ITEMID IN (SELECT PW.ITEMID FROM PURCHASEWORKSHEETLINE PW WHERE PW.PURCHASEWORKSHEETID = @PURCHASEWORKSHEETID AND PW.DATAAREAID = @DATAAREAID AND PW.MANUALLYEDITED = 0))

	UPDATE PURCHASEWORKSHEETLINE
	SET SUGGESTEDQUANTITY = PWLU.SUGGESTEDQTY, 
		UNITID = PWLU.TEMPLATEUNITID, 
		QUANTITY = IIF(@SETQTYTOSUGGESTEDQTY = 1, dbo.CONVERTQTYBETWEENUNITS(PWLU.ITEMID, PWLU.SUGGESTEDQTY, PWLU.INVENTORYUNITID, PWLU.TEMPLATEUNITID, @UNITCONVERSIONSTABLE), dbo.CONVERTQTYBETWEENUNITS(PWLU.ITEMID, QUANTITY, UNITID, PWLU.TEMPLATEUNITID, @UNITCONVERSIONSTABLE))
	FROM 
	(SELECT PWL.ID AS UPDATEID, 
	dbo.CALCULATESUGGESTEDQUANTITY(@CALCULATESUGGESTEDQTY, COALESCE(dbo.GETEFFECTIVEINVENTORY(R.ITEMID, @STOREID), 0), COALESCE(IRS.PURCHASEORDERMULTIPLEROUNDING, IR.PURCHASEORDERMULTIPLEROUNDING), COALESCE(IRS.PURCHASEORDERMULTIPLE, IR.PURCHASEORDERMULTIPLE), COALESCE(IRS.MAXIMUMINVENTORY, IR.MAXIMUMINVENTORY)) AS SUGGESTEDQTY,
	R.ITEMID,
	R.INVENTORYUNITID,
	CASE WHEN @UNITSELECTION = 0 THEN R.INVENTORYUNITID
			WHEN @UNITSELECTION = 1 THEN COALESCE(R.PURCHASEUNITID, R.INVENTORYUNITID)
			WHEN @UNITSELECTION = 2 THEN COALESCE(R.SALESUNITID, R.INVENTORYUNITID) END AS TEMPLATEUNITID
	FROM PURCHASEWORKSHEETLINE PWL
	INNER JOIN RETAILITEM R ON R.ITEMID = PWL.ITEMID
	LEFT OUTER JOIN ITEMREPLENISHMENTSETTING IRS ON IRS.ITEMID = PWL.ITEMID AND IRS.STOREID = @STOREID
	LEFT OUTER JOIN ITEMREPLENISHMENTSETTING IR ON IR.ITEMID = PWL.ITEMID AND IRS.ITEMID IS NULL AND IR.STOREID = ''
	WHERE PWL.MANUALLYEDITED = 0 AND PWL.DELETED = 0
	AND COALESCE(IRS.ITEMID, IR.ITEMID, '') <> '') PWLU
	WHERE ID = PWLU.UPDATEID
END
GO

EXECUTE spDB_SetRoutineDescription_1_0 'spINVENTORY_RefreshPurchaseWorksheetLines', 'Recalculate suggested quantities in a purchase worksheet for lines that were not edited manually.';
GO

/****** Object:  StoredProcedure [dbo].[spINVENTORY_ArchiveItemCosts]    Script Date: 21-Dec-20 11:17:00 AM ******/
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[spINVENTORY_ArchiveItemCosts]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[spINVENTORY_ArchiveItemCosts]
GO

/****** Object:  StoredProcedure [dbo].[spINVENTORY_ArchiveItemCosts]    Script Date: 21-Dec-20 11:17:00 AM ******/
CREATE PROCEDURE [dbo].[spINVENTORY_ArchiveItemCosts]
AS
;WITH CTE AS
(SELECT *, ROW_NUMBER() OVER(PARTITION BY ITEMID, STOREID ORDER BY ENTRYDATE DESC) AS RN FROM RETAILITEMCOST)
DELETE FROM CTE
OUTPUT DELETED.ID, DELETED.ITEMID, DELETED.STOREID, DELETED.COST, DELETED.UNITID, DELETED.ENTRYDATE, DELETED.REASON, DELETED.USERID INTO RETAILITEMCOSTHISTORY
WHERE RN > 1
GO

EXECUTE spDB_SetRoutineDescription_1_0 'spINVENTORY_ArchiveItemCosts', 'Archive all item costs except the last calculated cost for each store.';
GO