// ReportID is a field that identifies the report, this should be a UUID, please use 
// web page like http://www.famkruithof.net/uuid/uuidgen to generate unique UUID for the report.
ReportID: 05b0ab30-2bd9-11e5-a2cb-0800200c9a66

// Name of the report as it will appear in the system menus.
Name: Gjafakorta uppgjör

// Extra description for the report as it will appear in some of the system menus
Description: Sölur á gjafakortum eftir búðum, útstöðvum og starfsmönnum

// LanguageID has .NET style ISO language code, this is so that a report can for example exist in English 
// and Swedish. Same fallback rules as in .NET localization apply, for example then de-AU falls back to 
// de and de falls back to en if not found.
LanguageID: is

// Contexts tell where in the system the report should appear, a report can have one or more contexts.
// Supported Contexts are: Report, Button, Store, Customer, Vendor, Terminal, Item. This field should be comma separated.
// Example use: Report, Store
Contexts: Report, Button

// Stored procedures store the SQL code for the stored procedures the report uses. Please make sure
// that the procedures check for existance and delete the existing ones if they exist before adding.
// Also try to make the procedures names unique for each report by for example prefixing them with
// name of the report.
Stored procedures:

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[spDB_GiftCardSales]') and OBJECTPROPERTY(id, 
N'IsProcedure') = 1)
drop procedure [dbo].[spDB_GiftCardSales]

GO

CREATE PROCEDURE [dbo].[spDB_GiftCardSales]
(
	@StartDate datetime,
	@EndDate datetime,
	@UsersID nvarchar(max),
	@StoresID nvarchar(max),
	@TerminalsID nvarchar(max),
	@DataareaID nvarchar(10)
)
AS
set nocount on
declare @docid int
declare @docid2 int
declare @docid3 int
exec sp_xml_preparedocument @docid output, @UsersID
exec sp_xml_preparedocument @docid2 output, @StoresID
exec sp_xml_preparedocument @docid3 output, @TerminalsID

select 
	THEDATE, sum(QTY) as QTY,  sum(NETAMOUNTINCLTAX) as NETAMOUNTINCLTAX, ITEMNAME, GIFTCARDID,
	STORE, STAFFID, TERMINAL, STORENAME, TERMINALNAME
from
(
	select 
	Cast(r.TRANSDATE as smalldatetime) as THEDATE, r.QTY*-1 as QTY, r.NETAMOUNTINCLTAX*-1 as NETAMOUNTINCLTAX, r.DESCRIPTION as ITEMNAME, r.COMMENT as GIFTCARDID, r.STORE, st.NAME as STORENAME, r.TerminalID as TERMINAL, t.NAME as TERMINALNAME, u.LOGIN + ' - ' + u.FirstName  as STAFFID
	from VTRANSACTIONSALESTRANSHASPRICE r
	join (select [text] as USERID from openxml(@docid, '/p', 1) where not [text] is null) us on r.STAFFID = cast(us.USERID as nvarchar(20))
	join (select [text] as STORESID from openxml(@docid2, '/p', 1) where not [text] is null) ur on r.STORE = CAST(ur.STORESID as nvarchar(20)) 
	join (select [text] as TERMINALSID from openxml(@docid3, '/p', 1) where not [text] is null) ut on r.TERMINALID = CAST(ut.TERMINALSID as nvarchar(20))
	left outer join RBOTRANSACTIONTABLE tt on r.TRANSACTIONID = tt.TRANSACTIONID and tt.TERMINAL = r.TERMINALID and tt.STORE = r.STORE
	left outer join RBOSTORETABLE st on r.STORE = st.STOREID and r.DATAAREAID = st.DATAAREAID
	left outer join RBOTERMINALTABLE t on r.TERMINALID = t.TERMINALID and r.DATAAREAID = t.DATAAREAID
	left outer join USERS u on r.STAFFID = u.STAFFID 
	where r.TRANSACTIONSTATUS = 0 and tt.ENTRYSTATUS = 0 and r.GIFTCARD = 1 --and r.DATAAREAID = @DataareaID and r.TRANSDATE >= @StartDate and r.TRANSDATE <= @EndDate 
) temp
group by THEDATE, NETAMOUNTINCLTAX, ITEMNAME, GIFTCARDID, STORE, STAFFID, TERMINAL, STORENAME, TERMINALNAME
order by GIFTCARDID

exec sp_xml_removedocument @docid
exec sp_xml_removedocument @docid2
exec sp_xml_removedocument @docid3


GO