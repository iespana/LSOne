// ReportID is a field that identifies the report, this should be a UUID, please use 
// web page like http://www.famkruithof.net/uuid/uuidgen to generate unique UUID for the report.
ReportID: 69fc0d30-41cf-11e5-b970-0800200c9a66

// Name of the report as it will appear in the system menus.
Name: Item sales by item

// Extra description for the report as it will appear in some of the system menus
Description: This report displays item sales by item. It does not include gift card sales.

// LanguageID has .NET style ISO language code, this is so that a report can for example exist in English 
// and Swedish. Same fallback rules as in .NET localization apply, for example then de-AU falls back to 
// de and de falls back to en if not found.
LanguageID: en

// Contexts tell where in the system the report should appear, a report can have one or more contexts.
// Supported Contexts are: Report, Button, Store, Customer, Vendor, Terminal, Item. This field should be comma separated.
// Example use: Report, Store
Contexts: Report, Button

// Stored procedures store the SQL code for the stored procedures the report uses. Please make sure
// that the procedures check for existance and delete the existing ones if they exist before adding.
// Also try to make the procedures names unique for each report by for example prefixing them with
// name of the report.
Stored procedures:

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[spDB_ItemSalesNoprice]') and OBJECTPROPERTY(id, 
N'IsProcedure') = 1)
drop procedure [dbo].[spDB_ItemSalesNoprice]

GO

CREATE PROCEDURE [dbo].[spDB_ItemSalesNoprice]
(
	@StartDate datetime,
	@EndDate datetime,
	@DataareaID nvarchar(10)
)
AS
set nocount on

select STORE, GROUPID, NAME, ITEMID, ITEMNAME, sum(QTY) as QTY, sum(WHOLEDISCAMOUNTWITHTAX) as WHOLEDISCAMOUNTWITHTAX, sum(NETAMOUNTINCLTAX) as NETAMOUNTINCLTAX 
from
(
	select r.QTY*-1 as QTY, r.NETAMOUNTINCLTAX*-1 as NETAMOUNTINCLTAX, r.WHOLEDISCAMOUNTWITHTAX, r.ITEMID, case when r.GIFTCARD = 1 THEN 'Gift card' ELSE ISNULL(s.ITEMNAME, 'Item does on exist') END as ITEMNAME, w.GROUPID, w.NAME, r.STORE 
	from RBOTRANSACTIONSALESTRANS r
	--join (select [text] as STORESID from openxml(@docid, '/p', 1) where not [text] is null) ur on r.STORE = CAST(ur.STORESID as nvarchar(20)) 
	left outer join RBOTRANSACTIONTABLE tt on r.TRANSACTIONID = tt.TRANSACTIONID and tt.TERMINAL = r.TERMINALID and tt.STORE = r.STORE
	left outer join INVENTTABLE s on r.ITEMID = s.ITEMID and r.DATAAREAID = s.DATAAREAID
	left outer join RBOINVENTTABLE u on r.ITEMID = u.ITEMID and r.DATAAREAID = u.DATAAREAID
	left outer join RBOINVENTITEMRETAILGROUP w on u.ITEMGROUP = w.GROUPID and u.DATAAREAID = w.DATAAREAID
	where r.TRANSACTIONSTATUS = 0 and tt.ENTRYSTATUS = 0 and tt.DATAAREAID = @DataareaID and tt.TRANSDATE >= @StartDate and tt.TRANSDATE <= @EndDate
) temp
group by GROUPID, NAME, ITEMID, ITEMNAME, STORE
order by GROUPID, ITEMID

GO