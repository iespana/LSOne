//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.832
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LSOne.ViewPlugins.ReceiptBrowser.Reports
{
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("MemoryData")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class MemoryData : System.Data.DataSet {
        
        private HeaderDataTable tableHeader;
        
        private PaymentsDataTable tablePayments;
        
        private TaxDataTable tableTax;
        
        private LinesDataTable tableLines;
        
        private ItemDiscountDataTable tableItemDiscount;
        
        private ItemCommentDataTable tableItemComment;
        
        private CustomerDataTable tableCustomer;
        
        private InvoicedCustomerDataTable tableInvoicedCustomer;
        
        private System.Data.DataRelation relationLines_ItemDiscount;
        
        private System.Data.DataRelation relationLines_ItemComment;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MemoryData() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected MemoryData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Header"] != null)) {
                    base.Tables.Add(new HeaderDataTable(ds.Tables["Header"]));
                }
                if ((ds.Tables["Payments"] != null)) {
                    base.Tables.Add(new PaymentsDataTable(ds.Tables["Payments"]));
                }
                if ((ds.Tables["Tax"] != null)) {
                    base.Tables.Add(new TaxDataTable(ds.Tables["Tax"]));
                }
                if ((ds.Tables["Lines"] != null)) {
                    base.Tables.Add(new LinesDataTable(ds.Tables["Lines"]));
                }
                if ((ds.Tables["ItemDiscount"] != null)) {
                    base.Tables.Add(new ItemDiscountDataTable(ds.Tables["ItemDiscount"]));
                }
                if ((ds.Tables["ItemComment"] != null)) {
                    base.Tables.Add(new ItemCommentDataTable(ds.Tables["ItemComment"]));
                }
                if ((ds.Tables["Customer"] != null)) {
                    base.Tables.Add(new CustomerDataTable(ds.Tables["Customer"]));
                }
                if ((ds.Tables["InvoicedCustomer"] != null)) {
                    base.Tables.Add(new InvoicedCustomerDataTable(ds.Tables["InvoicedCustomer"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HeaderDataTable Header {
            get {
                return this.tableHeader;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PaymentsDataTable Payments {
            get {
                return this.tablePayments;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TaxDataTable Tax {
            get {
                return this.tableTax;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LinesDataTable Lines {
            get {
                return this.tableLines;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ItemDiscountDataTable ItemDiscount {
            get {
                return this.tableItemDiscount;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ItemCommentDataTable ItemComment {
            get {
                return this.tableItemComment;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CustomerDataTable Customer {
            get {
                return this.tableCustomer;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InvoicedCustomerDataTable InvoicedCustomer {
            get {
                return this.tableInvoicedCustomer;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            MemoryData cln = ((MemoryData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Header"] != null)) {
                    base.Tables.Add(new HeaderDataTable(ds.Tables["Header"]));
                }
                if ((ds.Tables["Payments"] != null)) {
                    base.Tables.Add(new PaymentsDataTable(ds.Tables["Payments"]));
                }
                if ((ds.Tables["Tax"] != null)) {
                    base.Tables.Add(new TaxDataTable(ds.Tables["Tax"]));
                }
                if ((ds.Tables["Lines"] != null)) {
                    base.Tables.Add(new LinesDataTable(ds.Tables["Lines"]));
                }
                if ((ds.Tables["ItemDiscount"] != null)) {
                    base.Tables.Add(new ItemDiscountDataTable(ds.Tables["ItemDiscount"]));
                }
                if ((ds.Tables["ItemComment"] != null)) {
                    base.Tables.Add(new ItemCommentDataTable(ds.Tables["ItemComment"]));
                }
                if ((ds.Tables["Customer"] != null)) {
                    base.Tables.Add(new CustomerDataTable(ds.Tables["Customer"]));
                }
                if ((ds.Tables["InvoicedCustomer"] != null)) {
                    base.Tables.Add(new InvoicedCustomerDataTable(ds.Tables["InvoicedCustomer"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableHeader = ((HeaderDataTable)(base.Tables["Header"]));
            if ((initTable == true)) {
                if ((this.tableHeader != null)) {
                    this.tableHeader.InitVars();
                }
            }
            this.tablePayments = ((PaymentsDataTable)(base.Tables["Payments"]));
            if ((initTable == true)) {
                if ((this.tablePayments != null)) {
                    this.tablePayments.InitVars();
                }
            }
            this.tableTax = ((TaxDataTable)(base.Tables["Tax"]));
            if ((initTable == true)) {
                if ((this.tableTax != null)) {
                    this.tableTax.InitVars();
                }
            }
            this.tableLines = ((LinesDataTable)(base.Tables["Lines"]));
            if ((initTable == true)) {
                if ((this.tableLines != null)) {
                    this.tableLines.InitVars();
                }
            }
            this.tableItemDiscount = ((ItemDiscountDataTable)(base.Tables["ItemDiscount"]));
            if ((initTable == true)) {
                if ((this.tableItemDiscount != null)) {
                    this.tableItemDiscount.InitVars();
                }
            }
            this.tableItemComment = ((ItemCommentDataTable)(base.Tables["ItemComment"]));
            if ((initTable == true)) {
                if ((this.tableItemComment != null)) {
                    this.tableItemComment.InitVars();
                }
            }
            this.tableCustomer = ((CustomerDataTable)(base.Tables["Customer"]));
            if ((initTable == true)) {
                if ((this.tableCustomer != null)) {
                    this.tableCustomer.InitVars();
                }
            }
            this.tableInvoicedCustomer = ((InvoicedCustomerDataTable)(base.Tables["InvoicedCustomer"]));
            if ((initTable == true)) {
                if ((this.tableInvoicedCustomer != null)) {
                    this.tableInvoicedCustomer.InitVars();
                }
            }
            this.relationLines_ItemDiscount = this.Relations["Lines_ItemDiscount"];
            this.relationLines_ItemComment = this.Relations["Lines_ItemComment"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "MemoryData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/MemoryData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableHeader = new HeaderDataTable();
            base.Tables.Add(this.tableHeader);
            this.tablePayments = new PaymentsDataTable();
            base.Tables.Add(this.tablePayments);
            this.tableTax = new TaxDataTable();
            base.Tables.Add(this.tableTax);
            this.tableLines = new LinesDataTable();
            base.Tables.Add(this.tableLines);
            this.tableItemDiscount = new ItemDiscountDataTable();
            base.Tables.Add(this.tableItemDiscount);
            this.tableItemComment = new ItemCommentDataTable();
            base.Tables.Add(this.tableItemComment);
            this.tableCustomer = new CustomerDataTable();
            base.Tables.Add(this.tableCustomer);
            this.tableInvoicedCustomer = new InvoicedCustomerDataTable();
            base.Tables.Add(this.tableInvoicedCustomer);
            this.relationLines_ItemDiscount = new System.Data.DataRelation("Lines_ItemDiscount", new System.Data.DataColumn[] {
                        this.tableLines.LineIDColumn}, new System.Data.DataColumn[] {
                        this.tableItemDiscount.LineIDColumn}, false);
            this.Relations.Add(this.relationLines_ItemDiscount);
            this.relationLines_ItemComment = new System.Data.DataRelation("Lines_ItemComment", new System.Data.DataColumn[] {
                        this.tableLines.LineIDColumn}, new System.Data.DataColumn[] {
                        this.tableItemComment.LineIDColumn}, false);
            this.Relations.Add(this.relationLines_ItemComment);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHeader() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePayments() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTax() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLines() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeItemDiscount() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeItemComment() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCustomer() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInvoicedCustomer() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            MemoryData ds = new MemoryData();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void HeaderRowChangeEventHandler(object sender, HeaderRowChangeEvent e);
        
        public delegate void PaymentsRowChangeEventHandler(object sender, PaymentsRowChangeEvent e);
        
        public delegate void TaxRowChangeEventHandler(object sender, TaxRowChangeEvent e);
        
        public delegate void LinesRowChangeEventHandler(object sender, LinesRowChangeEvent e);
        
        public delegate void ItemDiscountRowChangeEventHandler(object sender, ItemDiscountRowChangeEvent e);
        
        public delegate void ItemCommentRowChangeEventHandler(object sender, ItemCommentRowChangeEvent e);
        
        public delegate void CustomerRowChangeEventHandler(object sender, CustomerRowChangeEvent e);
        
        public delegate void InvoicedCustomerRowChangeEventHandler(object sender, InvoicedCustomerRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HeaderDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTransactionID;
            
            private System.Data.DataColumn columnPosID;
            
            private System.Data.DataColumn columnCashierName;
            
            private System.Data.DataColumn columnDateTime;
            
            private System.Data.DataColumn columnCopyText;
            
            private System.Data.DataColumn columnTotalAmount;
            
            private System.Data.DataColumn columnInvoiceComment;
            
            private System.Data.DataColumn columnPurchRequestId;
            
            private System.Data.DataColumn columnReceiptID;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeaderDataTable() {
                this.TableName = "Header";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HeaderDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HeaderDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TransactionIDColumn {
                get {
                    return this.columnTransactionID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PosIDColumn {
                get {
                    return this.columnPosID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CashierNameColumn {
                get {
                    return this.columnCashierName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateTimeColumn {
                get {
                    return this.columnDateTime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CopyTextColumn {
                get {
                    return this.columnCopyText;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TotalAmountColumn {
                get {
                    return this.columnTotalAmount;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn InvoiceCommentColumn {
                get {
                    return this.columnInvoiceComment;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PurchRequestIdColumn {
                get {
                    return this.columnPurchRequestId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ReceiptIDColumn {
                get {
                    return this.columnReceiptID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeaderRow this[int index] {
                get {
                    return ((HeaderRow)(this.Rows[index]));
                }
            }
            
            public event HeaderRowChangeEventHandler HeaderRowChanging;
            
            public event HeaderRowChangeEventHandler HeaderRowChanged;
            
            public event HeaderRowChangeEventHandler HeaderRowDeleting;
            
            public event HeaderRowChangeEventHandler HeaderRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHeaderRow(HeaderRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeaderRow AddHeaderRow(string TransactionID, string PosID, string CashierName, System.DateTime DateTime, string CopyText, string TotalAmount, string InvoiceComment, string PurchRequestId, string ReceiptID) {
                HeaderRow rowHeaderRow = ((HeaderRow)(this.NewRow()));
                rowHeaderRow.ItemArray = new object[] {
                        TransactionID,
                        PosID,
                        CashierName,
                        DateTime,
                        CopyText,
                        TotalAmount,
                        InvoiceComment,
                        PurchRequestId,
                        ReceiptID};
                this.Rows.Add(rowHeaderRow);
                return rowHeaderRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                HeaderDataTable cln = ((HeaderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new HeaderDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTransactionID = base.Columns["TransactionID"];
                this.columnPosID = base.Columns["PosID"];
                this.columnCashierName = base.Columns["CashierName"];
                this.columnDateTime = base.Columns["DateTime"];
                this.columnCopyText = base.Columns["CopyText"];
                this.columnTotalAmount = base.Columns["TotalAmount"];
                this.columnInvoiceComment = base.Columns["InvoiceComment"];
                this.columnPurchRequestId = base.Columns["PurchRequestId"];
                this.columnReceiptID = base.Columns["ReceiptID"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTransactionID = new System.Data.DataColumn("TransactionID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransactionID);
                this.columnPosID = new System.Data.DataColumn("PosID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPosID);
                this.columnCashierName = new System.Data.DataColumn("CashierName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCashierName);
                this.columnDateTime = new System.Data.DataColumn("DateTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateTime);
                this.columnCopyText = new System.Data.DataColumn("CopyText", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCopyText);
                this.columnTotalAmount = new System.Data.DataColumn("TotalAmount", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalAmount);
                this.columnInvoiceComment = new System.Data.DataColumn("InvoiceComment", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvoiceComment);
                this.columnPurchRequestId = new System.Data.DataColumn("PurchRequestId", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPurchRequestId);
                this.columnReceiptID = new System.Data.DataColumn("ReceiptID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnReceiptID);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeaderRow NewHeaderRow() {
                return ((HeaderRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new HeaderRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(HeaderRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HeaderRowChanged != null)) {
                    this.HeaderRowChanged(this, new HeaderRowChangeEvent(((HeaderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HeaderRowChanging != null)) {
                    this.HeaderRowChanging(this, new HeaderRowChangeEvent(((HeaderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HeaderRowDeleted != null)) {
                    this.HeaderRowDeleted(this, new HeaderRowChangeEvent(((HeaderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HeaderRowDeleting != null)) {
                    this.HeaderRowDeleting(this, new HeaderRowChangeEvent(((HeaderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHeaderRow(HeaderRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MemoryData ds = new MemoryData();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HeaderDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PaymentsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnPaymentID;
            
            private System.Data.DataColumn columnLineID;
            
            private System.Data.DataColumn columnPaymentName;
            
            private System.Data.DataColumn columnPaymentAmount;
            
            private System.Data.DataColumn columnExtraInfo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentsDataTable() {
                this.TableName = "Payments";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PaymentsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PaymentsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PaymentIDColumn {
                get {
                    return this.columnPaymentID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LineIDColumn {
                get {
                    return this.columnLineID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PaymentNameColumn {
                get {
                    return this.columnPaymentName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PaymentAmountColumn {
                get {
                    return this.columnPaymentAmount;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ExtraInfoColumn {
                get {
                    return this.columnExtraInfo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentsRow this[int index] {
                get {
                    return ((PaymentsRow)(this.Rows[index]));
                }
            }
            
            public event PaymentsRowChangeEventHandler PaymentsRowChanging;
            
            public event PaymentsRowChangeEventHandler PaymentsRowChanged;
            
            public event PaymentsRowChangeEventHandler PaymentsRowDeleting;
            
            public event PaymentsRowChangeEventHandler PaymentsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPaymentsRow(PaymentsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentsRow AddPaymentsRow(string PaymentID, string LineID, string PaymentName, string PaymentAmount, string ExtraInfo) {
                PaymentsRow rowPaymentsRow = ((PaymentsRow)(this.NewRow()));
                rowPaymentsRow.ItemArray = new object[] {
                        PaymentID,
                        LineID,
                        PaymentName,
                        PaymentAmount,
                        ExtraInfo};
                this.Rows.Add(rowPaymentsRow);
                return rowPaymentsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PaymentsDataTable cln = ((PaymentsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PaymentsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPaymentID = base.Columns["PaymentID"];
                this.columnLineID = base.Columns["LineID"];
                this.columnPaymentName = base.Columns["PaymentName"];
                this.columnPaymentAmount = base.Columns["PaymentAmount"];
                this.columnExtraInfo = base.Columns["ExtraInfo"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPaymentID = new System.Data.DataColumn("PaymentID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentID);
                this.columnLineID = new System.Data.DataColumn("LineID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLineID);
                this.columnPaymentName = new System.Data.DataColumn("PaymentName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentName);
                this.columnPaymentAmount = new System.Data.DataColumn("PaymentAmount", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentAmount);
                this.columnExtraInfo = new System.Data.DataColumn("ExtraInfo", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnExtraInfo);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentsRow NewPaymentsRow() {
                return ((PaymentsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PaymentsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PaymentsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PaymentsRowChanged != null)) {
                    this.PaymentsRowChanged(this, new PaymentsRowChangeEvent(((PaymentsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PaymentsRowChanging != null)) {
                    this.PaymentsRowChanging(this, new PaymentsRowChangeEvent(((PaymentsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PaymentsRowDeleted != null)) {
                    this.PaymentsRowDeleted(this, new PaymentsRowChangeEvent(((PaymentsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PaymentsRowDeleting != null)) {
                    this.PaymentsRowDeleting(this, new PaymentsRowChangeEvent(((PaymentsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePaymentsRow(PaymentsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MemoryData ds = new MemoryData();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PaymentsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TaxDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTaxCode;
            
            private System.Data.DataColumn columnTaxPercentage;
            
            private System.Data.DataColumn columnTaxAmount;
            
            private System.Data.DataColumn columnTaxOf;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaxDataTable() {
                this.TableName = "Tax";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TaxDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TaxDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TaxCodeColumn {
                get {
                    return this.columnTaxCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TaxPercentageColumn {
                get {
                    return this.columnTaxPercentage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TaxAmountColumn {
                get {
                    return this.columnTaxAmount;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TaxOfColumn {
                get {
                    return this.columnTaxOf;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaxRow this[int index] {
                get {
                    return ((TaxRow)(this.Rows[index]));
                }
            }
            
            public event TaxRowChangeEventHandler TaxRowChanging;
            
            public event TaxRowChangeEventHandler TaxRowChanged;
            
            public event TaxRowChangeEventHandler TaxRowDeleting;
            
            public event TaxRowChangeEventHandler TaxRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTaxRow(TaxRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaxRow AddTaxRow(string TaxCode, decimal TaxPercentage, string TaxAmount, string TaxOf) {
                TaxRow rowTaxRow = ((TaxRow)(this.NewRow()));
                rowTaxRow.ItemArray = new object[] {
                        TaxCode,
                        TaxPercentage,
                        TaxAmount,
                        TaxOf};
                this.Rows.Add(rowTaxRow);
                return rowTaxRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                TaxDataTable cln = ((TaxDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new TaxDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTaxCode = base.Columns["TaxCode"];
                this.columnTaxPercentage = base.Columns["TaxPercentage"];
                this.columnTaxAmount = base.Columns["TaxAmount"];
                this.columnTaxOf = base.Columns["TaxOf"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTaxCode = new System.Data.DataColumn("TaxCode", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxCode);
                this.columnTaxPercentage = new System.Data.DataColumn("TaxPercentage", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxPercentage);
                this.columnTaxAmount = new System.Data.DataColumn("TaxAmount", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxAmount);
                this.columnTaxOf = new System.Data.DataColumn("TaxOf", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxOf);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaxRow NewTaxRow() {
                return ((TaxRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new TaxRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(TaxRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TaxRowChanged != null)) {
                    this.TaxRowChanged(this, new TaxRowChangeEvent(((TaxRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TaxRowChanging != null)) {
                    this.TaxRowChanging(this, new TaxRowChangeEvent(((TaxRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TaxRowDeleted != null)) {
                    this.TaxRowDeleted(this, new TaxRowChangeEvent(((TaxRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TaxRowDeleting != null)) {
                    this.TaxRowDeleting(this, new TaxRowChangeEvent(((TaxRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTaxRow(TaxRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MemoryData ds = new MemoryData();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TaxDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LinesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnItemID;
            
            private System.Data.DataColumn columnLineID;
            
            private System.Data.DataColumn columnItemName;
            
            private System.Data.DataColumn columnPrice;
            
            private System.Data.DataColumn columnTaxCode;
            
            private System.Data.DataColumn columnTotalPrice;
            
            private System.Data.DataColumn columnQuantity;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinesDataTable() {
                this.TableName = "Lines";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LinesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LinesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ItemIDColumn {
                get {
                    return this.columnItemID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LineIDColumn {
                get {
                    return this.columnLineID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ItemNameColumn {
                get {
                    return this.columnItemName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PriceColumn {
                get {
                    return this.columnPrice;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TaxCodeColumn {
                get {
                    return this.columnTaxCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TotalPriceColumn {
                get {
                    return this.columnTotalPrice;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinesRow this[int index] {
                get {
                    return ((LinesRow)(this.Rows[index]));
                }
            }
            
            public event LinesRowChangeEventHandler LinesRowChanging;
            
            public event LinesRowChangeEventHandler LinesRowChanged;
            
            public event LinesRowChangeEventHandler LinesRowDeleting;
            
            public event LinesRowChangeEventHandler LinesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLinesRow(LinesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinesRow AddLinesRow(string ItemID, int LineID, string ItemName, string Price, string TaxCode, string TotalPrice, string Quantity) {
                LinesRow rowLinesRow = ((LinesRow)(this.NewRow()));
                rowLinesRow.ItemArray = new object[] {
                        ItemID,
                        LineID,
                        ItemName,
                        Price,
                        TaxCode,
                        TotalPrice,
                        Quantity};
                this.Rows.Add(rowLinesRow);
                return rowLinesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinesRow FindByLineID(int LineID) {
                return ((LinesRow)(this.Rows.Find(new object[] {
                            LineID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                LinesDataTable cln = ((LinesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new LinesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnItemID = base.Columns["ItemID"];
                this.columnLineID = base.Columns["LineID"];
                this.columnItemName = base.Columns["ItemName"];
                this.columnPrice = base.Columns["Price"];
                this.columnTaxCode = base.Columns["TaxCode"];
                this.columnTotalPrice = base.Columns["TotalPrice"];
                this.columnQuantity = base.Columns["Quantity"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnItemID = new System.Data.DataColumn("ItemID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemID);
                this.columnLineID = new System.Data.DataColumn("LineID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLineID);
                this.columnItemName = new System.Data.DataColumn("ItemName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemName);
                this.columnPrice = new System.Data.DataColumn("Price", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrice);
                this.columnTaxCode = new System.Data.DataColumn("TaxCode", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxCode);
                this.columnTotalPrice = new System.Data.DataColumn("TotalPrice", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalPrice);
                this.columnQuantity = new System.Data.DataColumn("Quantity", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnLineID}, true));
                this.columnItemID.AllowDBNull = false;
                this.columnLineID.AllowDBNull = false;
                this.columnLineID.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinesRow NewLinesRow() {
                return ((LinesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new LinesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(LinesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LinesRowChanged != null)) {
                    this.LinesRowChanged(this, new LinesRowChangeEvent(((LinesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LinesRowChanging != null)) {
                    this.LinesRowChanging(this, new LinesRowChangeEvent(((LinesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LinesRowDeleted != null)) {
                    this.LinesRowDeleted(this, new LinesRowChangeEvent(((LinesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LinesRowDeleting != null)) {
                    this.LinesRowDeleting(this, new LinesRowChangeEvent(((LinesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLinesRow(LinesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MemoryData ds = new MemoryData();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LinesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ItemDiscountDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnItemID;
            
            private System.Data.DataColumn columnLineID;
            
            private System.Data.DataColumn columnDiscountText;
            
            private System.Data.DataColumn columnDiscountAmount;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemDiscountDataTable() {
                this.TableName = "ItemDiscount";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ItemDiscountDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ItemDiscountDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ItemIDColumn {
                get {
                    return this.columnItemID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LineIDColumn {
                get {
                    return this.columnLineID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DiscountTextColumn {
                get {
                    return this.columnDiscountText;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DiscountAmountColumn {
                get {
                    return this.columnDiscountAmount;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemDiscountRow this[int index] {
                get {
                    return ((ItemDiscountRow)(this.Rows[index]));
                }
            }
            
            public event ItemDiscountRowChangeEventHandler ItemDiscountRowChanging;
            
            public event ItemDiscountRowChangeEventHandler ItemDiscountRowChanged;
            
            public event ItemDiscountRowChangeEventHandler ItemDiscountRowDeleting;
            
            public event ItemDiscountRowChangeEventHandler ItemDiscountRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddItemDiscountRow(ItemDiscountRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemDiscountRow AddItemDiscountRow(string ItemID, LinesRow parentLinesRowByLines_ItemDiscount, string DiscountText, string DiscountAmount) {
                ItemDiscountRow rowItemDiscountRow = ((ItemDiscountRow)(this.NewRow()));
                rowItemDiscountRow.ItemArray = new object[] {
                        ItemID,
                        parentLinesRowByLines_ItemDiscount[1],
                        DiscountText,
                        DiscountAmount};
                this.Rows.Add(rowItemDiscountRow);
                return rowItemDiscountRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ItemDiscountDataTable cln = ((ItemDiscountDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ItemDiscountDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnItemID = base.Columns["ItemID"];
                this.columnLineID = base.Columns["LineID"];
                this.columnDiscountText = base.Columns["DiscountText"];
                this.columnDiscountAmount = base.Columns["DiscountAmount"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnItemID = new System.Data.DataColumn("ItemID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemID);
                this.columnLineID = new System.Data.DataColumn("LineID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLineID);
                this.columnDiscountText = new System.Data.DataColumn("DiscountText", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiscountText);
                this.columnDiscountAmount = new System.Data.DataColumn("DiscountAmount", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiscountAmount);
                this.columnItemID.AllowDBNull = false;
                this.columnLineID.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemDiscountRow NewItemDiscountRow() {
                return ((ItemDiscountRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ItemDiscountRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ItemDiscountRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ItemDiscountRowChanged != null)) {
                    this.ItemDiscountRowChanged(this, new ItemDiscountRowChangeEvent(((ItemDiscountRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ItemDiscountRowChanging != null)) {
                    this.ItemDiscountRowChanging(this, new ItemDiscountRowChangeEvent(((ItemDiscountRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ItemDiscountRowDeleted != null)) {
                    this.ItemDiscountRowDeleted(this, new ItemDiscountRowChangeEvent(((ItemDiscountRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ItemDiscountRowDeleting != null)) {
                    this.ItemDiscountRowDeleting(this, new ItemDiscountRowChangeEvent(((ItemDiscountRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveItemDiscountRow(ItemDiscountRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MemoryData ds = new MemoryData();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ItemDiscountDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ItemCommentDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnItemComment;
            
            private System.Data.DataColumn columnItemID;
            
            private System.Data.DataColumn columnLineID;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemCommentDataTable() {
                this.TableName = "ItemComment";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ItemCommentDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ItemCommentDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ItemCommentColumn {
                get {
                    return this.columnItemComment;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ItemIDColumn {
                get {
                    return this.columnItemID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LineIDColumn {
                get {
                    return this.columnLineID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemCommentRow this[int index] {
                get {
                    return ((ItemCommentRow)(this.Rows[index]));
                }
            }
            
            public event ItemCommentRowChangeEventHandler ItemCommentRowChanging;
            
            public event ItemCommentRowChangeEventHandler ItemCommentRowChanged;
            
            public event ItemCommentRowChangeEventHandler ItemCommentRowDeleting;
            
            public event ItemCommentRowChangeEventHandler ItemCommentRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddItemCommentRow(ItemCommentRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemCommentRow AddItemCommentRow(string ItemComment, string ItemID, LinesRow parentLinesRowByLines_ItemComment) {
                ItemCommentRow rowItemCommentRow = ((ItemCommentRow)(this.NewRow()));
                rowItemCommentRow.ItemArray = new object[] {
                        ItemComment,
                        ItemID,
                        parentLinesRowByLines_ItemComment[1]};
                this.Rows.Add(rowItemCommentRow);
                return rowItemCommentRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ItemCommentDataTable cln = ((ItemCommentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ItemCommentDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnItemComment = base.Columns["ItemComment"];
                this.columnItemID = base.Columns["ItemID"];
                this.columnLineID = base.Columns["LineID"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnItemComment = new System.Data.DataColumn("ItemComment", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemComment);
                this.columnItemID = new System.Data.DataColumn("ItemID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemID);
                this.columnLineID = new System.Data.DataColumn("LineID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLineID);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemCommentRow NewItemCommentRow() {
                return ((ItemCommentRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ItemCommentRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ItemCommentRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ItemCommentRowChanged != null)) {
                    this.ItemCommentRowChanged(this, new ItemCommentRowChangeEvent(((ItemCommentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ItemCommentRowChanging != null)) {
                    this.ItemCommentRowChanging(this, new ItemCommentRowChangeEvent(((ItemCommentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ItemCommentRowDeleted != null)) {
                    this.ItemCommentRowDeleted(this, new ItemCommentRowChangeEvent(((ItemCommentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ItemCommentRowDeleting != null)) {
                    this.ItemCommentRowDeleting(this, new ItemCommentRowChangeEvent(((ItemCommentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveItemCommentRow(ItemCommentRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MemoryData ds = new MemoryData();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ItemCommentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CustomerDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnAccount;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnAddress;
            
            private System.Data.DataColumn columnOrgId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerDataTable() {
                this.TableName = "Customer";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CustomerDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CustomerDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AccountColumn {
                get {
                    return this.columnAccount;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OrgIdColumn {
                get {
                    return this.columnOrgId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerRow this[int index] {
                get {
                    return ((CustomerRow)(this.Rows[index]));
                }
            }
            
            public event CustomerRowChangeEventHandler CustomerRowChanging;
            
            public event CustomerRowChangeEventHandler CustomerRowChanged;
            
            public event CustomerRowChangeEventHandler CustomerRowDeleting;
            
            public event CustomerRowChangeEventHandler CustomerRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCustomerRow(CustomerRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerRow AddCustomerRow(string Account, string Name, string Address, string OrgId) {
                CustomerRow rowCustomerRow = ((CustomerRow)(this.NewRow()));
                rowCustomerRow.ItemArray = new object[] {
                        Account,
                        Name,
                        Address,
                        OrgId};
                this.Rows.Add(rowCustomerRow);
                return rowCustomerRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CustomerDataTable cln = ((CustomerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CustomerDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAccount = base.Columns["Account"];
                this.columnName = base.Columns["Name"];
                this.columnAddress = base.Columns["Address"];
                this.columnOrgId = base.Columns["OrgId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAccount = new System.Data.DataColumn("Account", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccount);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnAddress = new System.Data.DataColumn("Address", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnOrgId = new System.Data.DataColumn("OrgId", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrgId);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerRow NewCustomerRow() {
                return ((CustomerRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CustomerRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CustomerRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CustomerRowChanged != null)) {
                    this.CustomerRowChanged(this, new CustomerRowChangeEvent(((CustomerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CustomerRowChanging != null)) {
                    this.CustomerRowChanging(this, new CustomerRowChangeEvent(((CustomerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CustomerRowDeleted != null)) {
                    this.CustomerRowDeleted(this, new CustomerRowChangeEvent(((CustomerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CustomerRowDeleting != null)) {
                    this.CustomerRowDeleting(this, new CustomerRowChangeEvent(((CustomerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCustomerRow(CustomerRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MemoryData ds = new MemoryData();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CustomerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InvoicedCustomerDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnAccount;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnAddress;
            
            private System.Data.DataColumn columnOrgId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoicedCustomerDataTable() {
                this.TableName = "InvoicedCustomer";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InvoicedCustomerDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InvoicedCustomerDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AccountColumn {
                get {
                    return this.columnAccount;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OrgIdColumn {
                get {
                    return this.columnOrgId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoicedCustomerRow this[int index] {
                get {
                    return ((InvoicedCustomerRow)(this.Rows[index]));
                }
            }
            
            public event InvoicedCustomerRowChangeEventHandler InvoicedCustomerRowChanging;
            
            public event InvoicedCustomerRowChangeEventHandler InvoicedCustomerRowChanged;
            
            public event InvoicedCustomerRowChangeEventHandler InvoicedCustomerRowDeleting;
            
            public event InvoicedCustomerRowChangeEventHandler InvoicedCustomerRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInvoicedCustomerRow(InvoicedCustomerRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoicedCustomerRow AddInvoicedCustomerRow(string Account, string Name, string Address, string OrgId) {
                InvoicedCustomerRow rowInvoicedCustomerRow = ((InvoicedCustomerRow)(this.NewRow()));
                rowInvoicedCustomerRow.ItemArray = new object[] {
                        Account,
                        Name,
                        Address,
                        OrgId};
                this.Rows.Add(rowInvoicedCustomerRow);
                return rowInvoicedCustomerRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                InvoicedCustomerDataTable cln = ((InvoicedCustomerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new InvoicedCustomerDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAccount = base.Columns["Account"];
                this.columnName = base.Columns["Name"];
                this.columnAddress = base.Columns["Address"];
                this.columnOrgId = base.Columns["OrgId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAccount = new System.Data.DataColumn("Account", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccount);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnAddress = new System.Data.DataColumn("Address", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnOrgId = new System.Data.DataColumn("OrgId", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrgId);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoicedCustomerRow NewInvoicedCustomerRow() {
                return ((InvoicedCustomerRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new InvoicedCustomerRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(InvoicedCustomerRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InvoicedCustomerRowChanged != null)) {
                    this.InvoicedCustomerRowChanged(this, new InvoicedCustomerRowChangeEvent(((InvoicedCustomerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InvoicedCustomerRowChanging != null)) {
                    this.InvoicedCustomerRowChanging(this, new InvoicedCustomerRowChangeEvent(((InvoicedCustomerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InvoicedCustomerRowDeleted != null)) {
                    this.InvoicedCustomerRowDeleted(this, new InvoicedCustomerRowChangeEvent(((InvoicedCustomerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InvoicedCustomerRowDeleting != null)) {
                    this.InvoicedCustomerRowDeleting(this, new InvoicedCustomerRowChangeEvent(((InvoicedCustomerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInvoicedCustomerRow(InvoicedCustomerRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                MemoryData ds = new MemoryData();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InvoicedCustomerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HeaderRow : System.Data.DataRow {
            
            private HeaderDataTable tableHeader;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HeaderRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHeader = ((HeaderDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TransactionID {
                get {
                    try {
                        return ((string)(this[this.tableHeader.TransactionIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TransactionID\' in table \'Header\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.TransactionIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PosID {
                get {
                    try {
                        return ((string)(this[this.tableHeader.PosIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PosID\' in table \'Header\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.PosIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CashierName {
                get {
                    try {
                        return ((string)(this[this.tableHeader.CashierNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CashierName\' in table \'Header\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.CashierNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateTime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableHeader.DateTimeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateTime\' in table \'Header\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.DateTimeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CopyText {
                get {
                    try {
                        return ((string)(this[this.tableHeader.CopyTextColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CopyText\' in table \'Header\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.CopyTextColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalAmount {
                get {
                    try {
                        return ((string)(this[this.tableHeader.TotalAmountColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TotalAmount\' in table \'Header\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.TotalAmountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InvoiceComment {
                get {
                    try {
                        return ((string)(this[this.tableHeader.InvoiceCommentColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'InvoiceComment\' in table \'Header\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.InvoiceCommentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PurchRequestId {
                get {
                    try {
                        return ((string)(this[this.tableHeader.PurchRequestIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PurchRequestId\' in table \'Header\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.PurchRequestIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReceiptID {
                get {
                    try {
                        return ((string)(this[this.tableHeader.ReceiptIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ReceiptID\' in table \'Header\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHeader.ReceiptIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTransactionIDNull() {
                return this.IsNull(this.tableHeader.TransactionIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTransactionIDNull() {
                this[this.tableHeader.TransactionIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPosIDNull() {
                return this.IsNull(this.tableHeader.PosIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPosIDNull() {
                this[this.tableHeader.PosIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCashierNameNull() {
                return this.IsNull(this.tableHeader.CashierNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCashierNameNull() {
                this[this.tableHeader.CashierNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateTimeNull() {
                return this.IsNull(this.tableHeader.DateTimeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateTimeNull() {
                this[this.tableHeader.DateTimeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCopyTextNull() {
                return this.IsNull(this.tableHeader.CopyTextColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCopyTextNull() {
                this[this.tableHeader.CopyTextColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalAmountNull() {
                return this.IsNull(this.tableHeader.TotalAmountColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalAmountNull() {
                this[this.tableHeader.TotalAmountColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInvoiceCommentNull() {
                return this.IsNull(this.tableHeader.InvoiceCommentColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInvoiceCommentNull() {
                this[this.tableHeader.InvoiceCommentColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPurchRequestIdNull() {
                return this.IsNull(this.tableHeader.PurchRequestIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPurchRequestIdNull() {
                this[this.tableHeader.PurchRequestIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReceiptIDNull() {
                return this.IsNull(this.tableHeader.ReceiptIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReceiptIDNull() {
                this[this.tableHeader.ReceiptIDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PaymentsRow : System.Data.DataRow {
            
            private PaymentsDataTable tablePayments;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PaymentsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePayments = ((PaymentsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PaymentID {
                get {
                    try {
                        return ((string)(this[this.tablePayments.PaymentIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PaymentID\' in table \'Payments\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePayments.PaymentIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LineID {
                get {
                    try {
                        return ((string)(this[this.tablePayments.LineIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LineID\' in table \'Payments\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePayments.LineIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PaymentName {
                get {
                    try {
                        return ((string)(this[this.tablePayments.PaymentNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PaymentName\' in table \'Payments\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePayments.PaymentNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PaymentAmount {
                get {
                    try {
                        return ((string)(this[this.tablePayments.PaymentAmountColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PaymentAmount\' in table \'Payments\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePayments.PaymentAmountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExtraInfo {
                get {
                    try {
                        return ((string)(this[this.tablePayments.ExtraInfoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ExtraInfo\' in table \'Payments\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePayments.ExtraInfoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentIDNull() {
                return this.IsNull(this.tablePayments.PaymentIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentIDNull() {
                this[this.tablePayments.PaymentIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLineIDNull() {
                return this.IsNull(this.tablePayments.LineIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLineIDNull() {
                this[this.tablePayments.LineIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentNameNull() {
                return this.IsNull(this.tablePayments.PaymentNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentNameNull() {
                this[this.tablePayments.PaymentNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentAmountNull() {
                return this.IsNull(this.tablePayments.PaymentAmountColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentAmountNull() {
                this[this.tablePayments.PaymentAmountColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExtraInfoNull() {
                return this.IsNull(this.tablePayments.ExtraInfoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExtraInfoNull() {
                this[this.tablePayments.ExtraInfoColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TaxRow : System.Data.DataRow {
            
            private TaxDataTable tableTax;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TaxRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTax = ((TaxDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TaxCode {
                get {
                    try {
                        return ((string)(this[this.tableTax.TaxCodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TaxCode\' in table \'Tax\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTax.TaxCodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TaxPercentage {
                get {
                    try {
                        return ((decimal)(this[this.tableTax.TaxPercentageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TaxPercentage\' in table \'Tax\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTax.TaxPercentageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TaxAmount {
                get {
                    try {
                        return ((string)(this[this.tableTax.TaxAmountColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TaxAmount\' in table \'Tax\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTax.TaxAmountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TaxOf {
                get {
                    try {
                        return ((string)(this[this.tableTax.TaxOfColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TaxOf\' in table \'Tax\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTax.TaxOfColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxCodeNull() {
                return this.IsNull(this.tableTax.TaxCodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxCodeNull() {
                this[this.tableTax.TaxCodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxPercentageNull() {
                return this.IsNull(this.tableTax.TaxPercentageColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxPercentageNull() {
                this[this.tableTax.TaxPercentageColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxAmountNull() {
                return this.IsNull(this.tableTax.TaxAmountColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxAmountNull() {
                this[this.tableTax.TaxAmountColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxOfNull() {
                return this.IsNull(this.tableTax.TaxOfColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxOfNull() {
                this[this.tableTax.TaxOfColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LinesRow : System.Data.DataRow {
            
            private LinesDataTable tableLines;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LinesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLines = ((LinesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemID {
                get {
                    return ((string)(this[this.tableLines.ItemIDColumn]));
                }
                set {
                    this[this.tableLines.ItemIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LineID {
                get {
                    return ((int)(this[this.tableLines.LineIDColumn]));
                }
                set {
                    this[this.tableLines.LineIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemName {
                get {
                    try {
                        return ((string)(this[this.tableLines.ItemNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ItemName\' in table \'Lines\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLines.ItemNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Price {
                get {
                    try {
                        return ((string)(this[this.tableLines.PriceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Price\' in table \'Lines\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLines.PriceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TaxCode {
                get {
                    try {
                        return ((string)(this[this.tableLines.TaxCodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TaxCode\' in table \'Lines\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLines.TaxCodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalPrice {
                get {
                    try {
                        return ((string)(this[this.tableLines.TotalPriceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TotalPrice\' in table \'Lines\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLines.TotalPriceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Quantity {
                get {
                    try {
                        return ((string)(this[this.tableLines.QuantityColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Quantity\' in table \'Lines\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLines.QuantityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemNameNull() {
                return this.IsNull(this.tableLines.ItemNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemNameNull() {
                this[this.tableLines.ItemNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPriceNull() {
                return this.IsNull(this.tableLines.PriceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPriceNull() {
                this[this.tableLines.PriceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxCodeNull() {
                return this.IsNull(this.tableLines.TaxCodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxCodeNull() {
                this[this.tableLines.TaxCodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalPriceNull() {
                return this.IsNull(this.tableLines.TotalPriceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalPriceNull() {
                this[this.tableLines.TotalPriceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQuantityNull() {
                return this.IsNull(this.tableLines.QuantityColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQuantityNull() {
                this[this.tableLines.QuantityColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemDiscountRow[] GetItemDiscountRows() {
                return ((ItemDiscountRow[])(base.GetChildRows(this.Table.ChildRelations["Lines_ItemDiscount"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemCommentRow[] GetItemCommentRows() {
                return ((ItemCommentRow[])(base.GetChildRows(this.Table.ChildRelations["Lines_ItemComment"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ItemDiscountRow : System.Data.DataRow {
            
            private ItemDiscountDataTable tableItemDiscount;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ItemDiscountRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableItemDiscount = ((ItemDiscountDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemID {
                get {
                    return ((string)(this[this.tableItemDiscount.ItemIDColumn]));
                }
                set {
                    this[this.tableItemDiscount.ItemIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LineID {
                get {
                    return ((int)(this[this.tableItemDiscount.LineIDColumn]));
                }
                set {
                    this[this.tableItemDiscount.LineIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DiscountText {
                get {
                    try {
                        return ((string)(this[this.tableItemDiscount.DiscountTextColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DiscountText\' in table \'ItemDiscount\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItemDiscount.DiscountTextColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DiscountAmount {
                get {
                    try {
                        return ((string)(this[this.tableItemDiscount.DiscountAmountColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DiscountAmount\' in table \'ItemDiscount\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItemDiscount.DiscountAmountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinesRow LinesRow {
                get {
                    return ((LinesRow)(this.GetParentRow(this.Table.ParentRelations["Lines_ItemDiscount"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Lines_ItemDiscount"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiscountTextNull() {
                return this.IsNull(this.tableItemDiscount.DiscountTextColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiscountTextNull() {
                this[this.tableItemDiscount.DiscountTextColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiscountAmountNull() {
                return this.IsNull(this.tableItemDiscount.DiscountAmountColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiscountAmountNull() {
                this[this.tableItemDiscount.DiscountAmountColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ItemCommentRow : System.Data.DataRow {
            
            private ItemCommentDataTable tableItemComment;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ItemCommentRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableItemComment = ((ItemCommentDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemComment {
                get {
                    try {
                        return ((string)(this[this.tableItemComment.ItemCommentColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ItemComment\' in table \'ItemComment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItemComment.ItemCommentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemID {
                get {
                    try {
                        return ((string)(this[this.tableItemComment.ItemIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ItemID\' in table \'ItemComment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItemComment.ItemIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LineID {
                get {
                    try {
                        return ((int)(this[this.tableItemComment.LineIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LineID\' in table \'ItemComment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableItemComment.LineIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinesRow LinesRow {
                get {
                    return ((LinesRow)(this.GetParentRow(this.Table.ParentRelations["Lines_ItemComment"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Lines_ItemComment"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemCommentNull() {
                return this.IsNull(this.tableItemComment.ItemCommentColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemCommentNull() {
                this[this.tableItemComment.ItemCommentColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsItemIDNull() {
                return this.IsNull(this.tableItemComment.ItemIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetItemIDNull() {
                this[this.tableItemComment.ItemIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLineIDNull() {
                return this.IsNull(this.tableItemComment.LineIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLineIDNull() {
                this[this.tableItemComment.LineIDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CustomerRow : System.Data.DataRow {
            
            private CustomerDataTable tableCustomer;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CustomerRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCustomer = ((CustomerDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Account {
                get {
                    try {
                        return ((string)(this[this.tableCustomer.AccountColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Account\' in table \'Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.AccountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableCustomer.NameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Name\' in table \'Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableCustomer.AddressColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Address\' in table \'Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.AddressColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OrgId {
                get {
                    try {
                        return ((string)(this[this.tableCustomer.OrgIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OrgId\' in table \'Customer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCustomer.OrgIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccountNull() {
                return this.IsNull(this.tableCustomer.AccountColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccountNull() {
                this[this.tableCustomer.AccountColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableCustomer.NameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableCustomer.NameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tableCustomer.AddressColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tableCustomer.AddressColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrgIdNull() {
                return this.IsNull(this.tableCustomer.OrgIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrgIdNull() {
                this[this.tableCustomer.OrgIdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InvoicedCustomerRow : System.Data.DataRow {
            
            private InvoicedCustomerDataTable tableInvoicedCustomer;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InvoicedCustomerRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInvoicedCustomer = ((InvoicedCustomerDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Account {
                get {
                    try {
                        return ((string)(this[this.tableInvoicedCustomer.AccountColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Account\' in table \'InvoicedCustomer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoicedCustomer.AccountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableInvoicedCustomer.NameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Name\' in table \'InvoicedCustomer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoicedCustomer.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableInvoicedCustomer.AddressColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Address\' in table \'InvoicedCustomer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoicedCustomer.AddressColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OrgId {
                get {
                    try {
                        return ((string)(this[this.tableInvoicedCustomer.OrgIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OrgId\' in table \'InvoicedCustomer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvoicedCustomer.OrgIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccountNull() {
                return this.IsNull(this.tableInvoicedCustomer.AccountColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccountNull() {
                this[this.tableInvoicedCustomer.AccountColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableInvoicedCustomer.NameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableInvoicedCustomer.NameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tableInvoicedCustomer.AddressColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tableInvoicedCustomer.AddressColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrgIdNull() {
                return this.IsNull(this.tableInvoicedCustomer.OrgIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrgIdNull() {
                this[this.tableInvoicedCustomer.OrgIdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HeaderRowChangeEvent : System.EventArgs {
            
            private HeaderRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeaderRowChangeEvent(HeaderRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HeaderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PaymentsRowChangeEvent : System.EventArgs {
            
            private PaymentsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentsRowChangeEvent(PaymentsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TaxRowChangeEvent : System.EventArgs {
            
            private TaxRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaxRowChangeEvent(TaxRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaxRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LinesRowChangeEvent : System.EventArgs {
            
            private LinesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinesRowChangeEvent(LinesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ItemDiscountRowChangeEvent : System.EventArgs {
            
            private ItemDiscountRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemDiscountRowChangeEvent(ItemDiscountRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemDiscountRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ItemCommentRowChangeEvent : System.EventArgs {
            
            private ItemCommentRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemCommentRowChangeEvent(ItemCommentRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItemCommentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CustomerRowChangeEvent : System.EventArgs {
            
            private CustomerRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerRowChangeEvent(CustomerRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InvoicedCustomerRowChangeEvent : System.EventArgs {
            
            private InvoicedCustomerRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoicedCustomerRowChangeEvent(InvoicedCustomerRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvoicedCustomerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591