<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LSOne.Services.Interfaces</name>
    </assembly>
    <members>
        <member name="T:LSOne.Services.Interfaces.AsyncResults.CompletedAsyncResult`1">
            <summary>
            Basic implementation of the IAsyncResult
            </summary>
            <typeparam name="T">Generic data type used for return</typeparam>
        </member>
        <member name="M:LSOne.Services.Interfaces.AsyncResults.CompletedAsyncResult`1.#ctor(`0,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="data">Data returned by the async operation</param>
            <param name="asyncState">Task state identifier</param>
        </member>
        <member name="P:LSOne.Services.Interfaces.AsyncResults.CompletedAsyncResult`1.Data">
            <summary>
            Generic data returned by the async operation
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.AsyncResults.CompletedAsyncResult`1.IsCompleted">
            <summary>
            True if the async operation completed succesfully. This must be true in order for the End event to be triggered
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.AsyncResults.CompletedAsyncResult`1.AsyncWaitHandle">
            <summary>
            Handler used to wait for a task
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.AsyncResults.CompletedAsyncResult`1.AsyncState">
            <summary>
            Task async state identifier
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.AsyncResults.CompletedAsyncResult`1.CompletedSynchronously">
            <summary>
            True if a synchronous version of a method was found and called instead of the Begin method of the async pattern
            </summary>
        </member>
        <member name="T:LSOne.Services.Interfaces.Constants.IntegrationFrameworkConstants">
            <summary>
            Integration Frameworks constants (service endpoints)
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Constants.KDSLSOneWebServiceConstants.EndpointName">
            <summary>
            The wcf endpoint name
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Constants.KDSLSOneWebServiceConstants.KDSHttpPort">
            <summary>
            KDS Web service setting name for http/https port.
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Constants.KDSLSOneWebServiceConstants.KDSCertificateThumbnail">
            <summary>
            KDS web service setting name for the ssl certificate thumbnail required by https binding.
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Constants.KDSLSOneWebServiceConstants.KDSCertificateStoreLocation">
            <summary>
            KDS web service setting name for the ssl certificate store location (e.g. LocalMachine)
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Constants.KDSLSOneWebServiceConstants.KDSCertificateStoreName">
            <summary>
            KDS web service setting name for the ssl certificate store name (e.g. TrustedPeople)
            </summary>
        </member>
        <member name="T:LSOne.Services.Interfaces.Constants.SiteServiceConfigurationConstants">
            <summary>
            Site Service settings names (defined as string constants).
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Constants.SiteServiceConfigurationConstants.NetTcpTimeout">
            <summary>
            Send timeout setting name for <see cref="T:System.ServiceModel.NetTcpBinding"/>
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Constants.SiteServiceConfigurationConstants.Administration">
            <summary>
            Administrative password setting name.
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Constants.SiteServiceConfigurationConstants.AdministrationTimeout">
            <summary>
            Administrative session timeout setting name.
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Constants.SiteServiceConfigurationConstants.IFEnableMex">
            <summary>
            Integration framework setting name for enabling service discovery (mex binding).
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Constants.SiteServiceConfigurationConstants.IFEnableHttpEndpoint">
            <summary>
            Integration framework setting name for enabling web http/https endpoint (default is net/tcp).
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Constants.SiteServiceConfigurationConstants.IFHttpPort">
            <summary>
            Integration framework setting name for http/https port.
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Constants.SiteServiceConfigurationConstants.IFEnableNetTcpEndpoint">
            <summary>
            Integration framework setting name for enabling net/tcp endpoint.
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Constants.SiteServiceConfigurationConstants.IFNetTcpPort">
            <summary>
            Integration framework setting name for net/tcp port.
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Constants.SiteServiceConfigurationConstants.IFEnforceHttps">
            <summary>
            Integration framework setting name for enforcing all communication to be done on https.
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Constants.SiteServiceConfigurationConstants.IFCertificateThumbnail">
            <summary>
            Integration framework setting name for the ssl certificate thumbnail required by https binding.
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Constants.SiteServiceConfigurationConstants.IFCertificateStoreLocation">
            <summary>
            Integration framework setting name for the ssl certificate store location (e.g. LocalMachine)
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Constants.SiteServiceConfigurationConstants.IFCertificateStoreName">
            <summary>
            Integration framework setting name for the ssl certificate store name (e.g. TrustedPeople)
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Constants.SiteServiceConfigurationConstants.SiteServicePluginOverride">
            <summary>
            Setting that controls which site service plugin will start. Only one instance of site service can be active at a time.
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Constants.SiteServiceConfigurationConstants.DaysToKeepLogs">
            <summary>
            How many days should site service logs be kept. Any log files older that this setting will be deleted at regular intervals.
            </summary>
        </member>
        <member name="T:LSOne.Services.Interfaces.Enums.EFT.EFTCardTypes">
            <summary>
            EFT Card types
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.EFT.EFTCardTypes.DEBIT_CARD">
            <summary>
            1
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.EFT.EFTCardTypes.CREDIT_CARD">
            <summary>
            CREDIT_CARD
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.EFT.EFTCardTypes.UNKNOWN">
            <summary>
            UNKNOWN
            </summary>
        </member>
        <member name="T:LSOne.Services.Interfaces.Enums.EFT.IssueNumber">
            <summary>
            The type of plastic card.
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.EFT.IssueNumber.Visa">
            <summary>
            1
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.EFT.IssueNumber.Mastercard">
            <summary>
            2
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.EFT.IssueNumber.Electron">
            <summary>
            3
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.EFT.IssueNumber.Maestro">
            <summary>
            4
            </summary>
        </member>
        <member name="T:LSOne.Services.Interfaces.Enums.EFT.TransactionType">
            <summary>
            
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.EFT.TransactionType.NormalSale">
            <summary>
            1
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.EFT.TransactionType.VoidTransaction">
            <summary>
            2
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.EFT.TransactionType.Refund">
            <summary>
            3
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.EFT.TransactionType.Mailorder">
            <summary>
            4
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.EFT.TransactionType.OfflineTransaction">
            <summary>
            5
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.EFT.TransactionType.PreAuth">
            <summary>
            6
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.EFT.TransactionType.ManualCallForAuthorisation">
            <summary>
            7
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.EFT.TransactionType.SerialPayment">
            <summary>
            8
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.EFT.TransactionType.ConfirmationForVendingMachines">
            <summary>
            9
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.EFT.TransactionType.ReservedForPOINT">
            <summary>
            10
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.EFT.TransactionType.SerialPaymentContract">
            <summary>
            11
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.EFT.TransactionType.ValidateCard">
            <summary>
            19
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.EFT.TransactionType.AuthorisationConfirmation">
            <summary>
            99
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.EFT.TransactionType.BatchAmount">
            <summary>
            30
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.EFT.TransactionType.CurrentBatchNumber">
            <summary>
            31
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.EFT.TransactionType.IncreaseBatchNumber">
            <summary>
            32
            </summary>
        </member>
        <member name="T:LSOne.Services.Interfaces.Enums.TradeAgreementPriceType">
            <summary>
            Type of the price
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.TradeAgreementPriceType.BasePrice">
            <summary>
            Base price of the item
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.TradeAgreementPriceType.SalesPrice">
            <summary>
            Item sales price
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.TradeAgreementPriceType.Promotion">
            <summary>
            Promotion price
            </summary>
        </member>
        <member name="T:LSOne.Services.Interfaces.Enums.PriceDiscType">
            <summary>
            Enum specifying the type of a discount. Values stored in the table PRICEDISCTABLE, column 'RELATION'.
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.PriceDiscType.PricePurch">
            <summary>
            currently not used
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.PriceDiscType.LineDiscPurch">
            <summary>
            currently not used
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.PriceDiscType.MultiLineDiscPurch">
            <summary>
            currently not used
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.PriceDiscType.EndDiscPurch">
            <summary>
            currently not used
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.PriceDiscType.PriceSales">
            <summary>
            usual netto price. currently not used
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.PriceDiscType.LineDiscSales">
            <summary>
            Predefined line discount for an item.
            Line Discount = 5
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.PriceDiscType.MultiLineDiscSales">
            <summary>
            Predefined discount for the multiple of a certain item.
            Multiline Discount = 6
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.PriceDiscType.EndDiscSales">
            <summary>
            Total discount value granted at the end of a transaction (globally) retroactive to each item.
            Total Discount = 7
            </summary>
        </member>
        <member name="T:LSOne.Services.Interfaces.Enums.PriceDiscItemCode">
            <summary>
            Enables to grant a discount with regard to an item, a superordinate item group or to all items.
            Refers to table PriceDiscTable.ItemCode. The itemcode can have three values:
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.PriceDiscItemCode.Table">
            <summary>
            0 (Item)
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.PriceDiscItemCode.GroupId">
            <summary>
            1 (Group)
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.PriceDiscItemCode.All">
            <summary>
            2, (All)
            </summary>
        </member>
        <member name="T:LSOne.Services.Interfaces.Enums.PriceDiscAccountCode">
            <summary>
            Enables to grant a discount with regard to a customer, a superordinate customer group or to all customers.
            Refers to table PriceDiscTable.AccountCode. The field can have three values:
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.PriceDiscAccountCode.Table">
            <summary>
            0 (Customer)
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.PriceDiscAccountCode.GroupId">
            <summary>
            1 (Group)
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.PriceDiscAccountCode.All">
            <summary>
            2 (All customers)
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.DiscountTypes.Customer">
            <summary>
            0
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.DiscountTypes.Employee">
            <summary>
            1
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.DiscountTypes.Periodic">
            <summary>
            2
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.DiscountTypes.Infocode">
            <summary>
            3
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.DiscountTypes.Manual">
            <summary>
            4
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.EMailTruncateSetting.Each">
            <summary>
            Delete each e-mail after sending
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.EMailTruncateSetting.Daily">
            <summary>
            Delete all day-old e-mails after sending
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.EMailTruncateSetting.Weekly">
            <summary>
            Delete all week-old e-mails after sending
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.EMailTruncateSetting.Monthly">
            <summary>
            Delete all month-old e-mails after sending
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.EMailTruncateSetting.Never">
            <summary>
            Never delete e-mails, only mark as sent
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.ExcelStandardFormats.Currency">
            <summary>
            "# ##0,00" + CurrencySymbol of CurrentCulture. 
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.ExcelStandardFormats.DateMonthDayOne">
            <summary>
             "MM.dd". 
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.ExcelStandardFormats.DateMonthDayTwo">
            <summary>
             "MMM.dd". 
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.ExcelStandardFormats.DateFullOne">
            <summary>
            "MM.dd.yy".
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.ExcelStandardFormats.DateFullTwo">
            <summary>
            "MM.dd.yyyy
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.ExcelStandardFormats.DateFullThree">
            <summary>
            "MMM.dd.yyyy". 
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.ExcelStandardFormats.DateTime">
            <summary>
            "MM.DD.YY h:mm". 
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.ExcelStandardFormats.Numerical">
            <summary>
             "0,00". 
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.ExcelStandardFormats.Percentage">
            <summary>
            "0%". 
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.ExcelStandardFormats.CurrentLocaleShortDate">
            <summary>
            Short date format for the current locale
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.ExcelStandardFormats.Textual">
            <summary>
            Text
            </summary>
        </member>
        <member name="T:LSOne.Services.Interfaces.Enums.PrescriptionStatus">
            <summary>
            Status of a prescription
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.PrescriptionStatus.UnFetched">
            <summary>
            Unfetched
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.PrescriptionStatus.Fetched">
            <summary>
            Fetched
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.PrescriptionStatus.Paid">
            <summary>
            Paid
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.PeriodStatus.IsInvalid">
            <summary>
            0
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.PeriodStatus.IsValid">
            <summary>
            1
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.PeriodStatus.NotFoundInMemoryTable">
            <summary>
            2
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.LineEnums.PeriodicDiscountType.None">
            <summary>
            0
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.LineEnums.PeriodicDiscountType.Multibuy">
            <summary>
            1
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.LineEnums.PeriodicDiscountType.MixAndMatch">
            <summary>
            2
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.LineEnums.PeriodicDiscountType.DiscountOffer">
            <summary>
            3
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.StatusDialogIcon.Message">
            <summary>
            Displays a message bubble
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.StatusDialogIcon.Cloud">
            <summary>
            Displays a cloud
            </summary>
        </member>
        <member name="T:LSOne.Services.Interfaces.Enums.RoundMethod">
            <summary>
            Rounding method for Tax and Currency calculations
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.RoundMethod.RoundNearest">
            <summary>
            0
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.RoundMethod.RoundDown">
            <summary>
            1
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.RoundMethod.RoundUp">
            <summary>
            2
            </summary>
        </member>
        <member name="T:LSOne.Services.Interfaces.Enums.TenderRoundMethod">
            <summary>
            Rounding method for Tender calculations
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.TenderRoundMethod.None">
            <summary>
            0
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.TenderRoundMethod.RoundNearest">
            <summary>
            1
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.TenderRoundMethod.RoundUp">
            <summary>
            2
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.TenderRoundMethod.RoundDown">
            <summary>
            3
            </summary>
        </member>
        <member name="T:LSOne.Services.Interfaces.Enums.UnitRoundOff">
            <summary>
            Rounding method for Unit Conversions
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.UnitRoundOff.RoundOff">
            <summary>
            0
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.UnitRoundOff.Up">
            <summary>
            1
            </summary>
        </member>
        <member name="F:LSOne.Services.Interfaces.Enums.UnitRoundOff.Decrease">
            <summary>
            2
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.EventArguments.PreRefreshStatusStripArgs.TerminalStatus">
            <summary>
            Terminal status to display on the POS status bar instead of the default terminal status
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.EventArguments.PreRefreshStatusStripArgs.OperatorStatus">
            <summary>
            Operator status to display on the POS status bar instead of the default operator status
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.EventArguments.PreRefreshStatusStripArgs.OverrideTerminalStatus">
            <summary>
            Indicates if the terminal status has been overridden
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.EventArguments.PreRefreshStatusStripArgs.OverrideOperatorStatus">
            <summary>
            Indicates if the operator status has been overridden
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.EventArguments.PreRefreshStatusStripArgs.#ctor">
            <summary>
            Represents the base arguments class allowing to override the terminal and operator status bars on the POS
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.EventArguments.TenderLineDataChangeArgs.TransactionType">
            <summary>
            The RetailTransaction (type Sales) and CustomerPayment (type Payment) transaction are the only ones that can fire off a Tender Data Change event
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.EventArguments.TotalsDataChangeArgs.TransactionType">
            <summary>
            The RetailTransaction (type Sales) and CustomerPayment (type Payment) transaction are the only ones that can fire off a Tender Data Change event
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.EventArguments.LogonFormEventArguments.Operation">
            <summary>
            The operation in context to this instance of LogonFormEventArgs
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.EventArguments.LogonFormEventArguments.Cancel">
            <summary>
            Indicates if action needs to be taken to cancel an operation
            </summary>
        </member>
        <member name="T:LSOne.Services.Interfaces.Delegates.LogonFormEventHandler">
            <summary>
            Occurs when a page on the logon form performs a predefined operation
            </summary>
            <param name="sender">The sender page</param>
            <param name="args">Contains information about which operation is being performed</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICashManagementService.TenderDeclaration(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.DataLayer.BusinessObjects.Enums.TenderDeclarationType,System.Decimal,System.Decimal,System.String)">
            <summary>
            Perform a tender declaration of any type
            </summary>
            <param name="entry">Database connection</param>
            <param name="posTransaction">Current transaction</param>
            <param name="tenderDeclarationType">Type of tender declaration</param>
            <param name="previousAmount">Amount that was previously declared in a tender declaration</param>
            <param name="amount">Amount that is declared in the currenct tender declaration</param>
            <param name="description">Description of the tender declaration</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICashManagementService.GetDeclaredStartOfDayAmount(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager)">
            <summary>
            Get the amount that was declared at the start of day
            </summary>
            <param name="entry">Database connection</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICashManagementService.GetLastTenderDeclarationAmount(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager)">
            <summary>
            Get the last tender declaration amount
            </summary>
            <param name="entry">Database connection</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetReasonCodesList(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Boolean)">
            <summary>
            Gets a list of ReasonCodes sorted by description.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Site service profile</param>
            <param name="closeConnection">Close connection</param>
            <returns>Gets a list of ReasonCodes sorted by description</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetReasonCodesList(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Boolean,System.Collections.Generic.List{LSOne.DataLayer.BusinessObjects.Enums.ReasonActionEnum},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Returns a list of reason codes filtered by the given parameters and sorted by description.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Site service profile</param>
            <param name="closeConnection">Close connection</param>
            <param name="actions">Filtering criteria - list of reason actions. If null, it returns all reason codes, disregarding their action.</param>
            <param name="forPOS">Filtering criteria - if true returns only reason codes with SHOWONPOS = 1</param>
            <param name="open">Filtering criteria - if true returns only open reason codes</param>
            <returns>List of <see cref="T:LSOne.DataLayer.BusinessObjects.Inventory.ReasonCode"/></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetOpenReasonCodesList(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Boolean)">
            <summary>
            Gets a list of ReasonCodes that are open, sorted by description.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Site service profile</param>
            <param name="closeConnection">Close connection</param>
            <returns>Gets a list of open ReasonCodes sorted by description</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetReasonById(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Get a ReasonCode by id
            </summary>
            <param name="entry"></param>
            <param name="siteServiceProfile">Site service profile</param>
            <param name="id">Id of the reason code</param>
            <param name="closeConnection">Close connection</param>
            <returns>Reason</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.SearchReasonList(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.String,System.Boolean,System.Nullable{LSOne.DataLayer.BusinessObjects.Enums.ReasonActionEnum},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Boolean},LSOne.DataLayer.DataProviders.Inventory.ReasonCodeSorting,System.Boolean,System.Boolean)">
            <summary>
            Search for reason codes
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">Site service profile</param>
            <param name="description">Description to search for</param>
            <param name="descriptionBeginsWith">True if the description should begin with the description parameter</param>
            <param name="action">Reason action for search for</param>
            <param name="beginDate">The start date of the reason</param>
            <param name="endDate">The end date of the reason</param>
            <param name="isSystemCode">True if the reasons should be system codes</param>
            <param name="sortBy">Sort enum to sort by</param>
            <param name="sortedBackwards">True if the reasons should be sorted backwards</param>
            <param name="closeConnection">Close connection</param>
            <returns>A filtered list of reason codes</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.ReasonCodeIsInUse(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Returns true if the reason with the given id is in use
            </summary>
            <param name="entry">Entry into the database</param>
            <param name="siteServiceProfile">Site service profile</param>
            <param name="reasonID">ID of the reason to check for usage</param>
            <param name="closeConnection">Close connection</param>
            <returns>True if the reason is used somewhere else false</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.SaveReasonCode(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.ReasonCode,System.Boolean)">
            <summary>
            Saves a reason code
            </summary>
            <param name="entry">Entry into the database</param>
            <param name="siteServiceProfile">Site service profile</param>
            <param name="reasonCode">Reason code to save</param>
            <param name="closeConnection">Close connection</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.DeleteReasonCode(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Deletes a reason code
            </summary>
            <param name="entry">Entry into the database</param>
            <param name="siteServiceProfile">Site service profile</param>
            <param name="reasonId">Reason id to delete</param>
            <param name="closeConnection">Close connection</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetReasonCodesForReturn(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Boolean)">
            <summary>
            Returns a list of reasons codes that can be used to return items
            </summary>
            <param name="entry">Entry into the database</param>
            <param name="siteServiceProfile">Site service profile</param>
            <param name="closeConnection">Close connection</param>
            <returns>Returns a list of reasons codes that can be used to return items</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetTransferRequestLine(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.InventoryTransferRequestLine,System.Boolean)">
            <summary>
            Tries to find and return a transfer request line with matching unit of measure and item ID 
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">Site service profile</param>
            <param name="line">The transfer request line you want to get</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the function finishes it's work</param>
            <returns>A InventoryTransferRequestLine object, null if no matching line was found</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.SearchInventoryTransferRequests(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.InventoryTransferFilter,System.Boolean)">
            <summary>
            Search inventory transfer requests based on a filter
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">Site service profile</param>
            <param name="filter">Filter object containing search criteria</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the function finishes it's work</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.SearchInventoryTransferRequestsExtended(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.InventoryTransferFilterExtended,System.Boolean)">
            <summary>
            Search inventory transfer requests based on an extended filter
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">Site service profile</param>
            <param name="filter">Filter object containing search criteria</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the function finishes it's work</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.SearchInventoryTransferRequestsAdvanced(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Int32@,LSOne.DataLayer.BusinessObjects.Inventory.InventoryTransferFilterExtended,System.Boolean)">
            <summary>
            Search inventory transfer requests based on an extended filter with pagination
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">Site service profile</param>
            <param name="filter">Filter object containing search criteria</param>
            <param name="totalRecordsMatching">Total number of matching records based on the search criteria</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the function finishes it's work</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.CreateTransferRequestFromOrder(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.String,System.DateTime,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier@,System.Boolean)">
            <summary>
            Creates a transfer request from a specific order
            </summary>        
            <param name="createdBy">If empty then the order is being created on head office, otherwise the Store ID</param>
            <param name="entry">The entry into the database</param>
            <param name="orderIDtoCopy">The ID of the transfer order to be copied</param>
            <param name="sendingStoreID">The sending store ID to be assigned to the new transfer request. If empty then the sending store ID from the old transfer request is used</param>
            <param name="receivingStoreID">The receiving store ID to be assigned to the new transfer request. If empty then the receiving store ID from the old transfer request is used</param>
            <param name="description">The description to be assigned to the new transfer request. If empty then the description from the old transfer request is used</param>
            <param name="expectedDelivery">The expected delivery date to be assigned to the new transfer request. If empty then DateTime.Now + 3 days is used</param>        
            <param name="closeConnection">If true then the connection to the site service should be closed once the work is finished</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="newRequestID">The ID of the new transfer request that was created</param>        
            <returns></returns>        
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.CreateTransferRequestFromOrder(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.BusinessObjects.Inventory.InventoryTransferRequest,LSOne.Utilities.DataTypes.RecordIdentifier@,System.Boolean)">
            <summary>
            Creates a transfer request from a specific order
            </summary>                
            <param name="entry">The entry into the database</param>
            <param name="orderIDtoCopy">The ID of the transfer order to be copied</param>        
            <param name="closeConnection">If true then the connection to the site service should be closed once the work is finished</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="newRequestID">The ID of the new transfer request that was created</param>        
            <param name="requestInformation">Reqeust header to be used for the copying. If this is null then the information of the copied order header is used. </param>
            <returns></returns>        
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.CopyTransferRequest(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.String,System.DateTime,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier@,System.Boolean)">
            <summary>
            Copies information from one transfer request to another. This function takes individual properties of a transfer request header and creates
            a header object before calling the Site Service
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="requestIDtoCopy">The ID of the transfer request to be copied</param>   
            <param name="sendingStoreID">The sending store ID to be assigned to the new transfer request. If empty then the sending store ID from the old transfer request is used</param>
            <param name="receivingStoreID">The receiving store ID to be assigned to the new transfer request. If empty then the receiving store ID from the old transfer request is used</param>
            <param name="description">The description to be assigned to the new transfer request. If empty then the description from the old transfer request is used</param>
            <param name="expectedDelivery">The expected delivery date to be assigned to the new transfer request. If empty then DateTime.Now + 3 days is used</param>
            <param name="createdBy">If empty then the transfer request is being copied by head office otherwise this should be the store ID</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the function finishes it's work</param>
            <param name="siteServiceProfile">The site service profile that should be used to connect to the site service</param>
            <param name="newRequestID">The ID of the new transfer request that was created</param>        
            <returns></returns>        
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.CopyTransferRequest(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.BusinessObjects.Inventory.InventoryTransferRequest,LSOne.Utilities.DataTypes.RecordIdentifier@,System.Boolean)">
            <summary>
            Copies information from one transfer request to another
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="requestIDtoCopy">The ID of the transfer request to be copied</param>
            <param name="requestInformation">A request header object that has all the information needed to create a request header at head office. </param>        
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the function finishes it's work</param>
            <param name="siteServiceProfile">The site service profile that should be used to connect to the site service</param>
            <param name="newRequestID">The ID of the new transfer request that was created</param>        
            <returns></returns>  
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.CreateTransferRequestFromFilter(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.InventoryTransferRequest,LSOne.DataLayer.BusinessObjects.Replenishment.Containers.InventoryTemplateFilterContainer,LSOne.Utilities.DataTypes.RecordIdentifier@,System.Boolean)">
            <summary>
            Creates a transfer request and adds the items from the filter to the request
            </summary>
            <param name="entry">The entry into the database</param>        
            <param name="requestInformation">A request header object that has all the information needed to create a request header at head office. </param>        
            <param name="filter">Container with filter IDs</param>     
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the function finishes it's work</param>
            <param name="siteServiceProfile">The site service profile that should be used to connect to the site service</param>
            <param name="newRequestID">The ID of the new transfer request that was created</param>       
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.CreateTransferRequestFromFilter(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.String,System.DateTime,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.BusinessObjects.Replenishment.Containers.InventoryTemplateFilterContainer,LSOne.Utilities.DataTypes.RecordIdentifier@,System.Boolean)">
            <summary>
            Creates a transfer request and adds the items from the filter to the request
            </summary>
            <param name="entry">The entry into the database</param>        
            <param name="sendingStoreID">The sending store ID to be assigned to the new transfer request.</param>
            <param name="receivingStoreID">The receiving store ID to be assigned to the new transfer request.</param>
            <param name="description">The description to be assigned to the new transfer request</param>
            <param name="expectedDelivery">The expected delivery date to be assigned to the new transfer request. If empty then DateTime.Now + 3 days is used</param>
            <param name="createdBy">If empty then the transfer request is being copied by head office otherwise this should be the store ID</param>
            <param name="filter">Container with filter IDs</param>        
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the function finishes it's work</param>
            <param name="siteServiceProfile">The site service profile that should be used to connect to the site service</param>
            <param name="newRequestID">The ID of the new transfer request that was created</param>       
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.CreateTransferRequestFromTemplate(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.InventoryTransferRequest,LSOne.DataLayer.BusinessObjects.Replenishment.ListItems.TemplateListItem,LSOne.Utilities.DataTypes.RecordIdentifier@,System.Boolean)">
            <summary>
            Create a new transfer request based on a given template
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="requestInformation">A request header object that has all the information needed to create a request header at head office. </param> 
            <param name="template">The transfer request template</param>
            <param name="newRequestID">The ID of the new transfer request that was created</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>Status and ID of the created transfer request</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.PostPurchaseWorksheet(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Post a purchase worksheet
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="purchaseWorksheetID">ID of the purchase worksheet to post</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>A container with operation result and number of created purchase orders</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.PurchaseWorksheetHasInventoryExcludedItems(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Checks if there is any item in a purchase worksheet that is exluded from inventory operations (ex. Service items)
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="purchaseWorksheetID">ID of the purchase worksheet to check</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>True if there is an inventory excluded item</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.CreatePurchaseWorksheetLinesFromFilter(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Creates purchase worksheet lines based on a filter
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="purchaseWorksheetID">Purchase worksheet ID</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>Number of lines inserted</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.RefreshPurchaseWorksheetLines(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Refresh the lines in a purchase worksheet by recalculating suggested quantities and adding missing items from the filter
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="purchaseWorksheetID">ID of the purchase worksheet</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.CalculateSuggestedQuantity(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Calculate suggested quantity for replenishment for an item in a specific store
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="itemID">ID of the item</param>
            <param name="storeID">ID of the store</param>
            <param name="unitID">ID of the unit in which to convert the result</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetInventoryTemplateItems(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Boolean,LSOne.DataLayer.BusinessObjects.Replenishment.Containers.InventoryTemplateFilterContainer)">
            <summary>
            Gets filter list of inventory template items
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="closeConnections">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="filter">Container with IDs to filter</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetInventoryTemplateItems(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Returns all items that match the item filter for given inventory template.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="templateId">Id of the <see cref="T:LSOne.DataLayer.BusinessObjects.Replenishment.InventoryTemplate"/></param>
            <param name="storeID">Store ID used in case of filtering by inventory on hand</param>
            <param name="getItemsWithNoVendor">If true, items that have no vendor will also be included</param>
            <param name="closeConnection"></param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GoodsReceivingDocumentFullyReceived(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Has the document been fully recieved
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="goodsReceivingDocumentID">The ID if the document</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GoodsReceivingDocumentAllLinesPosted(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Are all the lines on the document posted
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="goodsReceivingDocumentID">The ID of the document</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetPurchaseOrderID(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Gets the purchase order ID for the goods receiving dosument
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="goodsReceivingDocumentID">The ID if the document</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.DeleteGoodsReceivingLinesForAPurchaseOrderLine(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Deletes goods receiving lines for a specific purchase order line
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="purchaseOrderLineID">The unique ID for the purchase order line</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GoodsReceivingDocumentExists(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Checks if a goods receiving document exists for a purchase order
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="purchaseOrderID">The ID for the purchase order that is to be checked</param>
            <returns>Return true if a goods receiving document is found for this purchase order ID</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.SaveGoodsReceivingDocument(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.GoodsReceivingDocument,System.Boolean)">
            <summary>
            Saves a goods receiving document header
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="documentHeader">The goods receiving document header that is to be saved</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetPurchaseOrdersWithNoGoodsReceivingDocumentForStore(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.DataProviders.Inventory.PurchaseOrderSorting,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets a list of purchase orders without a goods receiving document
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="storeID">Filter by store, use RecordIdentifier.Empty for no filter</param>
            <param name="sorting">the sort method</param>
            <param name="sortBackwards">The sort direction</param>
            <param name="includeLineTotals">True if the total quantity of items and total number of items should be included in the query. Used in OMNI</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.CreatePostedGoodsReceivingDocumentLinesFromPurchaseOrder(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Creates posted goods receiving lines for all the lines in the purchase order
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="purchaseOrderID">The ID purchase order that the goods receiving lines should be created from</param>
            <returns>Result of the posting operation</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.DeleteGoodsReceivingDocument(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            If the Goods receiving document does not have any posted lines the document is deleted.
            </summary>
            <param name="goodsReceivingDocumentID">The document to be deleted</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>Retrns <see cref="T:LSOne.DataLayer.BusinessObjects.Enums.GoodsReceivingDocumentDeleteResult"/> that tells us if there were posted lines or if the document was deleted </returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetGoodsReceivingDocuments(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.GoodsReceivingDocumentSearch,System.Boolean)">
            <summary>
            Searches for all goods receiving documents that match the search criteria as it has been set.
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="searchCriteria">One or more of the variables need to be set so that the search is limited, otherwise all documents are returned</param>
            <returns>A list of the goods receiving documents found in the search</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetGoodsReceivingDocument(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Gets a specific Goods recieveing document
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="goodsReceivingDocumentID">The ID of the document</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetGoodsReceivingDocumentLine(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Gets a goods receiving document line
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="goodsReceivingDocumentID">The ID of the document</param>
            <param name="storeID">The ID of the store</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetReceivedTotals(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Int32,System.Boolean)">
            <summary>
            Retrieves the sum of all received items per goods receiving document. The list of documents is controlled by the search criteria <see cref="T:LSOne.DataLayer.BusinessObjects.Inventory.GoodsReceivingDocumentLineSearch"/>
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="numberOfDocuments">For how many GR documents should the total be retrieved</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetTotalNumberOfGRDocuments(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Boolean)">
            <summary>
            Return the total number of GR documents that are in the database
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>the total number of GR documents that are in the database</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.CountGoodsReceivingDocumentsSearchResults(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.GoodsReceivingDocumentSearch,System.Boolean)">
            <summary>
            Returns the total number of goods receiving documents that are found using the search criteria.
            The GetGoodsReceivingDocuments function limits the result set so this tells us how many there are available in total
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="searchCriteria">One or more of the variables need to be set so that the search is limited, otherwise all documents are returned</param>
            <returns>the total number of goods receiving documents that are found using the search criteria</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetGoodsReceivingDocumentLinesForAPurchaseOrderLine(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Returns all goods receiving lines for a specific purchase order line
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="purchaseOrderLineID">the unique ID for the purchase order line</param>
            <returns>All goods receiving lines attached to one specific purchase order line</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.SearchGoodsReceivingDocumentLines(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.GoodsReceivingDocumentLineSearch,LSOne.DataLayer.DataProviders.Inventory.GoodsReceivingDocumentLineSorting,System.Boolean,System.Boolean,System.Int32@)">
            <summary>
            Search for goods receiving lines 
            </summary>        
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="searchCriteria">Search paramters</param>
            <param name="sortBy">Sort method</param>
            <param name="sortBackwards">Sort direction</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="totalCount">Total rows available</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.PostGoodsReceivingLine(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Posts the goods receiving line with the supplied ID
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="goodsReceivingDocumentLineID">The ID of the line</param>        
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.UpdateGoodsReceivingDocumentStatus(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Updates the status of a given goods receiving document if necessary. Returns whether the document was updated or not.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="goodsReceivingDocumentID">The ID of the document</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.SaveGoodsReceivingDocumentLine(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.GoodsReceivingDocumentLine,System.Boolean)">
            <summary>
            Saves a given goods receiving document line into the database
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="goodsReceivingDocumentLine">The line to save</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.DeleteGoodsReceivingDocumentLine(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Deletes the supplied goods receiving document line
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="goodsReceivingDocumentLineID">The line to delete</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.CreateGoodsReceivingDocumentLinesFromPurchaseOrder(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Create unposted goods receiving lines from purchase order lines.
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">Site service profile to use</param>
            <param name="purchaseOrderID">Purchase order ID from which to create the lines</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.MaxOverGoodsReceive(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Boolean)">
            <summary>
            Gets the centralized Overreceiving setting
            </summary>  
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetGoodsReceivingDocumentLines(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Gets existing lines for a specific goods receiving document
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="goodsReceivingID">The unique ID for the goods receiving document</param>
            <returns>A list of goods receiving lines</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.PostGoodsReceivingDocument(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Post all lines from a goods receiving document
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="goodsReceivingDocumentID">The ID of the goods receiving document to post</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>Result of the operation</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.PostInventoryAdjustmentLine(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.InventoryJournalTransaction,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.BusinessObjects.Enums.InventoryTypeEnum,System.Boolean)">
            <summary>
            Saves an inventory adjustment line that is attached to a inventory journal transaction
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="inventoryJournalTrans">The inventory adjustment journal</param>
            <param name="storeId">The store the adjustment should be applied to</param>
            <param name="typeOfAdjustmentLine">What type of inventory adjustment is it</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetJournalListAdvancedSearch(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.InventoryAdjustmentFilter,System.Boolean,System.Int32@)">
            <summary>
            Get a list of journals based on a filter
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="filter">Filter container</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="totalRecordsMatching">Total number of records that matched the search criteria</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetAdjustmentStatus(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Get the current processing status for a journal
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="journalId">ID fo the journal to check</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.SetAdjustmentStatus(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.BusinessObjects.Enums.InventoryProcessingStatus,System.Boolean)">
            <summary>
            Set the processing status for a journal
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="journalId">ID fo the journal to set</param>
            <param name="status">The status to set</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.InventoryAdjustmentExists(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Checks if an inventory adjustment exists
            </summary> 
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="stockCountingID">The ID of the document</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.DeleteInventoryJournal(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Deletes an inventory journal only if it's empty (has no lines).
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation.</param>
            <param name="entry">The entry into the database.</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open.</param>
            <param name="journalId">The id of the inventory journal that should be deleted.</param>
            <returns>False if the journal has lines or an error occurred when deleting it. True otherwise.</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.AdvancedSearch(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Enums.InventoryJournalTypeEnum,LSOne.DataLayer.BusinessObjects.Inventory.InventoryJournalSearch,LSOne.DataLayer.DataProviders.Inventory.InventoryAdjustmentSorting,System.Boolean,System.Int32,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            Paginated search through inventory journal based on the given <see cref="T:LSOne.DataLayer.BusinessObjects.Inventory.InventoryJournalSearch">search criteria object</see>
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="journalType"></param>
            <param name="searchCriteria"></param>
            <param name="sortBy"></param>
            <param name="sortBackwards"></param>
            <param name="rowFrom"></param>
            <param name="rowTo"></param>
            <param name="totalRecords"></param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.AdvancedSearch(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.InventoryJournalLineSearch,System.Int32@,System.Boolean)">
            <summary>
            Paginated search through inventory journal lines based on the given <see cref="T:LSOne.DataLayer.BusinessObjects.Inventory.InventoryJournalLineSearch">search criteria object used in adjustments, reserved and parked inventory</see>
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="searchCriteria">Object containing search criterias</param>
            <param name="totalRecords"></param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.UpdateStatus(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.BusinessObjects.Enums.InventoryJournalStatus,System.Boolean)">
            <summary>
            Updates the journal line status (Open, Posted or Partially Posted) and, if needed, the line's master id.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="journalId">Journal id to which this line belongs to</param>
            <param name="lineNum">Curent line id</param>
            <param name="masterId">Current line master id (if available)</param>
            <param name="newStatus">The new status</param>
            <returns>The <see cref="T:System.Guid">MasterID</see> of the updated journal line</returns>
            <remarks>Used by the Parked Inventory > Move to Inventory functionality</remarks>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetMovedToInventoryLines(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.BusinessObjects.Inventory.InventoryJournalTransactionSorting,System.Boolean,System.Boolean)">
            <summary>
            Returns the already moved-2-inventory items for a given parked journal line
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="journalId">Journal id to which this line belongs to</param>
            <param name="lineMasterId">The journal line Master id( of type <see cref="T:System.Guid"/>) </param>
            <param name="sortBy">The column index to sort by</param>
            <param name="sortBackwards">Whether to sort the result backwards or not</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.PurchaseOrderLineHasPostedGoodsReceivingDocumentLine(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Checks if a specific purchase order line has a goods receiving line against it already. 
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="purchaseOrderLineID">The ID for the purchase order line. PrimaryID is the purchase Order ID and SecondaryID is the line number</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>If the purchase order line has a goods receiving document line against it the function returns true</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.DeletePurchaseOrderLine(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Deletes a purchase order line if it has no goods receiving lineshas been registered against it
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="purchaseOrderLineID">The ID for the purchase order line. PrimaryID is the purchase Order ID and SecondaryID is the line number</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>If true then the purchase order line has been deleted</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetPurchaseOrder(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Retrieves information about a purchase order header
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="purchaseOrderID">The ID for the purchase order header</param>
            <returns>Information about the purchase order header</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.SavePurchaseOrder(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.PurchaseOrder,System.Boolean)">
            <summary>
            Saves a purchase order header
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="purchaseOrder">The purchase order header to be saved</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.CopyLinesAndBetweenMiscChargesPurchaseOrders(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.BusinessObjects.Inventory.PurchaseOrder,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.BusinessObjects.Enums.TaxCalculationMethodEnum,System.Boolean)">
            <summary>
            Copies all item lines and misc charges from oldPurchaseOrderID to newPurchaseOrderID
            </summary>
            <param name="entry"></param>
            <param name="siteServiceProfile"></param>
            <param name="fromPurchaseOrderID"></param>
            <param name="newPurchaseOrder"></param>
            <param name="storeID"></param>
            <param name="taxCalculationMethod"></param>
            <param name="closeConnection"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GeneratePurchaseOrderID(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Boolean)">
            <summary>
            Generates a new purchase order ID
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>New purchase order ID</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.SaveAndReturnPurchaseOrder(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.PurchaseOrder,System.Boolean)">
            <summary>
            Saves a given purchase order into the database
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="purchaseOrder">The Purchase order to save</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>Purchase order</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.PurchaseOrderHasGoodsReceivingDocument(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Checks if a goods receiving document exists against a specific purchase order
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="purchaseOrderID">The ID of the purchase order to be checked</param>
            <returns>Returns true if a goods receiving document exists</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.PostAndReceiveAPurchaseOrder(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.PurchaseOrder,System.Boolean)">
            <summary>
            Creates and posts a goods receiving document for all lines within the purchase order
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="purchaseOrder">The purchase order that is to be posted and received</param>
            <returns>Result of the posting operation</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.PurchaseOrderHasPurchaseOrderLines(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Returns true if the purchase order has any items lines
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="purchaseOrderID">The ID of the purchase order that is being checked</param>
            <returns>Return true if any item lines are on the purchase order</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.ChangeDiscountsForPurchaseOrderLines(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Boolean)">
            <summary>
            Goes through all the purchase order lines and updates either the discount amount and discount percentage on each line
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="purchaseOrderID">The ID of the purchase order that is being checked</param>
            <param name="storeID">The ID of the store the purchase order belongs to</param>
            <param name="discountPercentage">The discount % that should be used for updating. If null then this value is ignored</param>
            <param name="discountAmount">The discount amount that should be used for updating. If null then this value is ignored</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.DeletePurchaseOrderMiscCharges(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Deletes a specific miscellanious charge on a purchase order
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="purchaseOrderMiscChargeID">Unique ID of the miscellanious charge line to be deleted</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetMischChargesForPurchaseOrder(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Gets a purchase order misc charges for a given purchase order
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="purchaseOrderID">The ID of the purchase order to get misc charges for</param>
            <param name="includeReportFormatting">Set to true if you want price and quantity formatting, usually for reports</param>
            <returns>A purchase order misc charge with a given ID</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetPurchaseOrderMiscCharge(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Gets information about a specific miscellanious charge
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="purchaseOrderMiscChargeID">The ID of the misc charge being retrieved</param>
            <param name="includeReportFormatting">Set to true if you want price and quantity formatting, usually for reports</param>
            <returns>Information about the msc charge</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.SavePurchaseOrderMiscCharge(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.PurchaseOrderMiscCharges,System.Boolean)">
            <summary>
            Saves a purchase order misc. charge. If no line number is on the object a new ID will be created
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="purchaseOrderMiscCharge">The misc. charge to be saved</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetOrderedTotals(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Int32,System.Boolean)">
            <summary>
            Retrieves the sum of all ordered items per purchase order that is attached to a goods receiving document. 
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="numberOfDocuments">For how many GR documents should the total be retrieved</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetTotalNumberOfProductOrders(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Boolean)">
            <summary>
            Return the total number of purchase orders that are in the database
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>the total number of purchase orders that are in the database</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.SavePurchaseOrderLine(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.PurchaseOrderLine,System.Boolean)">
            <summary>
            Saves a specific purchase order line
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="purchaseOrderLine">The purchase order line that is to be saved</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetUnitsForPurchaserOrderItemVariant(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Gets the relevant unists for the purchase order and item
            </summary> 
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="purchaseOrderID">The purchase order</param>
            <param name="itemID">The item</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetPurchaseOrderLineNumberFromItemInfo(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Gets the Line number for the item
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="unitID">The unit ID</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="purchaseOrderID">The purchase order</param>
            <param name="retailItemID">The item</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetPurchaseOrderLine(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Gets a purchase order line
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="purchaseOrderLineID">The purchase order line ID</param>
            <param name="storeID">the store the purchase order belongs to </param>
            <param name="includeReportFormatting">If formatting information should be included</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.SearchItemsInPurchaseOrder(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Searches for items that are part of the purchase order
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="purchaseOrderID">The ID of the purchase order</param>
            <param name="searchString">The string to search for</param>
            <param name="rowFrom">The start row</param>
            <param name="rowTo">The end row</param>
            <param name="beginsWith">If the way to compare the search string </param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.CreatePurchaseOrderFromFilter(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.PurchaseOrder,LSOne.DataLayer.BusinessObjects.Replenishment.Containers.InventoryTemplateFilterContainer,LSOne.Utilities.DataTypes.RecordIdentifier@,System.Boolean)">
            <summary>
            Create a new purchase order from an filter
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="purchaseOrderHeader">Purchase order header information</param>
            <param name="filter">Container with desired item filters</param>
            <param name="newOrderID">The ID of the new purchase order that was created</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>Status and ID of the created purchase order</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.CreatePurchaseOrderFromTemplate(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.PurchaseOrder,LSOne.DataLayer.BusinessObjects.Replenishment.ListItems.TemplateListItem,LSOne.Utilities.DataTypes.RecordIdentifier@,System.Boolean)">
            <summary>
            Create a new purchase order based on a given template.
            </summary>
            <param name="entry">The entry into the database.</param>
            <param name="siteServiceProfile">Which site service to use for this operation.</param>
            <param name="purchaseOrderHeader">Purchase order header information</param>
            <param name="template">The purchase order template.</param>
            <param name="newOrderID">The ID of the new purchase order that was created</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>Status and ID of the created purchase order.</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetSumOfReservedItemByStore(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.BusinessObjects.Enums.InventoryJournalTypeEnum,System.Boolean)">
            <summary>
            Returns the sum of reservations at a supplied store
            </summary> 
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="itemID">The item </param>
            <param name="storeID">The store</param>
            <param name="inventoryUnitID">The inventory unit ID</param>
            <param name="journalType">The type of reservation</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetStockCounting(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Get stock counting
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="journalId">The journal ID to be get</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>The inventory adjustment</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.DeleteStockCounting(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Deletes a stock counting journal
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="stockCountingID">The stock counting ID to delete</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>Result of the operation</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.SearchJournalTransactions(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.InventoryJournalTransactionFilter,System.Int32@,System.Boolean)">
            <summary>
            Searches for Stock  counting entries 
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="filter">Filter settings container</param>
            <param name="totalRecordsMatching">out: how many rows there are in total</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.RefreshStockCountingJournalInventoryOnHand(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Updates the on hand inventory of all journal transactions in a stock counting journal 
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="journalID">Entry of the stock counting journal</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.DeleteMultipleJournalTransactions(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Collections.Generic.List{LSOne.Utilities.DataTypes.RecordIdentifier},System.Boolean)">
            <summary>
            Deletes multiple inventory journal transaction lines
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="IDs">The IDs of the inventory journal to delete</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>       
            <returns>Operation result</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.SaveJournalTransaction(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.InventoryJournalTransaction,System.Boolean)">
            <summary>
            Saves a stock counting line
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="ijTransaction">The line to save</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.PostMultipleStockCountingLines(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Collections.Generic.List{LSOne.DataLayer.BusinessObjects.Inventory.InventoryJournalTransaction},LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Posts multiple stock counting lines
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="ijTransactions">The lines to post</param>
            <param name="storeId">The store the lines are for</param>
            <returns>Status and indicates whether the journal still has unposted lines</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.PostAllStockCountingLines(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Post all lines from a stock counting journal
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="stockCountingJournalID">The stock counting ID for which to post all lines</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>Result of the operation</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.AsyncPostAllStockCountingLines(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier)">
            <summary>
            Post all lines from a stock counting journal asynchronously
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="stockCountingJournalID">The stock counting ID for which to post all lines</param>
            <returns>Result of the operation</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetInventoryJournalTransaction(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Get inventory journal transaction by ID
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="journalTransactionId">The journal transaction ID</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>Returns the inventory journal transaction for the supplied ID</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.CreateStockCountingFromExistingAdjustment(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.String,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Create a new stock counting journal and copy all lines from an existing journal
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="storeID">Store ID for the new journal</param>
            <param name="description">Description of the new journal</param>
            <param name="existingAdjustmentID">Existing journal from which to copy the lines</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>Status and ID of the created journal</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.CreateStockCountingFromFilter(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.String,LSOne.DataLayer.BusinessObjects.Replenishment.Containers.InventoryTemplateFilterContainer,System.Boolean)">
            <summary>
            Create a new stock counting journal from an filter
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="storeID">Store ID for the new journal</param>
            <param name="description">Description of the new journal</param>
            <param name="filter">Container with desired item filters</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>Status and ID of the created journal</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.CreateStockCountingFromTemplate(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Replenishment.ListItems.TemplateListItem,System.Boolean)">
            <summary>
            Create a new stock counting journal based on a given template.
            </summary>
            <param name="entry">The entry into the database.</param>
            <param name="siteServiceProfile">Which site service to use for this operation.</param>
            <param name="template">The stock counting template.</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>Status and ID of the created journal.</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.CompressAllStockCountingLines(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Compresses all lines on a stock counting journal, that have the same item and unit
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="stockCountingID">Stock counting journal id</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetVendor(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Gets information about a specific vendor
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="vendorID">The unique ID for the vendor being retrieved</param>
            <returns>An object with information about the Vendor</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetVendorsSalesTaxGroupID(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Returns the sales tax group for the vendor
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="vendorID">The unique ID for the vendor that is being checked</param>
            <returns>The ID of the tax group on the vendor</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetVendorList(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Boolean)">
            <summary>
            Gets a list of all vendors
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>A list of vendors</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.DeleteVendors(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Collections.Generic.List{LSOne.Utilities.DataTypes.RecordIdentifier},System.Boolean)">
            <summary>
            Deletes a list of vendors. When deleting a deleted flag is set to true on the vendor
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="toDeleteList">A list of unique vendor IDs to be deleted</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.DeleteVendorItemByRetailItemID(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Collections.Generic.List{LSOne.DataLayer.BusinessObjects.MasterIDEntity},LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Deletes all vendor items for the given retail item ID.
            </summary>
            <remarks>Edit vendor permission is needed to execute this method</remarks>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="toDeleteList">The IDs of the retail items</param>
            <param name="vendorID">The ID of the vendor</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.DeleteVendorItems(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Collections.Generic.List{LSOne.Utilities.DataTypes.RecordIdentifier},System.Boolean)">
            <summary>
            Deletes a list of items
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="toDeleteList">A list of unique item IDs to be deleted</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.DeleteVendorContact(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Collections.Generic.List{LSOne.Utilities.DataTypes.RecordIdentifier},System.Boolean)">
            <summary>
            Delete a vendor contact
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="contactsToDelete">IDs of the contacts to delete</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetVendorContactList(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Returns a list of vendor contacts
            </summary>
            <param name="entry">The entry into the database</param>        
            /// <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="vendorID">ID of the vendor</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetVendorContact(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Returns a vendor contact
            </summary>
            <param name="entry">The entry into the database</param>        
            /// <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="contactID">ID of the contact</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.SaveVendorContact(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Contact,System.Boolean)">
            <summary>
            Saves or updates a vendor contact
            </summary>          
            /// <param name="entry">The entry into the database</param>   
            <param name="siteServiceProfile">Which site service to use for this operation</param>   
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="contact">Contact to save or update</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.RestoreVendors(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Collections.Generic.List{LSOne.Utilities.DataTypes.RecordIdentifier},System.Boolean)">
            <summary>
            Activates a list of vendors. When activating the  deleted flag is set to false on the vendor
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="toActivateList">A list of unique vendor IDs to be activated</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetVendors(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.VendorSearch,System.Boolean)">
            <summary>
            Returns a list of vendors that fulfill the conditions in the search criteria paramteer
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="searchCriteria">The conditions that should be applied to the search</param>
            <returns>A list of items that apply to the search conditions</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetVendorsList(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.DataProviders.Inventory.VendorSorting,System.Boolean,System.Boolean)">
            <summary>
            Returns a list of vendors that have not been deleted
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="sortBy">A enum that defines how the result should be sorted</param>
            <param name="sortBackwards">Set to true if wanting backwards sort</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>A list of vendors</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.VendorExists(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Checks if a specific ID already exists for a vendor
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="vendorID">The unique ID to check</param>
            <returns>True if the vendor ID already exists</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.SaveVendor(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.Vendor,System.Boolean)">
            <summary>
            Saves the vendor information
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="vendor">The information to be saved</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.SaveAndReturnVendor(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.Vendor,System.Boolean)">
            <summary>
            Saves and returns the vendor information
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="vendor">The information to be saved</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>Vendor</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetVendorItem(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Get a vendor item based on the internal vendor ID
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="internalID">The unique ID for the vendor item</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetVendorItem(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Get a vendor item based on vendor, item and unit ID
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="vendorID">The unique ID for the vendor</param>
            <param name="itemID">The unique ID for the item</param>
            <param name="unitID">The unique ID for the unit</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetFirstVendorItem(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Each item can be added multiple times to a vendor with different unit ID's. This function returns the first one found 
            and should only be used when the unit ID is not available.
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="vendorID">The unique ID for the vendor</param>
            <param name="itemID">The unique ID for the item</param>
            <returns>The first vendor item found</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetDistinctRetailItemsForVendor(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Gets a list of DataEntities that contains distinct list of retail item ID's and Item Description for a given vendorID
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="vendorID">ID of the vendor to get the list for</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.VendorItemExistsExcludingCurrentRecord(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Checks if a vendor item by a given Vendor ID and vendor item ID exists, excluding current record from the check
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="vendorID">ID of the vendor to check for</param>
            <param name="vendorItemID">ID of the vendor item to check for (this is external vendor specific id)</param>
            <param name="oldRecordID">ID of the old record which we skip comparing to</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>True if the vendor item exists, else false</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.VendorItemExistsExcludingCurrentRecordByVendorIDRetailIDAndUnitID(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Checks if a vendor item by a given Vendor ID, retailID and unitID, excluding current record from the check
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="vendorID">ID of the vendor to check for</param>
            <param name="retailID">ID of the retail item</param>
            <param name="unitID">ID of the variant</param>
            <param name="oldRecordID">ID of the old record which we skip comparing to</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>True if the vendor item exists, else false</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.VendorItemExistsExcludingCurrentRecordByVendorIDRetailIDAndUnitIDAndVendorItemID(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Checks if a vendor item by a given Vendor ID, retailID and unitID, excluding current record from the check
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="vendorID">ID of the vendor to check for</param>
            <param name="retailID">ID of the retail item</param>
            <param name="unitID">ID of the variant</param>
            <param name="vendorItemID">ID of the vendor item to check for (this is external vendor specific id)</param>
            <param name="oldRecordID">ID of the old record which we skip comparing to</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>True if the vendor item exists, else false</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetItemsForVendor(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.DataProviders.Inventory.VendorItemSorting,System.Boolean,System.Boolean)">
            <summary>
            Returns a list of items that has been assigned to a specific vendor
            </summary>
            <param name="siteServiceProfile"></param>
            <param name="vendorID">The unique ID for the vendor</param>
            <param name="sorting">Sorting of the vendor item list</param>
            <param name="sortBackwards">Ascending or descending</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetItemsForVendor(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.DataProviders.Inventory.VendorItemSorting,System.Boolean,System.Int32,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            Returns a paginated list of items that has been assigned to a specific vendor
            </summary>
            <param name="siteServiceProfile"></param>
            <param name="vendorID">The unique ID for the vendor</param>
            <param name="sorting">Sorting of the vendor item list</param>
            <param name="sortBackwards">Ascending or descending</param>
            <param name="startRecord">Pagination start index</param>
            <param name="endRecord">Pagination end index</param>
            <param name="totalRecords">Total number of records for the given vendor</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.SaveVendorItem(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.VendorItem,System.Boolean)">
            <summary>
            Saves a vendor item 
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="vendorItem">The vendor item to be saved</param>
            <returns>Internal ID of the saved vendor</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetDistinctUnitsForVendorItem(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Returns a list of all units that are available for the item
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="vendorID">The unique ID for the vendor</param>
            <param name="itemID">The unique ID for the item</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.VendorItemExists(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Checks if the vendor has the item availble
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="vendorID">The vendor</param>
            <param name="retaiID">The item</param>
            <param name="unitID">The unit </param>
            <param name="oldRecordID">Ids to exclude</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.DeleteByRetailItemID(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Removes the supplied retil item from the supplied vendor
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>      
            <param name="retailItemID">The item</param>
            <param name="vendorID">The vendor</param>
            <param name="unitID">The unit of the item to remove</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetVendorsForItem(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.DataProviders.Inventory.VendorItemSorting,System.Boolean,System.Boolean)">
            <summary>
            Gets the vendors for the supplied item
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>      
            <param name="retailItemID">The retail item</param>
            <param name="sortBy">How to sort</param>
            <param name="sortBackwards">The sort direction</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.SetDefaultContactOnVendor(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Sets the default contact on the vendor
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="vendorID">The unique ID of the vendor to be updated</param>
            <param name="contactID">The unique ID of the contact that is to be the default contact on the vendor</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetItemsDefaultVendor(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Returns the default vendor for a given item
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="itemID">The unique ID of the item</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>
            Returns the default vendor ID
            </returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetLatestPurchasePrice(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Retrieves the latest purchase price for a vendor item
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="vendorID">The unique ID of the vendor to be updated</param>
            <param name="retailItemID">The unique ID of the vendor item being checked</param>
            <param name="unitID">The unit ID on the vendor item being checked</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetDefaultPurchasePrice(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Retrieves the default purchase price for a vendor item
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="vendorID">The unique ID of the vendor to be updated</param>
            <param name="itemID">The unique ID of the vendor item being checked</param>
            <param name="unitID">The unit ID on the vendor item being checked</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.DeleteVendorsCanExecute(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Collections.Generic.List{LSOne.Utilities.DataTypes.RecordIdentifier},System.Collections.Generic.List{LSOne.Utilities.DataTypes.RecordIdentifier}@,System.Boolean)">
            <summary>
            This procedure checks if vendor can be deleted.
            A vendor cannot be deleted if a purchase order, a goods receiving document or purchase order worksheet that is open and is attached to the vendor
            A vendor can not be deleted if it is attached to a purchase order that is posted and there is no goods receiving document attached to the purchase order i.e.both the purchase order and goods receiving document have to be posted for the vendor to be deleted.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="vendors">vendor ids to be checked</param>
            <param name="linkedVendors">list of vendors that cannot be deleted </param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>True if all vendors from the list can be deleted. False otherwise</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.VendorHasLinkedItems(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Verifies if a vendor is linked to at least one item or is the default vendor for an item.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="vendorID">Unique ID of the vendor</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.DeleteVendorItemLinks(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Deletes all vendor - item links and removes vendor as default vendor from items.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="vendorID">Unique ID of the vendor</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.AdvancedSearch(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.VendorItemSearch,LSOne.DataLayer.DataProviders.Inventory.VendorItemSorting,System.Boolean,System.Int32,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            Searches the vendor item for the given criteria
            </summary>
            <param name="entry">Entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="searchCriteria">Criterias for search</param>
            <param name="sortBy">Sort field for returned vendor items</param>
            <param name="sortBackwards">Sort direction of the returned vendor items</param>
            <param name="startRecord">Pagination start index</param>
            <param name="endRecord">Pagination end index</param>
            <param name="totalRecords">Total number of records that match the search criteria</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.CreateTransferOrdersFromRequests(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.Collections.Generic.List{LSOne.Utilities.DataTypes.RecordIdentifier},LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile)">
            <summary>
            Creates transfer orders from a list of requests
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="requestIDs">The list of requests that should be turned into transfer orders</param>
            <param name="createdBy">If empty then the orders are being created on head office, otherwise the Store ID</param>
            <param name="siteServiceProfile">The site service profile used to connect to the site service</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.CreateTransferOrderFromRequest(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.String,System.DateTime,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier@,System.Boolean)">
            <summary>
            Creates a transfer order from a specific request
            </summary>        
            <param name="createdBy">If empty then the order is being created on head office, otherwise the Store ID</param>
            <param name="entry">The entry into the database</param>
            <param name="requestIDtoCopy">The ID of the transfer request to be copied</param>
            <param name="sendingStoreID">The sending store ID to be assigned to the new transfer order. If empty then the sending store ID from the old transfer order is used</param>
            <param name="receivingStoreID">The receiving store ID to be assigned to the new transfer order. If empty then the receiving store ID from the old transfer order is used</param>
            <param name="description">The description to be assigned to the new transfer order. If empty then the description from the old transfer order is used</param>
            <param name="expectedDelivery">The expected delivery date to be assigned to the new transfer order. If empty then DateTime.Now + 3 days is used</param>        
            <param name="closeConnection">If true then the connection to the site service should be closed once the work is finished</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="newOrderID">The ID of the new transfer order that was created</param>        
            <returns></returns>        
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.CreateTransferOrderFromRequest(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.BusinessObjects.Inventory.InventoryTransferOrder,LSOne.Utilities.DataTypes.RecordIdentifier@,System.Boolean)">
            <summary>
            Creates a transfer order from a specific request
            </summary>                
            <param name="entry">The entry into the database</param>
            <param name="requestIDtoCopy">The ID of the transfer request to be copied</param>        
            <param name="closeConnection">If true then the connection to the site service should be closed once the work is finished</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="newOrderID">The ID of the new transfer order that was created</param>        
            <param name="orderInformation">Order header to be used for the copying. If this is null then the information of the copied request header is used. </param>
            <returns></returns>        
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetEffectiveInventoryForItem(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Get the inventory on hand for an item in inventory unit, including unposted purchase orders and store transfers
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="itemID">ID of the item for which to get the inventory</param>
            <param name="storeID">ID of the store for which to get the inventory</param>
            <param name="closeConnection">If true then the connection to the site service should be closed once the work is finished</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetInventoryTransferOrder(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Returns information about a specific inventory transfer order
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="ID">The unique ID Of the transfer order</param>
            <returns>Information about a specific inventory transfer order</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetOrderLinesForInventoryTransfer(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.BusinessObjects.Inventory.InventoryTransferOrderLineSortEnum,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns order lines for a specific inventory transfer order
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="ID">The unique ID of the inventory transfer order</param>
            <param name="sortBy">How to sort the result list</param>
            <param name="sortBackwards">If true then the list is sorted backwards</param>
            <param name="getUnsentItemsOnly">If true then only order lines that have not been sent are returned</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetTransferOrderLine(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.InventoryTransferOrderLine,System.Boolean)">
            <summary>
            Tries to find and return a transfer order line with matching unit of measure and item ID 
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">Site service profile</param>
            <param name="line">The transfer order line you want to get</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the function finishes it's work</param>
            <returns>A InventoryTransferOrderLine object, null if no matching line was found</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.SearchInventoryTransferOrders(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.InventoryTransferFilter,System.Boolean)">
            <summary>
            Search inventory transfer orders based on a filter
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">Site service profile</param>
            <param name="filter">Filter object containing search criteria</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the function finishes it's work</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.SearchInventoryTransferOrdersExtended(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.InventoryTransferFilterExtended,System.Boolean)">
            <summary>
            Search inventory transfer orders based on an extended filter
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">Site service profile</param>
            <param name="filter">Filter object containing search criteria</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the function finishes it's work</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.SearchInventoryTransferOrdersAdvanced(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Int32@,LSOne.DataLayer.BusinessObjects.Inventory.InventoryTransferFilterExtended,System.Boolean)">
            <summary>
            Search inventory transfer orders based on an extended filter with pagination
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">Site service profile</param>
            <param name="filter">Filter object containing search criteria</param>
            <param name="totalRecordsMatching">Total number of matching records based on the search criteria</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the function finishes it's work</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.CopyTransferOrder(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.String,System.DateTime,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier@,System.Boolean)">
            <summary>
            Copies information from one transfer order to another. This function takes individual properties of a transfer order header and creates
            a header object before calling the Site Service
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="orderIDtoCopy">The ID of the transfer order to be copied</param>   
            <param name="sendingStoreID">The sending store ID to be assigned to the new transfer order. If empty then the sending store ID from the old transfer order is used</param>
            <param name="receivingStoreID">The receiving store ID to be assigned to the new transfer order. If empty then the receiving store ID from the old transfer order is used</param>
            <param name="description">The description to be assigned to the new transfer order. If empty then the description from the old transfer order is used</param>
            <param name="expectedDelivery">The expected delivery date to be assigned to the new transfer order. If empty then DateTime.Now + 3 days is used</param>
            <param name="createdBy">If empty then the transfer order is being copied by head office otherwise this should be the store ID</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the function finishes it's work</param>
            <param name="siteServiceProfile">The site service profile that should be used to connect to the site service</param>
            <param name="newOrderID">The ID of the new transfer order that was created</param>        
            <returns></returns>        
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.CopyTransferOrder(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.BusinessObjects.Inventory.InventoryTransferOrder,LSOne.Utilities.DataTypes.RecordIdentifier@,System.Boolean)">
            <summary>
            Copies information from one transfer order to another
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="orderIDtoCopy">The ID of the transfer order to be copied</param>
            <param name="orderInformation">A order header object that has all the information needed to create an order header at head office. </param>        
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the function finishes it's work</param>
            <param name="siteServiceProfile">The site service profile that should be used to connect to the site service</param>
            <param name="newOrderID">The ID of the new transfer order that was created</param>        
            <returns></returns>  
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.CreateTransferOrderFromFilter(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.InventoryTransferOrder,LSOne.DataLayer.BusinessObjects.Replenishment.Containers.InventoryTemplateFilterContainer,LSOne.Utilities.DataTypes.RecordIdentifier@,System.Boolean)">
            <summary>
            Creates a transfer order and adds the items from the filter to the order
            </summary>
            <param name="entry">The entry into the database</param>        
            <param name="orderInformation">A order header object that has all the information needed to create an order header at head office. </param>        
            <param name="filter">Container with filter IDs</param>     
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the function finishes it's work</param>
            <param name="siteServiceProfile">The site service profile that should be used to connect to the site service</param>
            <param name="newOrderID">The ID of the new transfer order that was created</param>       
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.CreateTransferOrderFromFilter(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.String,System.DateTime,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.BusinessObjects.Replenishment.Containers.InventoryTemplateFilterContainer,LSOne.Utilities.DataTypes.RecordIdentifier@,System.Boolean)">
            <summary>
            Creates a transfer order and adds the items from the filter to the order
            </summary>
            <param name="entry">The entry into the database</param>        
            <param name="sendingStoreID">The sending store ID to be assigned to the new transfer order.</param>
            <param name="receivingStoreID">The receiving store ID to be assigned to the new transfer order.</param>
            <param name="description">The description to be assigned to the new transfer order</param>
            <param name="expectedDelivery">The expected delivery date to be assigned to the new transfer order. If empty then DateTime.Now + 3 days is used</param>
            <param name="createdBy">If empty then the transfer order is being copied by head office otherwise this should be the store ID</param>
            <param name="filter">Container with filter IDs</param>        
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the function finishes it's work</param>
            <param name="siteServiceProfile">The site service profile that should be used to connect to the site service</param>
            <param name="newOrderID">The ID of the new transfer order that was created</param>       
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetTotalUnreceivedItemForTransferOrders(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Collections.Generic.List{LSOne.Utilities.DataTypes.RecordIdentifier},System.Boolean)">
            <summary>
            Get total number of unreceived items for a list of transfer orders
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">The site service profile that should be used to connect to the site service</param>
            <param name="transferOrderIds">IDs of the transfer orders</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the function finishes it's work</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.CreateTransferOrderFromTemplate(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.InventoryTransferOrder,LSOne.DataLayer.BusinessObjects.Replenishment.ListItems.TemplateListItem,LSOne.Utilities.DataTypes.RecordIdentifier@,System.Boolean)">
            <summary>
            Create a new transfer order based on a given template
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="orderInformation">An order header object that has all the information needed to create an order header at head office. </param>
            <param name="template">The transfer order template</param>
            <param name="newOrderID">The ID of the new transfer order that was created</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>Status and ID of the created transfer order</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.ImportTransferOrderLinesFromXML(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.String,System.Boolean)">
            <summary>
            Imports transfer order lines from an xml file
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="transferOrderID">ID of the transfer order in which to import lines</param>
            <param name="xmlData">XML data to import</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.Disconnect(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager)">
            <summary>
            Disconnects the connection to the Site service
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.TestConnection(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.String,System.UInt16)">
            <summary>
            Tests the connection to the Site service
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="host">The IP address where the Site service is running</param>
            <param name="port">The port the Site Service is configured to listen to</param>
            <returns>The <see cref="T:LSOne.DataLayer.BusinessObjects.Enums.ConnectionEnum"/> reports how the connection test went</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.TestConnectionWithFeedback(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.String,System.UInt16)">
            <summary>
            Tests the connection to the Site service and displays a msg with the result of the test
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="host">The IP address where the Site service is running</param>
            <param name="port">The port the Site Service is configured to listen to</param>
            <returns>The <see cref="T:LSOne.DataLayer.BusinessObjects.Enums.ConnectionEnum"/> reports how the connection test went</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetInventoryOnHand(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Gets the amount of available inventory
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="itemID">The item to check </param>
            <param name="storeID">The store to find available inventory for</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetInventoryListForItemAndStore(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.DataProviders.Inventory.InventorySorting,System.Boolean,System.Boolean)">
            <summary>
            Get the status of inventory for item and store sorted
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="itemID">The item </param>
            <param name="storeID">The store</param>
            <param name="regionID">The region's ID. Note that if this is RecordIdentifier.Empty then results for all regions will be returned. If the storeID param is not empty, this will be ignored.</param>
            <param name="sort">The sort method</param>
            <param name="backwardsSort">The sort direction</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetInventoryUnitId(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Returns the inventory unit ID for a specific item
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="itemId">The unique ID for the item to be checked</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetItemLedgerList(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.ItemLedgerSearchParameters,System.Boolean)">
            <summary>
            Gets itemledgerentries for the given searchparameters
            </summary>  
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="itemSearch">The search manifest</param>
            <returns>The Item Ledger</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetInventoryListForAssemblyItemAndStore(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.DataProviders.Inventory.InventorySorting,System.Boolean,System.Boolean)">
            <summary>
            Get the status of inventory for item and store sorted
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="itemID">The item </param>
            <param name="storeID">The store</param>
            <param name="regionID">The region's ID. Note that if this is RecordIdentifier.Empty then results for all regions will be returned. If the storeID param is not empty, this will be ignored.</param>
            <param name="sort">The sort method</param>
            <param name="backwardsSort">The sort direction</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInventoryService.GetInventoryOnHandForAssemblyItem(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Gets the amount of available inventory
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="itemID">The item to check </param>
            <param name="storeID">The store to find available inventory for</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.SendOmniJournal(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Omni.OmniJournal,System.Boolean)">
            <summary>
            Send an LS Commerce journal to HQ
            </summary>
            <param name="entry">The database connection</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="omniJournal">LS Commerce journal to send</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.AddInventoryJournalLineImage(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Enums.InventoryEnum,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Adds an image to a stock counting journal line
            </summary>
            <param name="entry">The database connection</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="lineType">The type of line to add the image for. Currently only <see cref="F:LSOne.DataLayer.BusinessObjects.Enums.InventoryEnum.StockCounting"/>, <see cref="F:LSOne.DataLayer.BusinessObjects.Enums.InventoryEnum.StoreTransfer"/> and <see cref="F:LSOne.DataLayer.BusinessObjects.Enums.InventoryEnum.PurchaseOrder"/> are supported</param>
            <param name="templateID">The inventory stock counting template ID used to create the journal</param>
            <param name="omniTransactionID">The ID of the transaction in the inventory app that this line was created for</param>
            <param name="omniLineID">The ID of the line in the transaction that was created in the inventory app</param>
            <param name="image">A Base64 representation of the image</param>
            <param name="imageDescription">The description of the image</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetOmniLicense(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean,LSOne.Utilities.DataTypes.RecordIdentifier)">
            <summary>
            Retrives omni license info assinged to given terminal IDa and omni app ID
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="terminalID">The terminal you want to get omni license information for</param>
            <param name="entry">The entry into the database</param>
            <param name="appID">ID of the omni app</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>Omni license information for the given terminal and omni application</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetOmniLicenses(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Boolean,LSOne.Utilities.DataTypes.RecordIdentifier)">
            <summary>
            Retrives all omni licenses for store
            </summary>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="storeID">ID of the store. This parameter should be null if you are on head office level</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <returns>List of omni licenses</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.SaveOmniLicenses(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Omni.OmniLicense,System.Boolean)">
            <summary>
            Saves a single omni license into the databace
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="omniLicense">The omni license that is going to be save</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.OmniLicenseKeyRecordExists(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Checks if a license key already exists in the database
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="licenseKey">The license key you want to check if already exists in the databace</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>True if the key already exists in the omni license table, false otherwise</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.DeleteOmniLicense(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Deletes a single omni license from the database
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="licenseKey">The license key of the license you want to delete from the database</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetSalesOrder(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.SalesOrder.SalesOrder,System.Boolean)">
            <summary>
            Returns information about a specific sales order
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="salesOrder">The information about the sales order being retrieved</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetSalesOrderList(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.SalesOrder.SalesOrderRequest,System.Collections.Generic.List{LSOne.DataLayer.BusinessObjects.SalesOrder.SalesOrder},System.Boolean)">
            <summary>
            Returns a list of sales orders for a specific customer. 
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="salesOrderRequest">The information needed to get the sales order information. </param>
            <param name="salesOrdes">The sales orders found in the search </param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.PaySalesOrder(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Decimal,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.BusinessObjects.SalesOrder.SalesOrderRequest,System.Boolean)">
            <summary>
            Called when the user is concluding the payment for the sale including the sales order item. 
            TransactionID, TerminalID and StoreID together are a unique identifier for a sale in LS One
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="salesOrderID">The ID of the sales order being paid for</param>
            <param name="amount">The amount that is being paid onto the sales order</param>        
            <param name="transactionID">The transaction ID of the sale</param>
            <param name="salesOrderRequest">Any other information that is needed for implementation - not used in default implementation</param>   
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.CreatePickingList(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.SalesOrder.SalesOrderRequest,System.Boolean)">
            <summary>
            Sends a message to the 3rd party ERP system that a picking list should be printed
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="salesOrderRequest">Any information needed about the sales order</param>        
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.CreatePackingSlip(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.SalesOrder.SalesOrderRequest,System.Boolean)">
            <summary>
            Sends a message to the 3rd party ERP system that a packing slip should be printed
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="salesOrderRequest">Any information needed about the sales order</param>        
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.DeleteImage(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Deletes an image from the image bank
            </summary>
            <param name="entry">The connection to the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="pictureID">The ID of the image to delete</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.DeleteImageList(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Collections.Generic.List{LSOne.Utilities.DataTypes.RecordIdentifier},System.Boolean)">
            <summary>
            Deletes multiple images from the image bank
            </summary>
            <param name="entry">The connection to the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="pictureIDs">A list of image IDs to delete</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetActiveSerialNumbersByItem(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.String,System.Int32,System.Int32,LSOne.DataLayer.BusinessObjects.Enums.SerialNumberSorting,System.Boolean,System.Int32@,System.Boolean)">
            <summary>
             Get list of all serial numbers for a specific item master id. Only active serial numbers will be retrieved. Sold and reserved serial numbers will not be part of the list.
            </summary>
            <param name="entry"></param>
            <param name="siteServiceProfile"></param>
            <param name="itemMasterID"></param>
            <param name="serialNumber"></param>
            <param name="rowFrom"></param>
            <param name="rowTo"></param>
            <param name="sortBy"></param>
            <param name="sortAscending"></param>
            <param name="totalRecordsMatching"></param>
            <param name="closeConnection"></param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetSoldSerialNumbersByItem(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.String,System.Int32,System.Int32,LSOne.DataLayer.BusinessObjects.Enums.SerialNumberSorting,System.Boolean,System.Int32@,System.Boolean)">
            <summary>
             Get list of all sold serial numbers for a specific item master id.
            </summary>
            <param name="entry"></param>
            <param name="siteServiceProfile"></param>
            <param name="itemMasterID"></param>
            <param name="serialNumber"></param>
            <param name="rowFrom"></param>
            <param name="rowTo"></param>
            <param name="sortBy"></param>
            <param name="sortAscending"></param>
            <param name="totalRecordsMatching"></param>
            <param name="closeConnection"></param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.UseSerialNumbers(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Collections.Generic.List{LSOne.DataLayer.BusinessObjects.SerialNumbers.SerialNumber})">
            <summary>
            Marks the items in the list as being sold (used). Part of the transaction conclude.
            Items are marked as used, set if manually entered and set the receiptId.
            </summary>
            <param name="entry"></param>
            <param name="siteServiceProfile"></param>
            <param name="serialNumbers"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.ReserveSerialNumber(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.SerialNumbers.SerialNumber)">
            <summary>
            Serial number is marked as being reserved. If it is manually entered, then the serial number will be added to the database and marked as reserved.
            </summary>
            <param name="entry"></param>
            <param name="siteServiceProfile"></param>
            <param name="serialNumber"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetSerialNumber(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.String)">
            <summary>
            Get serial number by item master id and serial number
            </summary>
            <param name="entry"></param>
            <param name="siteServiceProfile"></param>
            <param name="itemMasterID"></param>
            <param name="serialNumber"></param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.ClearReservedSerialNumbers(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Collections.Generic.List{LSOne.DataLayer.BusinessObjects.SerialNumbers.SerialNumber})">
            <summary>
            The list of serial numbers will be cleared. If they were reserved than this flag is removed, if they were manually entered than they will be deleted.
            </summary>
            <param name="entry"></param>
            <param name="siteServiceProfile"></param>
            <param name="serialNumbers"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetRequestLinesForInventoryTransferAdvanced(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Int32@,LSOne.DataLayer.BusinessObjects.Inventory.InventoryTransferFilterExtended,System.Boolean)">
            <summary>
            Get transfer request lines based on an extended search filter
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">Site service profile</param>
            <param name="transferRequestID">Transfer request ID</param>
            <param name="totalRecordsMatching">Total number of records matching the search filter</param>
            <param name="filter">Filter object containing search criteria</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetTransferRequestLine(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.InventoryTransferRequestLine,System.Boolean)">
            <summary>
            Tries to find and return a transfer request line with matching unit of measure and item ID 
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">Site service profile</param>
            <param name="line">The transfer request line you want to get</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the function finishes it's work</param>
            <returns>A InventoryTransferRequestLine object, null if no matching line was found</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.SearchInventoryTransferRequests(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.InventoryTransferFilter,System.Boolean)">
            <summary>
            Search inventory transfer requests based on a filter
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">Site service profile</param>
            <param name="filter">Filter object containing search criteria</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the function finishes it's work</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.SearchInventoryTransferRequestsExtended(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.InventoryTransferFilterExtended,System.Boolean)">
            <summary>
            Search inventory transfer requests based on an extended filter
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">Site service profile</param>
            <param name="filter">Filter object containing search criteria</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the function finishes it's work</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.SearchInventoryTransferRequestsAdvanced(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Int32@,LSOne.DataLayer.BusinessObjects.Inventory.InventoryTransferFilterExtended,System.Boolean)">
            <summary>
            Search inventory transfer requests based on an extended filter with pagination
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">Site service profile</param>
            <param name="filter">Filter object containing search criteria</param>
            <param name="totalRecordsMatching">Total number of matching records based on the search criteria</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the function finishes it's work</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.CreateTransferRequestFromOrder(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.BusinessObjects.Inventory.InventoryTransferRequest,LSOne.Utilities.DataTypes.RecordIdentifier@,System.Boolean)">
            <summary>
            Creates a transfer request from a specific order
            </summary>                
            <param name="entry">The entry into the database</param>
            <param name="orderIDtoCopy">The ID of the transfer order to be copied</param>
            <param name="closeConnection">If true then the connection to the site service should be closed once the work is finished</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="newRequestID">The ID of the new transfer order that was created</param>
            <param name="requestInformation">A order header object that has information needed to create a request header at head office if the information such as receiving or sending store should be different then on the copied order. </param>        
            <returns></returns>        
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.CopyTransferRequest(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.BusinessObjects.Inventory.InventoryTransferRequest,LSOne.Utilities.DataTypes.RecordIdentifier@,System.Boolean)">
            <summary>
            Copies information from one transfer request to another
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="requestIDtoCopy">The ID of the transfer request to be copied</param>
            <param name="requestInformation">A request header object that has all the information needed to create a request header at head office. </param>        
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the function finishes it's work</param>
            <param name="siteServiceProfile">The site service profile that should be used to connect to the site service</param>
            <param name="newRequestID">The ID of the new transfer request that was created</param>        
            <returns></returns>  
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.CreateTransferRequestFromFilter(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.InventoryTransferRequest,LSOne.DataLayer.BusinessObjects.Replenishment.Containers.InventoryTemplateFilterContainer,LSOne.Utilities.DataTypes.RecordIdentifier@,System.Boolean)">
            <summary>
            Creates a transfer request and adds the items from the filter to the request
            </summary>
            <param name="entry">The entry into the database</param>        
            <param name="requestInformation">A request header object that has all the information needed to create a request header at head office. </param> 
            <param name="filter">Container with filter IDs</param>        
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the function finishes it's work</param>
            <param name="siteServiceProfile">The site service profile that should be used to connect to the site service</param>
            <param name="newRequestID">The ID of the new transfer request that was created</param>       
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.CreateTransferRequestFromTemplate(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.InventoryTransferRequest,LSOne.DataLayer.BusinessObjects.Replenishment.ListItems.TemplateListItem,LSOne.Utilities.DataTypes.RecordIdentifier@,System.Boolean)">
            <summary>
            Create a new transfer request based on a given template
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="requestInformation">A request header object that has all the information needed to create a request header at head office. </param> 
            <param name="template">The transfer request template</param>
            <param name="newRequestID">The ID of the new transfer request that was created</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>Status and ID of the created transfer request</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.PostPurchaseWorksheet(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Post a purchase worksheet
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="purchaseWorksheetID">ID of the purchase worksheet to post</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>A container with operation result and number of created purchase orders</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.PurchaseWorksheetHasInventoryExcludedItems(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Checks if there is any item in a purchase worksheet that is exluded from inventory operations (ex. Service items)
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="purchaseWorksheetID">ID of the purchase worksheet to check</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>True if there is an inventory excluded item</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.CreatePurchaseWorksheetLinesFromFilter(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Creates purchase worksheet lines based on a filter
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="purchaseWorksheetID">Purchase worksheet ID</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>Number of lines inserted</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.RefreshPurchaseWorksheetLines(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Refresh the lines in a purchase worksheet by recalculating suggested quantities and adding missing items from the filter
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="purchaseWorksheetID">ID of the purchase worksheet</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.CalculateSuggestedQuantity(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Calculate suggested quantity for replenishment for an item in a specific store
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="itemID">ID of the item</param>
            <param name="storeID">ID of the store</param>
            <param name="unitID">ID of the unit in which to convert the result</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetInventoryTemplateItems(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Boolean,LSOne.DataLayer.BusinessObjects.Replenishment.Containers.InventoryTemplateFilterContainer)">
            <summary>
            Gets filter list of inventory template items
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="closeConnections"></param>
            <param name="filter">Container with IDs to filter</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetInventoryTemplateItems(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Returns all items that match the item filter for given inventory template.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="templateId">Id of the <see cref="T:LSOne.DataLayer.BusinessObjects.Replenishment.InventoryTemplate"/></param>
            <param name="storeID">Store ID used in case of filtering by inventory on hand</param>
            <param name="getItemsWithNoVendor">If true, items that have no vendor will also be included</param>
            <param name="closeConnection"></param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetInventoryOnHand(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Gets the amount of available inventory
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="itemID">The item to check </param>
            <param name="storeID">The store to find available inventory for</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetInventoryListForItemAndStore(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.DataProviders.Inventory.InventorySorting,System.Boolean,System.Boolean)">
            <summary>
            Get the status of inventory for item and store sorted
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="itemID">The item </param>
            <param name="storeID">The store</param>
            <param name="regionID">The region's ID. Note that if this is RecordIdentifier.Empty then results for all regions will be returned. If the storeID param is not empty, this will be ignored.</param>
            <param name="sort">The sort method</param>
            <param name="backwardsSort">The sort direction</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetInventoryListForStore(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.DataProviders.Inventory.InventorySorting,System.Boolean,System.Int32,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            Gets inventory status for all items in a store (or all stores)
            </summary>
            <param name="entry">Entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="storeID">The store's ID. Note that if this is RecordIdentifier.Empty then results for all stores will be returned</param>
            <param name="sort">Sort enum that determines in which order the results will be returned</param>
            <param name="backwardsSort">Results will be returned in backwards order</param>
            <param name="rowFrom">Start index</param>
            <param name="rowTo">End index</param>
            <param name="total">Total number of records</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>Inventory status for an item in a store (or all stores)</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetInventoryUnitId(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Returns the inventory unit ID for a specific item
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="itemId">The unique ID for the item to be checked</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetEffectiveInventoryForItem(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Get the inventory on hand for an item in inventory unit, including unposted purchase orders and store transfers
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="itemID">ID of the item for which to get the inventory</param>
            <param name="storeID">ID of the store for which to get the inventory</param>
            <param name="closeConnection">If true then the connection to the site service should be closed once the work is finished</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetLedgerEntryCountForItem(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Gets the total number of ledger entries for the given item
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            /// <param name="itemID">The unique ID for the item to be checked</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetInventoryListForAssemblyItemAndStore(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.DataProviders.Inventory.InventorySorting,System.Boolean,System.Boolean)">
            <summary>
            Get the status of inventory for item and store sorted
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="itemID">The item </param>
            <param name="storeID">The store</param>
            <param name="regionID">The region's ID. Note that if this is RecordIdentifier.Empty then results for all regions will be returned. If the storeID param is not empty, this will be ignored.</param>
            <param name="sort">The sort method</param>
            <param name="backwardsSort">The sort direction</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetInventoryOnHandForAssemblyItem(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Gets the amount of available inventory
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="itemID">The item to check </param>
            <param name="storeID">The store to find available inventory for</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetJournalListAdvancedSearch(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.InventoryAdjustmentFilter,System.Boolean,System.Int32@)">
            <summary>
            Get a list of journals based on a filter
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="filter">Filter container</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="totalRecordsMatching">Total number of records that matched the search criteria</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.InventoryAdjustmentExists(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Checks if an inventory adjustment exists
            </summary> 
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="stockCountingID">The ID of the document</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetAdjustmentStatus(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Get the current processing status for a journal
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="journalId">ID fo the journal to check</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.SetAdjustmentStatus(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.BusinessObjects.Enums.InventoryProcessingStatus,System.Boolean)">
            <summary>
            Set the processing status for a journal
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="journalId">ID fo the journal to set</param>
            <param name="status">The status to set</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.PostInventoryAdjustmentLine(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.InventoryJournalTransaction,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.BusinessObjects.Enums.InventoryTypeEnum,System.Boolean)">
            <summary>
            Saves an inventory adjustment line that is attached to a inventory journal transaction
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="inventoryJournalTrans">The inventory adjustment journal</param>
            <param name="storeId">The store the adjustment should be applied to</param>
            <param name="typeOfAdjustmentLine">What type of inventory adjustment is it</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.DeleteInventoryJournal(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Deletes an inventory journal only if it's empty (has no lines).
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="journalId">The id of the inventory journal that should be deleted</param>
            <returns>False if the journal has lines or an error occurred when deleting it. True otherwise.</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.AdvancedSearch(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Enums.InventoryJournalTypeEnum,LSOne.DataLayer.BusinessObjects.Inventory.InventoryJournalSearch,LSOne.DataLayer.DataProviders.Inventory.InventoryAdjustmentSorting,System.Boolean,System.Int32,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            Paginated search through inventory journal based on the given <see cref="T:LSOne.DataLayer.BusinessObjects.Inventory.InventoryJournalSearch">search criteria object</see>
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="journalType"></param>
            <param name="searchCriteria"></param>
            <param name="sortBy"></param>
            <param name="sortBackwards"></param>
            <param name="rowFrom"></param>
            <param name="rowTo"></param>
            <param name="totalRecords"></param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.AdvancedSearch(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.InventoryJournalLineSearch,System.Int32@,System.Boolean)">
            <summary>
            Paginated search through inventory journal lines based on the given <see cref="T:LSOne.DataLayer.BusinessObjects.Inventory.InventoryJournalLineSearch">search criteria object used in adjustments, reserved and parked inventory</see>
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="searchCriteria">Object containing search criterias</param>
            <param name="totalRecords"></param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.UpdateStatus(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.BusinessObjects.Enums.InventoryJournalStatus,System.Boolean)">
            <summary>
            Updates the journal line status (Open, Posted or Partially Posted) and, if needed, the line's master id.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="journalId">Journal id to which this line belongs to</param>
            <param name="lineNum">Curent line id</param>
            <param name="masterId">Current line master id (if available)</param>
            <param name="newStatus">The new status</param>
            <returns>The <see cref="T:System.Guid">MasterID</see> of the updated journal line</returns>
            <remarks>Used by the Parked Inventory > Move to Inventory functionality</remarks>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetMovedToInventoryLines(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.BusinessObjects.Inventory.InventoryJournalTransactionSorting,System.Boolean,System.Boolean)">
            <summary>
            Returns the already moved-2-inventory items for a given parked journal line
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="journalId">Journal id to which this line belongs to</param>
            <param name="lineMasterId">The journal line Master id( of type <see cref="T:System.Guid"/>) </param>
            <param name="sortBy">The column index to sort by</param>
            <param name="sortBackwards">Whether to sort the result backwards or not</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GenerateInventoryAdjustmentID(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Boolean)">
            <summary>
            Generates a new inventory adjustment ID
            </summary>
            <param name="entry">The database connection</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>New inventory adjustment ID</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetStockCounting(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Get stock counting
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="journalId">The journal ID to be get</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>The inventory adjustment</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.DeleteStockCounting(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Deletes a stock counting journal
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="stockCountingID">The stock counting ID to delete</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>Result of the operation</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.SearchJournalTransactions(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.InventoryJournalTransactionFilter,System.Int32@,System.Boolean)">
            <summary>
            Searches for Stock counting entries 
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="filter">Filter settings container</param>
            <param name="totalRecordsMatching">out: how many rows there are in total</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>The list of inventory journal transactions</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.RefreshStockCountingJournalInventoryOnHand(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Updates the on hand inventory of all journal transactions in a stock counting journal 
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="journalID">Entry of the stock counting journal</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.DeleteMultipleJournalTransactions(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Collections.Generic.List{LSOne.Utilities.DataTypes.RecordIdentifier},System.Boolean)">
            <summary>
            Deletes multiple inventory journal transaction lines
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="IDs">The IDs of the inventory journal to delete</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>       
            <returns>Operation result</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.SaveJournalTransaction(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.InventoryJournalTransaction,System.Boolean)">
            <summary>
            Saves a stock counting line
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="ijTransaction">The line to save</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.PostMultipleStockCountingLines(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Collections.Generic.List{LSOne.DataLayer.BusinessObjects.Inventory.InventoryJournalTransaction},LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Posts multiple stock counting lines
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="ijTransactions">The lines to post</param>
            <param name="storeId">The store the lines are for</param>
            <returns>Status and indicates whether the journal still has unposted lines</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.PostAllStockCountingLines(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Post all lines from a stock counting journal
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="stockCountingJournalID">The stock counting ID for which to post all lines</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>Result of the operation</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.AsyncPostAllStockCountingLines(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier)">
            <summary>
            Post all lines from a stock counting journal asynchronously
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="stockCountingJournalID">The stock counting ID for which to post all lines</param>
            <returns>Result of the operation</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetInventoryJournalTransaction(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Get inventory journal transaction by ID
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="journalTransactionId">The journal transaction ID</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>Returns the inventory journal transaction for the supplied ID</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.CreateStockCountingFromExistingAdjustment(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.String,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Create a new stock counting journal and copy all lines from an existing journal
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="storeID">Store ID for the new journal</param>
            <param name="description">Description of the new journal</param>
            <param name="existingAdjustmentID">Existing journal from which to copy the lines</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>Status and ID of the created journal</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.CreateStockCountingFromFilter(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.String,LSOne.DataLayer.BusinessObjects.Replenishment.Containers.InventoryTemplateFilterContainer,System.Boolean)">
            <summary>
            Create a new stock counting journal from an filter
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="storeID">Store ID for the new journal</param>
            <param name="description">Description of the new journal</param>
            <param name="filter">Container with desired item filters</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>Status and ID of the created journal</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.CreateStockCountingFromTemplate(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Replenishment.ListItems.TemplateListItem,System.Boolean)">
            <summary>
            Create a new stock counting journal based on a given template
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="template">The stock counting template</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>Status and ID of the created journal</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.ImportStockCountingFromExcel(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Data.DataTable,System.Boolean)">
            <summary>
            Create a new stock counting journal based on a given template
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="data">Data to import, parsed from excel file</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>A list of import results</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.CompressAllStockCountingLines(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Compresses all lines on a stock counting journal, that have the same item and unit
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="stockCountingID">Stock counting journal id</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GoodsReceivingDocumentFullyReceived(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Has the document been fully recieved
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="goodsReceivingDocumentID">The ID if the document</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GoodsReceivingDocumentAllLinesPosted(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Are all the lines on the document posted
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="goodsReceivingDocumentID">The ID of the document</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetPurchaseOrderID(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Gets the purchase order ID for the goods receiving dosument
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="goodsReceivingDocumentID">The ID if the document</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.DeleteGoodsReceivingLinesForAPurchaseOrderLine(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Deletes all goods receiving lines attached to a purchase order line. Use PurchaseOrderLineHasPostedGoodsReceivingDocumentLine to validate that no goods receiving lines have been posted before deleting them
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="purchaseOrderLineID">The ID for the purchase order line. PrimaryID is the purchase Order ID and SecondaryID is the line number</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GoodsReceivingDocumentExists(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Checks if a goods receiving document exists for a purchase order
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="purchaseOrderID">The ID for the purchase order that is to be checked</param>
            <returns>Return true if a goods receiving document is found for this purchase order ID</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.SaveGoodsReceivingDocument(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.GoodsReceivingDocument,System.Boolean)">
            <summary>
            Saves a goods receiving document header
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="documentHeader">The goods receiving document header that is to be saved</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetPurchaseOrdersWithNoGoodsReceivingDocumentForStore(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.DataProviders.Inventory.PurchaseOrderSorting,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets a list of purchase orders without a goods receiving document
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="storeID">Filter by store, use RecordIdentifier.Empty for no filter</param>
            <param name="sorting">the sort method</param>
            <param name="sortBackwards">The sort direction</param>
            <param name="includeLineTotals">True if the total quantity of items and total number of items should be included in the query. Used in OMNI</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.CreatePostedGoodsReceivingDocumentLinesFromPurchaseOrder(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Creates posted goods receiving lines for all the lines in the purchase order
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="purchaseOrderID">The ID purchase order that the goods receiving lines should be created from</param>
            <returns>Result of the posting operation</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.DeleteGoodsReceivingDocument(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            If the Goods receiving document does not have any posted lines the document is deleted.
            </summary>
            <param name="goodsReceivingDocumentID">The document to be deleted</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>Retrns <see cref="T:LSOne.DataLayer.BusinessObjects.Enums.GoodsReceivingDocumentDeleteResult"/> that tells us if there were posted lines or if the document was deleted </returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetGoodsReceivingDocuments(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.GoodsReceivingDocumentSearch,System.Boolean)">
            <summary>
            Searches for all goods receiving documents that match the search criteria as it has been set.
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="searchCriteria">One or more of the variables need to be set so that the search is limited, otherwise all documents are returned</param>
            <returns>A list of the goods receiving documents found in the search</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetGoodsReceivingDocument(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Gets a specific Goods recieveing document
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="goodsReceivingDocumentID">The ID of the document</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetGoodsReceivingDocumentLine(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Gets a goods receiving document line
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="goodsReceivingDocumentID">The ID of the document</param>
            <param name="storeID">The ID of the store</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetReceivedTotals(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Int32,System.Boolean)">
            <summary>
            Retrieves the sum of all received items per goods receiving document. The list of documents is controlled by the search criteria <see cref="T:LSOne.DataLayer.BusinessObjects.Inventory.GoodsReceivingDocumentLineSearch"/>
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="numberOfDocuments">For how many GR documents should the total be retrieved</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetTotalNumberOfGRDocuments(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Boolean)">
            <summary>
            Return the total number of GR documents that are in the database
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>the total number of GR documents that are in the database</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.CountGoodsReceivingDocumentsSearchResults(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.GoodsReceivingDocumentSearch,System.Boolean)">
            <summary>
            Returns the total number of goods receiving documents that are found using the search criteria.
            The GetGoodsReceivingDocuments function limits the result set so this tells us how many there are available in total
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="searchCriteria">One or more of the variables need to be set so that the search is limited, otherwise all documents are returned</param>
            <returns>the total number of goods receiving documents that are found using the search criteria</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetGoodsReceivingDocumentLinesForAPurchaseOrderLine(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Returns all goods receiving lines for a specific purchase order line
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="purchaseOrderLineID">the unique ID for the purchase order line</param>
            <returns>All goods receiving lines attached to one specific purchase order line</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.SearchGoodsReceivingDocumentLines(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.GoodsReceivingDocumentLineSearch,LSOne.DataLayer.DataProviders.Inventory.GoodsReceivingDocumentLineSorting,System.Boolean,System.Boolean,System.Int32@)">
            <summary>
            Search for goods receiving lines 
            </summary>        
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="searchCriteria">Search paramters</param>
            <param name="sortBy">Sort method</param>
            <param name="sortBackwards">Sort direction</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="totalCount">Total rows available</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.PostGoodsReceivingLine(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Posts the goods receiving line with the supplied ID
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="goodsReceivingDocumentLineID">The ID of the line</param>        
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.UpdateGoodsReceivingDocumentStatus(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Updates the status of a given goods receiving document if necessary. Returns whether the document was updated or not.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="goodsReceivingDocumentID">The ID of the document</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.SaveGoodsReceivingDocumentLine(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.GoodsReceivingDocumentLine,System.Boolean)">
            <summary>
            Saves a given goods receiving document line into the database
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="goodsReceivingDocumentLine">The line to save</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.DeleteGoodsReceivingDocumentLine(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Deletes the supplied goods receiving document line
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="goodsReceivingDocumentLineID">The line to delete</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.CreateGoodsReceivingDocumentLinesFromPurchaseOrder(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Create unposted goods receiving lines from purchase order lines.
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">Site service profile to use</param>
            <param name="purchaseOrderID">Purchase order ID from which to create the lines</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GoodsReceivingDocumentHasLines(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Check if a goods receiving document contains any lines
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">Site service profile to use</param>
            <param name="goodsReceivingDocumentID">Goods receiving document ID to check</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>True if the document contains any lines, false otherwise</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.MaxOverGoodsReceive(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Boolean)">
            <summary>
            Gets the centralized Overreceiving setting
            </summary>  
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetGoodsReceivingDocumentLines(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Gets existing lines for a specific goods receiving document
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="goodsReceivingID">The unique ID for the goods receiving document</param>
            <returns>A list of goods receiving lines</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GoodReceivingDocumentLineIsPosted(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Check if a goods receiving line is posted
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">Site service profile to use</param>
            <param name="goodsReceivingDocumentLineID">Goods receiving line ID to check</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>True if the line is posted, false otherwise</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.PostGoodsReceivingDocument(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Post all lines from a goods receiving document
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="goodsReceivingDocumentID">The ID of the goods receiving document to post</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>Result of the operation</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.PurchaseOrderLineHasPostedGoodsReceivingDocumentLine(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Checks if a specific purchase order line has a goods receiving line against it already. 
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="purchaseOrderLineID">The ID for the purchase order line. PrimaryID is the purchase Order ID and SecondaryID is the line number</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>If the purchase order line has a goods receiving document line against it the function returns true</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.DeletePurchaseOrderLine(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Deletes a specific purchase order line
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="purchaseOrderLineID">The ID for the purchase order line. PrimaryID is the purchase Order ID and SecondaryID is the line number</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>If true then the purchase order line has been deleted</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetPurchaseOrder(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Retrieves information about a purchase order header
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="purchaseOrderID">The ID for the purchase order header</param>
            <returns>Information about the purchase order header</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.SavePurchaseOrder(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.PurchaseOrder,System.Boolean)">
            <summary>
            Saves a purchase order header
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="purchaseOrder">The purchase order header to be saved</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.CopyLinesAndBetweenMiscChargesPurchaseOrders(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.BusinessObjects.Inventory.PurchaseOrder,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.BusinessObjects.Enums.TaxCalculationMethodEnum,System.Boolean)">
            <summary>
            Copies all item lines and misc charges from oldPurchaseOrderID to newPurchaseOrderID
            </summary>
            <param name="entry"></param>
            <param name="siteServiceProfile"></param>
            <param name="fromPurchaseOrderID"></param>
            <param name="newPurchaseOrder"></param>
            <param name="storeID"></param>
            <param name="taxCalculationMethod"></param>
            <param name="closeConnection"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GeneratePurchaseOrderID(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Boolean)">
            <summary>
            Generates a new purchase order ID
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>New purchase order ID</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.SaveAndReturnPurchaseOrder(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.PurchaseOrder,System.Boolean)">
            <summary>
            Saves a given purchase order into the database
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="purchaseOrder">The Purchase order to save</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>Purchase order</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.PurchaseOrderHasGoodsReceivingDocument(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Checks if a goods receiving document exists against a specific purchase order
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="purchaseOrderID">The ID of the purchase order to be checked</param>
            <returns>Returns true if a goods receiving document exists</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.PostAndReceiveAPurchaseOrder(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.PurchaseOrder,System.Boolean)">
            <summary>
            Creates and posts a goods receiving document for all lines within the purchase order
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="purchaseOrder">The purchase order that is to be posted and received</param>
            <returns>Result of the posting operation</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.PurchaseOrderHasPurchaseOrderLines(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Returns true if the purchase order has any items lines
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="purchaseOrderID">The ID of the purchase order that is being checked</param>
            <returns>Return true if any item lines are on the purchase order</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.ChangeDiscountsForPurchaseOrderLines(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Boolean)">
            <summary>
            Goes through all the purchase order lines and updates either the discount amount and discount percentage on each line
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="purchaseOrderID">The ID of the purchase order that is being checked</param>
            <param name="storeID">The ID of the store the purchase order belongs to</param>
            <param name="discountPercentage">The discount % that should be used for updating. If null then this value is ignored</param>
            <param name="discountAmount">The discount amount that should be used for updating. If null then this value is ignored</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.DeletePurchaseOrderMiscCharges(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Deletes a specific miscellanious charge on a purchase order
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="purchaseOrderMiscChargeID">Unique ID of the miscellanious charge line to be deleted</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetMischChargesForPurchaseOrder(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Gets a purchase order misc charges for a given purchase order
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="purchaseOrderID">The ID of the purchase order to get misc charges for</param>
            <param name="includeReportFormatting">Set to true if you want price and quantity formatting, usually for reports</param>
            <returns>A purchase order misc charge with a given ID</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetPurchaseOrderMiscCharge(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Gets information about a specific miscellanious charge
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="purchaseOrderMiscChargeID">The ID of the misc charge being retrieved</param>
            <param name="includeReportFormatting">Set to true if you want price and quantity formatting, usually for reports</param>
            <returns>Information about the msc charge</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.SavePurchaseOrderMiscCharge(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.PurchaseOrderMiscCharges,System.Boolean)">
            <summary>
            Saves a purchase order misc. charge. If no line number is on the object a new ID will be created
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="purchaseOrderMiscCharge">The misc. charge to be saved</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetOrderedTotals(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Int32,System.Boolean)">
            <summary>
            Retrieves the sum of all ordered items per purchase order that is attached to a goods receiving document. 
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="numberOfDocuments">For how many GR documents should the total be retrieved</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetTotalNumberOfProductOrders(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Boolean)">
            <summary>
            Return the total number of purchase orders that are in the database
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>the total number of purchase orders that are in the database</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.SavePurchaseOrderLine(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.PurchaseOrderLine,System.Boolean)">
            <summary>
            Saves a specific purchase order line
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="purchaseOrderLine">The purchase order line that is to be saved</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetUnitsForPurchaserOrderItemVariant(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Gets the relevant unists for the purchase order and item
            </summary> 
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="purchaseOrderID">The purchase order</param>
            <param name="itemID">The item</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetPurchaseOrderLineNumberFromItemInfo(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Gets the Line number for the item
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="unitID">The unit ID</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="purchaseOrderID">The purchase order</param>
            <param name="retailItemID">The item</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetPurchaseOrderLine(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Gets a purchase order line
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="purchaseOrderLineID">The purchase order line ID</param>
            <param name="storeID">the store the purchase order belongs to </param>
            <param name="includeReportFormatting">If formatting information should be included</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.CreatePurchaseOrderFromFilter(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.PurchaseOrder,LSOne.DataLayer.BusinessObjects.Replenishment.Containers.InventoryTemplateFilterContainer,LSOne.Utilities.DataTypes.RecordIdentifier@,System.Boolean)">
            <summary>
            Create a new purchase order from an filter
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="purchaseOrderHeader">Purchase order header information</param>
            <param name="filter">Container with desired item filters</param>
            <param name="newOrderID">The ID of the new purchase order that was created</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>Status and ID of the created purchase order</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.CreatePurchaseOrderFromTemplate(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.PurchaseOrder,LSOne.DataLayer.BusinessObjects.Replenishment.ListItems.TemplateListItem,LSOne.Utilities.DataTypes.RecordIdentifier@,System.Boolean)">
            <summary>
            Create a new purchase order based on a given template.
            </summary>
            <param name="entry">The entry into the database.</param>
            <param name="siteServiceProfile">Which site service to use for this operation.</param>
            <param name="purchaseOrderHeader">Purchase order header information</param>
            <param name="template">The purchase order template.</param>
            <param name="newOrderID">The ID of the new purchase order that was created</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>Status and ID of the created purchase order.</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetSumOfReservedItemByStore(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.BusinessObjects.Enums.InventoryJournalTypeEnum,System.Boolean)">
            <summary>
            Returns the sum of reservations at a supplied store
            </summary> 
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="itemID">The item </param>
            <param name="storeID">The store</param>
            <param name="inventoryUnitID">The inventory unit ID</param>
            <param name="journalType">The type of reservation</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetInventoryTransferOrder(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Returns information about a specific inventory transfer order
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="ID">The unique ID Of the transfer order</param>
            <returns>Information about a specific inventory transfer order</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetOrderLinesForInventoryTransfer(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.BusinessObjects.Inventory.InventoryTransferOrderLineSortEnum,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns order lines for a specific inventory transfer order
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="ID">The unique ID of the inventory transfer order</param>
            <param name="sortBy">How to sort the result list</param>
            <param name="sortBackwards">If true then the list is sorted backwards</param>
            <param name="getUnsentItemsOnly">If true then only order lines that have not been sent are returned</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetTransferOrderLine(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.InventoryTransferOrderLine,System.Boolean)">
            <summary>
            Tries to find and return a transfer order line with matching unit of measure and item ID 
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">Site service profile</param>
            <param name="line">The transfer order line you want to get</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the function finishes it's work</param>
            <returns>A InventoryTransferOrderLine object, null if no matching line was found</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.SaveInventoryTransferOrderLine(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.InventoryTransferOrderLine,System.Boolean,LSOne.Utilities.DataTypes.RecordIdentifier@,System.Boolean)">
            <summary>
            Saves a transfer order line
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="inventoryTransferOrderLine">The transfer order line to save </param>
            <param name="isReceiving">Indicates of the transfer order associated to this line is sent and the line is edited during the receiving process of the order</param>
            <param name="newLineID">ID of the created line</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetOrderLinesForInventoryTransferAdvanced(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Int32@,LSOne.DataLayer.BusinessObjects.Inventory.InventoryTransferFilterExtended,System.Boolean)">
            <summary>
            Get transfer order lines based on an extended search filter
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">Site service profile</param>
            <param name="transferOrderID">Transfer order ID</param>
            <param name="totalRecordsMatching">Total number of records matching the search filter</param>
            <param name="filter">Filter object containing search criteria</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.SearchInventoryTransferOrders(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.InventoryTransferFilter,System.Boolean)">
            <summary>
            Search inventory transfer orders based on a filter
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">Site service profile</param>
            <param name="filter">Filter object containing search criteria</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the function finishes it's work</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.SearchInventoryTransferOrdersExtended(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.InventoryTransferFilterExtended,System.Boolean)">
            <summary>
            Search inventory transfer orders based on an extended filter
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">Site service profile</param>
            <param name="filter">Filter object containing search criteria</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the function finishes it's work</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.SearchInventoryTransferOrdersAdvanced(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Int32@,LSOne.DataLayer.BusinessObjects.Inventory.InventoryTransferFilterExtended,System.Boolean)">
            <summary>
            Search inventory transfer orders based on an extended filter with pagination
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">Site service profile</param>
            <param name="filter">Filter object containing search criteria</param>
            <param name="totalRecordsMatching">Total number of matching records based on the search criteria</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the function finishes it's work</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.CreateTransferOrdersFromRequests(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.Collections.Generic.List{LSOne.Utilities.DataTypes.RecordIdentifier},LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Boolean)">
            <summary>
            Creates transfer orders from a list of requests
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="requestIDs">The list of requests that should be turned into transfer orders</param>
            <param name="createdBy">If empty then the orders are being created on head office, otherwise the Store ID</param>
            <param name="siteServiceProfile">The site service profile used to connect to the site service</param>
            <param name="closeConnection">If true then the connection to the site service is closed</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.CreateTransferOrderFromRequest(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.BusinessObjects.Inventory.InventoryTransferOrder,LSOne.Utilities.DataTypes.RecordIdentifier@,System.Boolean)">
            <summary>
            Creates a transfer order from a specific request
            </summary>                
            <param name="entry">The entry into the database</param>
            <param name="requestIDtoCopy">The ID of the transfer request to be copied</param>
            <param name="orderInformation">A order header object that has all the information needed to create an order header at head office. </param>                
            <param name="closeConnection">If true then the connection to the site service should be closed once the work is finished</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="newOrderID">The ID of the new transfer order that was created</param>        
            <returns></returns>        
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.CopyTransferOrder(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.BusinessObjects.Inventory.InventoryTransferOrder,LSOne.Utilities.DataTypes.RecordIdentifier@,System.Boolean)">
            <summary>
            Copies information from one transfer order to another
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="orderIDtoCopy">The ID of the transfer order to be copied</param>
            <param name="orderInformation">A order header object that has all the information needed to create an order header at head office. </param>        
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the function finishes it's work</param>
            <param name="siteServiceProfile">The site service profile that should be used to connect to the site service</param>
            <param name="newOrderID">The ID of the new transfer order that was created</param>        
            <returns>Returns the ID of the transfer order that has been created</returns>  
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.CreateTransferOrderFromFilter(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.InventoryTransferOrder,LSOne.DataLayer.BusinessObjects.Replenishment.Containers.InventoryTemplateFilterContainer,LSOne.Utilities.DataTypes.RecordIdentifier@,System.Boolean)">
            <summary>
            Creates a transfer order and adds the items from the filter to the order
            </summary>
            <param name="entry">The entry into the database</param>        
            <param name="orderInformation">A order header object that has all the information needed to create an order header at head office. </param>
            <param name="filter">Container with filter IDs</param>        
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the function finishes it's work</param>
            <param name="siteServiceProfile">The site service profile that should be used to connect to the site service</param>
            <param name="newOrderID">The ID of the new transfer order that was created</param>       
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetTotalUnreceivedItemForTransferOrders(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Collections.Generic.List{LSOne.Utilities.DataTypes.RecordIdentifier},System.Boolean)">
            <summary>
            Get total number of unreceived items for a list of transfer orders
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">The site service profile that should be used to connect to the site service</param>
            <param name="transferOrderIds">IDs of the transfer orders</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the function finishes it's work</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.CreateTransferOrderFromTemplate(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.InventoryTransferOrder,LSOne.DataLayer.BusinessObjects.Replenishment.ListItems.TemplateListItem,LSOne.Utilities.DataTypes.RecordIdentifier@,System.Boolean)">
            <summary>
            Create a new transfer order based on a given template
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="orderInformation">An order header object that has all the information needed to create an order header at head office. </param>
            <param name="template">The transfer order template</param>
            <param name="newOrderID">The ID of the new transfer order that was created</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>Status and ID of the created transfer order</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.ImportTransferOrderLinesFromXML(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.String,System.Boolean)">
            <summary>
            Imports transfer order lines from an xml file
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="transferOrderID">ID of the transfer order in which to import lines</param>
            <param name="xmlData">XML data to import</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetVendor(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Gets information about a specific vendor
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="vendorID">The unique ID for the vendor being retrieved</param>
            <param name="deleted">If true we fetch vendors that have been deleted and if true vendors that are active</param>
            <returns>An object with information about the Vendor</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetVendorsSalesTaxGroupID(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Returns the sales tax group for the vendor
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="vendorID">The unique ID for the vendor that is being checked</param>
            <returns>The ID of the tax group on the vendor</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetVendorList(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Boolean)">
            <summary>
            Gets a list of all vendors
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>A list of vendors</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.DeleteVendors(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Collections.Generic.List{LSOne.Utilities.DataTypes.RecordIdentifier},System.Boolean)">
            <summary>
            Deletes a list of vendors. When deleting a deleted flag is set to true on the vendor
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="toDeleteList">A list of unique vendor IDs to be deleted</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.DeleteVendorItemByRetailItemID(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Collections.Generic.List{LSOne.DataLayer.BusinessObjects.MasterIDEntity},LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Deletes all vendor items for the given retail item ID.
            </summary>
            <remarks>Edit vendor permission is needed to execute this method</remarks>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="toDeleteList">The IDs of the retail items</param>
            <param name="vendorID">The ID of the vendor</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.DeleteVendorItems(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Collections.Generic.List{LSOne.Utilities.DataTypes.RecordIdentifier},System.Boolean)">
            <summary>
            Deletes a list of items
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="toDeleteList">A list of unique item IDs to be deleted</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.DeleteVendorContact(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Collections.Generic.List{LSOne.Utilities.DataTypes.RecordIdentifier},System.Boolean)">
            <summary>
            Delete a vendor contact
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="contactsToDelete">IDs of the contacts to delete</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetVendorContactList(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Returns a list of vendor contacts
            </summary>
            <param name="entry">The entry into the database</param>        
            /// <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="vendorID">ID of the vendor</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetVendorContact(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Returns a vendor contact
            </summary>
            <param name="entry">The entry into the database</param>        
            /// <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="contactID">ID of the contact</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.SaveVendorContact(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Contact,System.Boolean)">
            <summary>
            Saves or updates a vendor contact
            </summary>          
            /// <param name="entry">The entry into the database</param>   
            <param name="siteServiceProfile">Which site service to use for this operation</param>   
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="contact">Contact to save or update</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.RestoreVendors(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Collections.Generic.List{LSOne.Utilities.DataTypes.RecordIdentifier},System.Boolean)">
            <summary>
            Activates a list of vendors. When activating the  deleted flag is set to false on the vendor
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="toActivateList">A list of unique vendor IDs to be activated</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetVendors(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.VendorSearch,System.Boolean)">
            <summary>
            Returns a list of vendors that fulfill the conditions in the search criteria paramteer
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="searchCriteria">The conditions that should be applied to the search</param>
            <returns>A list of items that apply to the search conditions</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetVendorsList(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.DataProviders.Inventory.VendorSorting,System.Boolean,System.Boolean)">
            <summary>
            Returns a list of vendors that have not been deleted
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="sortBy">A enum that defines how the result should be sorted</param>
            <param name="sortBackwards">Set to true if wanting backwards sort</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>A list of vendors</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.VendorExists(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Checks if a specific ID already exists for a vendor
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="vendorID">The unique ID to check</param>
            <returns>True if the vendor ID already exists</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.SaveVendor(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.Vendor,System.Boolean)">
            <summary>
            Saves the vendor information
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="vendor">The information to be saved</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.SaveAndReturnVendor(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.Vendor,System.Boolean)">
            <summary>
            Saves and returns the vendor information
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="vendor">The information to be saved</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>Vendor</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetVendorItem(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Get a vendor item based on the internal vendor ID
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="internalID">The unique ID for the vendor item</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetVendorItem(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Get a vendor item based on vendor, item and unit ID
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="vendorID">The unique ID for the vendor</param>
            <param name="itemID">The unique ID for the item</param>
            <param name="unitID">The unique ID for the unit</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetFirstVendorItem(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Each item can be added multiple times to a vendor with different unit ID's. This function returns the first one found 
            and should only be used when the unit ID is not available.
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="vendorID">The unique ID for the vendor</param>
            <param name="itemID">The unique ID for the item</param>
            <returns>The first vendor item found</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetDistinctRetailItemsForVendor(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Gets a list of DataEntities that contains distinct list of retail item ID's and Item Description for a given vendorID
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="vendorID">ID of the vendor to get the list for</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.VendorItemExistsExcludingCurrentRecord(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Checks if a vendor item by a given Vendor ID and vendor item ID exists, excluding current record from the check
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="vendorID">ID of the vendor to check for</param>
            <param name="vendorItemID">ID of the vendor item to check for (this is external vendor specific id)</param>
            <param name="oldRecordID">ID of the old record which we skip comparing to</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>True if the vendor item exists, else false</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.VendorItemExistsExcludingCurrentRecordByVendorIDRetailIDAndUnitID(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Checks if a vendor item by a given Vendor ID, retailID and unitID, excluding current record from the check
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="vendorID">ID of the vendor to check for</param>
            <param name="retailID">ID of the retail item</param>
            <param name="unitID">ID of the variant</param>
            <param name="oldRecordID">ID of the old record which we skip comparing to</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>True if the vendor item exists, else false</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.VendorItemExistsExcludingCurrentRecordByVendorIDRetailIDAndUnitIDAndVendorItemID(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Checks if a vendor item by a given Vendor ID, retailID and unitID, excluding current record from the check
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="vendorID">ID of the vendor to check for</param>
            <param name="retailID">ID of the retail item</param>
            <param name="unitID">ID of the variant</param>
            <param name="vendorItemID">ID of the vendor item to check for (this is external vendor specific id)</param>
            <param name="oldRecordID">ID of the old record which we skip comparing to</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>True if the vendor item exists, else false</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetItemsForVendor(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.DataProviders.Inventory.VendorItemSorting,System.Boolean,System.Boolean)">
            <summary>
            Returns a list of items that has been assigned to a specific vendor
            </summary>
            <param name="siteServiceProfile"></param>
            <param name="vendorID">The unique ID for the vendor</param>
            <param name="sorting">Sorting of the vendor item list</param>
            <param name="sortBackwards">Ascending or descending</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetItemsForVendor(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.DataProviders.Inventory.VendorItemSorting,System.Boolean,System.Int32,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            Returns a paginated list of items that has been assigned to a specific vendor
            </summary>
            <param name="siteServiceProfile"></param>
            <param name="vendorID">The unique ID for the vendor</param>
            <param name="sorting">Sorting of the vendor item list</param>
            <param name="sortBackwards">Ascending or descending</param>
            <param name="startRecord">Pagination start index</param>
            <param name="endRecord">Pagination end index</param>
            <param name="totalRecords">Total number of records for the given vendor</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.SaveVendorItem(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.VendorItem,System.Boolean)">
            <summary>
            Saves a vendor item 
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="vendorItem">The vendor item to be saved</param>
            <returns>Internal ID of the saved vendor</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetDistinctUnitsForVendorItem(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Returns a list of all units that are available for the item
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="vendorID">The unique ID for the vendor</param>
            <param name="itemID">The unique ID for the item</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.SearchItemsInPurchaseOrder(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Searches for items that are part of the purchase order
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="purchaseOrderID">The ID of the purchase order</param>
            <param name="searchString">The string to search for</param>
            <param name="rowFrom">The start row</param>
            <param name="rowTo">The end row</param>
            <param name="beginsWith">If the way to compare the search string </param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.VendorItemExists(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Checks if the vendor has the item availble
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="vendorID">The vendor</param>
            <param name="retaiID">The item</param>
            <param name="unitID">The unit </param>
            <param name="oldRecordID">Ids to exclude</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.DeleteByRetailItemID(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Removes the supplied retil item from the supplied vendor
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>      
            <param name="retailItemID">The item</param>
            <param name="vendorID">The vendor</param>
            <param name="unitID">The unit of the item to remove</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetVendorsForItem(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.DataProviders.Inventory.VendorItemSorting,System.Boolean,System.Boolean)">
            <summary>
            Gets the vendors for the supplied item
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>      
            <param name="retailItemID">The retail item</param>
            <param name="sortBy">How to sort</param>
            <param name="sortBackwards">The sort direction</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.SetDefaultContactOnVendor(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Sets the default contact on the vendor
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="vendorID">The unique ID of the vendor to be updated</param>
            <param name="contactID">The unique ID of the contact that is to be the default contact on the vendor</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetItemsDefaultVendor(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Returns the default vendor for a given item
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="itemID">The unique ID of the item</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>
            Returns the default vendor ID
            </returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetDefaultPurchasePrice(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Retrieves the default purchase price for a vendor item
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="vendorID">The unique ID of the vendor to be updated</param>
            <param name="itemID">The unique ID of the vendor item being checked</param>
            <param name="unitID">The unit ID on the vendor item being checked</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.DeleteVendorsCanExecute(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Collections.Generic.List{LSOne.Utilities.DataTypes.RecordIdentifier},System.Collections.Generic.List{LSOne.Utilities.DataTypes.RecordIdentifier}@,System.Boolean)">
            <summary>
            This procedure checks if vendor can be deleted.
            A vendor cannot be deleted if a purchase order, a goods receiving document or purchase order worksheet that is open and is attached to the vendor
            A vendor can not be deleted if it is attached to a purchase order that is posted and there is no goods receiving document attached to the purchase order i.e.both the purchase order and goods receiving document have to be posted for the vendor to be deleted.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="vendors">vendor ids to be checked</param>
            <param name="linkedVendors">list of vendors that cannot be deleted </param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>True if all vendors from the list can be deleted. False otherwise</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.VendorHasLinkedItems(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Verifies if a vendor is linked to at least one item or is the default vendor for an item.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="vendorID">Unique ID of the vendor</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.DeleteVendorItemLinks(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Deletes all vendor - item links and removes vendor as default vendor from items.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="vendorID">Unique ID of the vendor</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.AdvancedSearch(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.VendorItemSearch,LSOne.DataLayer.DataProviders.Inventory.VendorItemSorting,System.Boolean,System.Int32,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            Searches the vendor item for the given criteria
            </summary>
            <param name="entry">Entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="searchCriteria">Criterias for search</param>
            <param name="sortBy">Sort field for returned vendor items</param>
            <param name="sortBackwards">Sort direction of the returned vendor items</param>
            <param name="startRecord">Pagination start index</param>
            <param name="endRecord">Pagination end index</param>
            <param name="totalRecords">Total number of records that match the search criteria</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.TestConnection(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.String,System.UInt16)">
            <summary>
            Tests the connection to the Site Service.
            </summary>
            <param name="entry">The connection to the database</param>
            <param name="host">The hostname for the Site Service</param>
            <param name="port">The port to use for connecting to the Site Service</param>
            <returns>The result of the connection test</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.TestConnectionWithFeedback(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.String,System.UInt16,System.String)">
            <summary>
            Tests the connection to the Site Service and show a message to the user if the connection was not succesful.
            </summary>
            <param name="entry">The connection to the database</param>
            <param name="host">The hostname for the Site Service</param>
            <param name="port">The port to use for connecting to the Site Service</param>
            <param name="additionalMessage">An optional message that is appended in a new line below the standard message shown if the connection was not succesful</param>
            <returns>The result of the connection test</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.TestConnectionWithFeedback(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.String)">
            <summary>
            Tests the connection to the Site Service and show a message to the user if the connection was not succesful.
            </summary>
            <param name="entry">The connection to the database</param>
            <param name="siteServiceProfile">A populated <see cref="T:LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile"/> containing the connection information for the Site Service</param>
            <param name="additionalMessage">An optional message that is appended in a new line below the standard message shown if the connection was not succesful</param>
            <returns>The result of the connection test</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.TestConnection(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile)">
            <summary>
            Tests the connection to the Site Service.
            </summary>
            <param name="entry">The connection to the database</param>
            <param name="siteServiceProfile">A populated <see cref="T:LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile"/> containing the connection information for the Site Service</param>
            <returns>The result of the connection test</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.AdministrativeLogin(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.String,System.UInt16,System.String)">
            <summary>
            Validates an administrative password by returning an encrypted UNIX timestamp.
            </summary>
            <param name="entry">The connection to the database</param>
            <param name="host">The hostname for the Site Service</param>
            <param name="port">The port to use for connecting to the Site Service</param>
            <param name="administrativePassword"></param>
            <returns></returns>
            <exception cref="T:System.ServiceModel.FaultException">If administrativePassword is null or empty string or if the provided password does not match the Site Service one returns <i>Provided administrative password is incorrect</i></exception>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.LoadConfiguration(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.String,System.UInt16,System.String)">
            <summary>
            Returns the Site Service configurations from config file.
            </summary>
            <param name="entry">The connection to the database</param>
            <param name="host">The hostname for the Site Service</param>
            <param name="port">The port to use for connecting to the Site Service</param>
            <param name="administrativePassword">Authorization password set at install time for retrieving the settings.</param>
            <returns></returns>
            <exception cref="T:System.ServiceModel.FaultException">If administrativePassword is null or empty string or the timestamp is an invalid number or zero or if the provided password does not match the Site Service one returns <i>Provided administrative password is incorrect</i></exception>
            <exception cref="T:System.ServiceModel.FaultException">If timestamp is older than AdministrativeSessionTimeout (default 2 hours) returns <i>Administrative session expired</i></exception>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.SendConfiguration(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.String,System.UInt16,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Updates Site Service configuratiosn from config file.
            </summary>
            <param name="entry">The connection to the database</param>
            <param name="host">The hostname for the Site Service</param>
            <param name="port">The port to use for connecting to the Site Service</param>
            <param name="administrativePassword">Authorization password set at install time for saving the passed settings.</param>
            <param name="fileConfigurations">List of settings to be saved in Site Service config file.</param>
            <exception cref="T:System.ServiceModel.FaultException">If administrativePassword is null or empty string or the timestamp is an invalid number or zero or if the provided password does not match the Site Service one returns <i>Provided administrative password is incorrect</i></exception>
            <exception cref="T:System.ServiceModel.FaultException">If timestamp is older than AdministrativeSessionTimeout (default 2 hours) returns <i>Administrative session expired</i></exception>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetRetailItem(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Retrieves information about a specific retail item
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="itemID">The unique ID of the item to be retrieved</param>
            <returns>Information about the item</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetRetailItemIncludeDeleted(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Retrieves information about a specific retail item even if deleted
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="itemID">The unique ID of the item to be retrieved</param>
            <returns>Information about the item</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.SaveRetailItem(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.ItemMaster.RetailItem,System.Boolean)">
            <summary>
            Saves information about a specific retail item
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="retailItem">The item to be saved</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.SaveUnitConversionRule(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Units.UnitConversion,System.Boolean)">
            <summary>
            Saves the unit conversion
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="unitConversion">The conversion rule</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.SaveItemType(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.BusinessObjects.Enums.ItemTypeEnum,System.Boolean)">
            <summary>
            Updates the type on a specific item
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <param name="itemID">The unique ID of the item to update</param>
            <param name="newType">The new type</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetRetailItemCost(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Get the purchase price for an item and store
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="itemID">ID of the item for which to retrieve the cost</param>
            <param name="storeID">ID of the store for which to retrieve the cost. Empty ID will return an average cost of all stores</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetRetailItemCostList(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.BusinessObjects.ItemMaster.RetailItemCostFilter,System.Int32@,System.Boolean)">
            <summary>
            Get a list purchase prices for an item, for each store including an average for all stores
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="itemID">ID of the item for which to retrieve the cost</param>
            <param name="filter">Search filter</param>
            <param name="totalCount">Total items found</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.InsertRetailItemCosts(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Collections.Generic.List{LSOne.DataLayer.BusinessObjects.ItemMaster.RetailItemCost},System.Boolean)">
            <summary>
            Insert a list of retail item costs
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="itemCosts">List of item costs to insert</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.ArchiveItemCosts(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Boolean)">
            <summary>
            Move all item costs to an archive table except the last calculated cost for each store
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.CustomerExists(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean,System.Boolean)">
            <summary>
            Checks if a customer exists with a given ID
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="customerID">The ID of the customer to look for</param>
            <param name="useCentralDatabase">If true the Site Service is used to look up the ID, otherwise the local database is used</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.SaveCustomer(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Customers.Customer,System.Boolean,System.Boolean)">
            <summary>
            Save customer
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="customer">The customer to be saved</param>
            <param name="useCentralDatabase">If true the Site Service is used to look up the ID, otherwise the local database is used</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns>Returns the customer being saved. This is useful when another the integration service provides more data than the one used to create the customer</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.SetCustomerCreditLimit(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Decimal,System.Boolean)">
            <summary>
            Set the credit limit of a customer
            </summary>
            <param name="entry">Entry into the database</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="customerID">The customer ID for which to update the credit limit</param>
            <param name="creditLimit">The credit limit to be set on the customer</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetCustomerPanelInformation(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Get all information for a customer to be displayed in the customer panel of the POS
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="customerID">ID of the customer</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetDefaultTaxStoreID(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Boolean)">
            <summary>
            Returns the ID of the default tax store configured at the central database
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.SaveTerminaldData(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.StoreManagement.Terminal,System.Boolean)">
            <summary>
            Saves settings for the current terminal
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="terminal">Current terminal</param>
            <param name="entry">The entry into the database</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetReasonCodesList(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Boolean)">
            <summary>
            Gets a list of ReasonCodes sorted by description.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Site service profile</param>
            <param name="closeConnection">Close connection</param>
            <returns>Gets a list of ReasonCodes sorted by description</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetReasonCodesList(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Boolean,System.Collections.Generic.List{LSOne.DataLayer.BusinessObjects.Enums.ReasonActionEnum},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Returns a list of reason codes filtered by the given parameters and sorted by description.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Site service profile</param>
            <param name="closeConnection">Close connection</param>
            <param name="actions">Filtering criteria - list of reason actions. If null, it returns all reason codes, disregarding their action.</param>
            <param name="forPOS">Filtering criteria - if true returns only reason codes with SHOWONPOS = 1</param>
            <param name="open">Filtering criteria - if true returns only open reason codes</param>
            <returns>List of <see cref="T:LSOne.DataLayer.BusinessObjects.Inventory.ReasonCode"/> sorted by description</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetOpenReasonCodesList(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Boolean)">
            <summary>
            Gets a list of ReasonCodes that are open, sorted by description.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="siteServiceProfile">Site service profile</param>
            <param name="closeConnection">Close connection</param>
            <returns>Gets a list of open ReasonCodes sorted by description</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetReasonById(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Get a ReasonCode by id
            </summary>
            <param name="entry"></param>
            <param name="siteServiceProfile">Site service profile</param>
            <param name="id">Id of the reason code</param>
            <param name="closeConnection">Close connection</param>
            <returns>Reason</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.SearchReasonList(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.String,System.Boolean,System.Nullable{LSOne.DataLayer.BusinessObjects.Enums.ReasonActionEnum},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Boolean},LSOne.DataLayer.DataProviders.Inventory.ReasonCodeSorting,System.Boolean,System.Boolean)">
            <summary>
            Search for reason codes
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">Site service profile</param>
            <param name="description">Description to search for</param>
            <param name="descriptionBeginsWith">True if the description should begin with the description parameter</param>
            <param name="action">Reason action for search for</param>
            <param name="beginDate">The start date of the reason</param>
            <param name="endDate">The end date of the reason</param>
            <param name="isSystemCode">True if the reasons should be system codes</param>
            <param name="sortBy">Sort enum to sort by</param>
            <param name="sortedBackwards">True if the reasons should be sorted backwards</param>
            <param name="closeConnection">Close connection</param>
            <returns>A filtered list of reason codes</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.ReasonCodeIsInUse(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Returns true if the reason with the given id is in use
            </summary>
            <param name="entry">Entry into the database</param>
            <param name="siteServiceProfile">Site service profile</param>
            <param name="reasonID">ID of the reason to check for usage</param>
            <param name="closeConnection">Close connection</param>
            <returns>True if the reason is used somewhere else false</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.SaveReasonCode(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.Inventory.ReasonCode,System.Boolean)">
            <summary>
            Saves a reason code
            </summary>
            <param name="entry">Entry into the database</param>
            <param name="siteServiceProfile">Site service profile</param>
            <param name="reasonCode">Reason code to save</param>
            <param name="closeConnection">Close connection</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.DeleteReasonCode(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Deletes a reason code
            </summary>
            <param name="entry">Entry into the database</param>
            <param name="siteServiceProfile">Site service profile</param>
            <param name="reasonId">Reason id to delete</param>
            <param name="closeConnection">Close connection</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISiteServiceService.GetReasonCodesForReturn(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Boolean)">
            <summary>
            Returns a list of reasons codes that can be used to return items
            </summary>
            <param name="entry">Entry into the database</param>
            <param name="siteServiceProfile">Site service profile</param>
            <param name="closeConnection">Close connection</param>
            <returns>Returns a list of reasons codes that can be used to return items</returns>
        </member>
        <member name="T:LSOne.Services.Interfaces.IBackupService">
            <summary>
            Method to process the original barcode to populate the different barcode properties.
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.IBlankOperationsService.BlankOperation(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISession,LSOne.DataLayer.BusinessObjects.OperationInfo,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Implemented by \Services\BlankOperations\BlankOperations.cs.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="session">The current session</param>
            <param name="operationInfo">Information about the current operation - <see cref="T:LSOne.DataLayer.BusinessObjects.OperationInfo"/></param>
            <param name="posTransaction">The current posTransaction.</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICustomerOrderService.ConfigurationsExistForStore(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Enums.CustomerOrderType)">
            <summary>
            Checks that all configurations on the current store that are necessary for the customer orders functionality is set 
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="orderType">The <see cref="T:LSOne.DataLayer.BusinessObjects.Enums.CustomerOrderType"/> that is being checked </param>
            <returns>False if configurations don't exists or are not set otherwise true</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICustomerOrderService.CreateCustomerOrder(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Utilities.DataTypes.RecordIdentifier,System.Collections.Generic.LinkedList{LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem},System.Collections.Generic.List{LSOne.Services.Interfaces.SupportInterfaces.ITenderLineItem},LSOne.DataLayer.BusinessObjects.CustomerOrders.CustomerOrderItem)">
            <summary>
            Creates a new transaction and adds the sale lines and tender lines. 
            If the sale lines have an empty Order variable then it is filled out with default values. 
            The transaction is then saved as a customer order with status Closed
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="customerID">The ID of the customer that should be added to the transaction</param>
            <param name="saleLines">The item lines to be added to the new customer order</param>
            <param name="tenderLines">The tender lines to be added to the new customer order. All tender lines will be marked as paid</param>
            <param name="orderItem">Information about the customer order itself that should be added to the transaction</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICustomerOrderService.CreateCustomerOrder(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction,LSOne.DataLayer.BusinessObjects.Enums.CustomerOrderType,System.Boolean)">
            <summary>
            Creates a new customer order and attaches is to the transaction
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="retailTransaction">The current transaction</param>
            <param name="orderType">What type of order is this <see cref="T:LSOne.DataLayer.BusinessObjects.Enums.CustomerOrderType"/></param>
            <param name="updateStock">If true then saving the customer order will affect the stock numbers of the item</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICustomerOrderService.CreateCustomerOrder(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction,LSOne.DataLayer.BusinessObjects.Enums.CustomerOrderType,LSOne.DataLayer.BusinessObjects.Enums.CustomerOrderAction,System.Boolean)">
            <summary>
            Creates a new customer order and attaches is to the transaction
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="retailTransaction">The current transaction</param>
            <param name="orderType">What type of order is this <see cref="T:LSOne.DataLayer.BusinessObjects.Enums.CustomerOrderType"/></param>
            <param name="updateStock">If true then saving the customer order will affect the stock numbers of the item</param>
            <param name="action">Defines what action should be taken when the customer order has been created</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICustomerOrderService.RecallCustomerOrder(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction,LSOne.DataLayer.BusinessObjects.Enums.CustomerOrderType)">
            <summary>
            Displays a dialog that has a list of customer orders that can be recalled and managed
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="retailTransaction">The current transaction</param>
            <param name="orderType">What type of order is this <see cref="T:LSOne.DataLayer.BusinessObjects.Enums.CustomerOrderType"/></param>
            <returns>The customer order that was selected to be recalled</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICustomerOrderService.UpdateDepositInformation(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction,LSOne.DataLayer.BusinessObjects.Enums.CustomerOrderSummaries)">
            <summary>
            After payment has been done and before the customer order is saved this function updates all deposit variables on both the transaction and each item
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="retailTransaction">The current transctions</param>
            <param name="summaries">If All then all deposit information is updated otherwise only for items on order or to pick up</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICustomerOrderService.UpdatePaymentInformation(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction)">
            <summary>
            After each POS operation and before "Customer order actions" are displayed to the user, information about any more deposits that could possibly be necessary are updated
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="retailTransaction">The current transctions</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICustomerOrderService.SaveCustomerOrder(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction,LSOne.DataLayer.BusinessObjects.Enums.CustomerOrderStatus)">
            <summary>
            Sets the status of the customer order and then saves it centrally
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="retailTransaction">The current transctions</param>
            <param name="status">The new status for the customer order</param>
            <returns>the unique ID of the Customer order - a GUID</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICustomerOrderService.SaveCustomerOrder(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction,System.Boolean)">
            <summary>
            Saves the customer order centrally. If the customer order has status New then it is changed to Open before being saved
            Current action is also set to None before saving.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="retailTransaction">The current transctions</param>
            <returns>the unique ID of the Customer order - a GUID</returns>
            <param name="updateStock"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICustomerOrderService.SaveCustomerOrder(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.CustomerOrders.CustomerOrder)">
            <summary>
            Saves the customer order centrally. 
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="order">The order object that is to be saved</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICustomerOrderService.SaveCustomerOrderDetails(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.CustomerOrders.CustomerOrder)">
            <summary>
            Saves the customer order centrally without saving the order XML. 
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="order">The order object that is to be saved</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICustomerOrderService.CalculateAmountToBePaid(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction,System.Boolean)">
            <summary>
            Calculates the amount that needs to be paid including items that are being picked and any deposits necessary
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="retailTransaction">The current transctions</param>
            <param name="includeLastTenderLine"></param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICustomerOrderService.CalculateAmountToBeTendered(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction,System.Boolean)">
            <summary>
            Calculates the amount that needs to be paid including items that are being picked and any deposits necessary
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="retailTransaction">The current transctions</param> 
            <param name="includeLastTenderLine"></param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICustomerOrderService.UpdateCustomerOrder(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction,LSOne.DataLayer.BusinessObjects.Enums.CustomerOrderAction)">
            <summary>
            Updates the customer order. The action parameter determines how the customer order is udpated, saved or printed.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="retailTransaction">The current transaction</param>
            <param name="action">Defines what action should be taken when the customer order has been created</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICustomerOrderService.MarkAllRemainingItemsForPickup(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction)">
            <summary>
            Marks all remaining items that have not been fully or partially picked up for pickup
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="retailTransaction">The current transctions</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICustomerOrderService.ConcludeTransaction(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            After the payment has been finalized the transaction needs to be concluded. This creates a DepositTransaction, new RetailTransaction when needed
            and saves the Customer order to the HO through the Site Service
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="posTransaction">The current transctions</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICustomerOrderService.VoidCustomerOrder(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction)">
            <summary>
            This function is called when operation Void transaction is clicked in the POS
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="retailTransaction">The current transctions</param>
        </member>
        <member name="T:LSOne.Services.Interfaces.MessageCallback">
            <summary>
            When using the Database Utility the program can subscribe to the MessageCallback function which will receive information about progress and what is going on within the DB Utility. This is done instead of having a user interface with progress information.
            </summary>
            <param name="Sender">A string identifying the source of the message</param>
            <param name="Msg">The message being sent</param>
        </member>
        <member name="E:LSOne.Services.Interfaces.IMigrationService.MessageCallbackHandler">
            <summary>
            When using the Database Utility the program can subscribe to the MessageCallback function which will receive information about progress and what is going on within the DB Utility. This is done instead of having a user interface with progress information.
            </summary>
            
        </member>
        <member name="M:LSOne.Services.Interfaces.IMigrationService.MigrationTargets">
            <summary>
            gets all supported targets
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.IMigrationService.ExecuteMigrationTarget(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.Int32)">
            <summary>
            Executes the relevant code for the supplied target
            </summary>
            <param name="entry">Entry into the database</param>
            <param name="target"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IMigrationService.MigrationWillBeRun(System.String,System.String)">
            <summary>
            Determines
            </summary>
            <param name="version">current version</param>
            <param name="maxVersion">targetversion</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICashChangerService.Initialize(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager)">
            <summary>
            Used to create an instance of the ActiveX API and carry out the
            initialize funtion.
            </summary>
            <param name="entry">The entry into the database</param>
            <returns>Returns true if init function returns OK</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICashChangerService.Login(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.String,System.String)">
            <summary>
            The login function is used to register the user with the Cash guard machine
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="terminalID"></param>
            <param name="operatorID"></param>
            <returns>Returns whether the function was successfully completed</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICashChangerService.Logout(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICashChangerService.RegisterAmount(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.Decimal,System.String,System.Decimal@)">
            <summary>
            This functions registers in to the transaction the amount that has been entered
            into the cash machine.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="amountDue">The amount that should be paid by the customer</param>
            <param name="receiptID">The receipt ID of the transaction</param>
            <param name="amountRest">If not enough amount has been entered, this parameter will specify what is left to pay</param>
            <returns>An instance of the CashChangerReturn enum specifying the </returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICashChangerService.Change(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICashChangerService.Reset(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICashChangerService.Regret(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.Enums.CashGuardRegretType)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="regretType"></param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICashChangerService.Exit(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICashChangerService.GetAutoMode(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICashChangerService.SetAutoMode(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.Boolean)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="mode"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICashChangerService.ConcludeTransaction(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="posTransaction"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICCTVService.CCTVOutput(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.DataLayer.BusinessObjects.Enums.POSOperations,System.Boolean,LSOne.DataLayer.BusinessObjects.OperationInfo,System.String)">
            <summary>
            Sends an output to a CCTV system
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="posTransaction">The transaction object containing all information about items, payments, discounts, etc...</param>
            <param name="operationId">The id of the operation currently being run</param>
            <param name="mainOperation">If the currently run operation is a main operation or a support operation</param>
            <param name="operationInfo">Extra information about the operation currently being run</param>
            <param name="text">Optional text supplied by LS POS</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICCTVService.CCTVMessageOutput(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.String)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="text"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICCTVService.CCTVErrorOutput(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.String)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="text"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICorporateCardService.ProcessCardPayment(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISettings,LSOne.DataLayer.BusinessObjects.Card.CardInfo,System.Decimal,System.Object)">
            <summary>
            Called from instance of class 'PayCorporateCard'.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="settings"></param>
            <param name="cardInfo">The card information as stored in the instance of class CardInfo.</param>
            <param name="amount">Amount receivable.</param>
            <param name="posTransaction">The complete POS transaction.</param>
            <example>
            <code>LSRetailPosis.ApplicationServices.ICorporateCard.ProcessCardPayment(cardInfo, paidAmount, this.posTransaction);</code>
            </example>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICorporateCardService.VoidCardPayment(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Card.CardInfo,System.Object)">
            <summary>
            Voiding payment of a corporate card. 
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="cardInfo">The card information as stored in the instance of class CardInfo.</param>
            <param name="posTransaction">The complete POS transaction.</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICreditMemoService.AuthorizeCreditMemoPayment(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.Boolean@,System.String@,System.String@,System.Decimal@,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.DataLayer.BusinessObjects.StoreManagement.StorePaymentMethod,System.Decimal)">
            <summary>
            Authorize payment with a credit memo
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="creditMemoId">Credit memo ID</param>
            <param name="amount">Amount to be paid</param>
            <param name="valid">True if the credit memo is valid</param>
            <param name="comment">Additional comment</param>
            <param name="posTransaction">Current transaction</param>
            <param name="tenderInfo">Payment method information</param>
            <param name="amountDue">Remaining amount to be paid</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICreditMemoService.IssueCreditMemo(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ICreditMemoTenderLineItem,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="creditMemoItem"></param>
            <param name="retailTransaction"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICreditMemoService.HandleCreditVoucherValidationEnum(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.Enums.CreditVoucherValidationEnum)">
            <summary>
            Handles results other than ValidationSuccess and displays the appropriate message if that applies
            </summary>
            <param name="cvEnum"></param>
            <param name="entry">The entry into the database</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICreditMemoService.ValidateCreditMemo(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.Boolean@,System.String@,System.Decimal@,System.String,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="validated"></param>
            <param name="comment"></param>
            <param name="amount"></param>
            <param name="creditMemoNumber"></param>
            <param name="retailTransaction"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICreditMemoService.UpdateCreditMemo(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.String,System.Decimal,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="creditMemoNumber"></param>
            <param name="amount"></param>
            <param name="posTransaction"></param>        
        </member>
        <member name="M:LSOne.Services.Interfaces.ICreditMemoService.VoidCreditMemoPayment(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.Boolean@,System.String@,System.String,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="voided"></param>
            <param name="comment"></param>
            <param name="creditMemoNumber"></param>
            <param name="retailTransaction"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICreditMemoService.GetCreditmemoBalance(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.String,System.Decimal@)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="creditMemoNumber"></param>
            <param name="balance"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICreditMemoService.SiteServiceIsNeeded(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Returns true if the Site service is needed to conclude a transaction that includes a credit memo
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="transaction">The current transaction</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICouponService.UpdateCoupons(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            This function is called when the transaction is concluding itself. Here any final wrap-up of coupons already added needs to happen if necessary
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="posTransaction">The current transaction</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICouponService.ProcessCustomizedCoupons(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.DataLayer.BusinessObjects.BarCodes.ScanInfo,LSOne.DataLayer.BusinessObjects.BarCodes.BarCode)">
            <summary>
            This function is called if the barcode is of type Coupon (see <see cref="T:LSOne.DataLayer.BusinessObjects.Enums.BarcodeInternalType"/>.
            
            Here a customization should handle the actual scanned coupon, add what is needed to the transaction, call a webservice, retrieve data
            from the database and etc.
            
            This functionality needs to start in either <see cref="M:LSOne.Services.Interfaces.IBarcodeService.CustomizedScanInput(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.OperationInfo,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,System.String)"/> or <see cref="M:LSOne.Services.Interfaces.IBarcodeService.ProcessBarcode(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem@,LSOne.DataLayer.BusinessObjects.BarCodes.ScanInfo,LSOne.DataLayer.BusinessObjects.BarCodes.BarCode,System.String,System.String)"/> in the <see cref="T:LSOne.Services.Interfaces.IBarcodeService"/> service. 
            If the barcode is marked as being of type Coupon in PartnerProcessBarcode this function will be called for processing. 
            </summary>
            <param name="entry">Entry into the database</param>
            <param name="posTransaction">Current transaction</param>
            <param name="scanInfo">The scan info object created by the scan operation or <see cref="M:LSOne.Services.Interfaces.IBarcodeService.CustomizedScanInput(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.OperationInfo,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,System.String)"/></param>
            <param name="barCode">Information about the barcode created by the scan operation or <see cref="M:LSOne.Services.Interfaces.IBarcodeService.ProcessBarcode(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem@,LSOne.DataLayer.BusinessObjects.BarCodes.ScanInfo,LSOne.DataLayer.BusinessObjects.BarCodes.BarCode,System.String,System.String)"/></param>
        </member>
        <member name="T:LSOne.Services.Interfaces.ICustomerService">
            <summary>
            Implemented by Customer.cs. Used for customer control: customer database search, customer changes, adding or deleting a customer - instance.
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICustomerService.EnterCustomerId(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction)">
            <summary>
            Enter the customer id and add the customer to the transaction
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="retailTransaction">The retail tranaction</param>
            <returns>The retail tranaction</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICustomerService.Search(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,System.Boolean,System.String)">
            <summary>
            Search for the customer and add him to the retail transaction
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="posTransaction">The retail tranaction</param>
            <param name="returnNewCustomer">If true then when the user creates a new customer through the Search dialog the new customer is returned directly. 
            If false then the customer search dialog will use the name of the customer to search again in the list</param>
            <param name="initialSearch">Initial text to search for at the beggining of the operation</param>
            <returns>The retail tranaction</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICustomerService.Get(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISession,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Input a customer Id and return a posTransaction containing that customer if it exists
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="session">The current session</param>
            <param name="posTransaction">The retail tranaction</param>
            <param name="customerID">The customer id to be retrieved</param>
            <returns>The retail tranaction</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICustomerService.Search(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.Boolean,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,System.String)">
            <summary>
            Search for the customer and return the customer's information if one is selected otherwise the function returns null
            </summary>        
            <param name="entry">The entry into the database</param>
            <param name="returnNewCustomer">If true then when the user creates a new customer through the Search dialog the new customer is returned directly. 
            If false then the customer search dialog will use the name of the customer to search again in the list</param>
            <param name="transaction">Current transaction</param>
            <param name="initialSearch">Initial text to search for at the beggining of the operation</param>
            <returns>Customer's information</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICustomerService.Search(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.Boolean,LSOne.Utilities.DataTypes.Name@,System.Boolean,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Search for a customer and return the customer ID
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="inputRequired">If true then the user has to select a customer.</param>
            <param name="customerName"></param>
            <param name="returnNewCustomer">If true then when the user creates a new customer through the Search dialog the new customer is returned directly. 
            If false then the customer search dialog will use the name of the customer to search again in the list</param>
            <param name="transaction">Current transaction</param>
            <returns>Customer ID as a string</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICustomerService.Balance(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction)">
            <summary>
            Sets the customer balance of the customer
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="retailTransaction">The retail tranaction</param>
            <returns>The retail tranaction</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICustomerService.AddCustomerToTransaction(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,System.Boolean)">
            <summary>
            Adds a customer with a given ID to the transaction
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="customerID">ID of the customer to be added</param>
            <param name="posTransaction">The current transaction</param>
            <param name="displayErrorDialogs">True if you want error dialogs to pop up, else false (for server side runs then you want false)</param>
            <returns>A enum result code that hints if there were errors.</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICustomerService.Status(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction)">
            <summary>
            Sets the customer status of the customer
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="retailTransaction">The retail tranaction</param>
            <returns>The retail tranaction</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICustomerService.AddNewWithDialog(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Customers.Customer@)">
            <summary>
            Register information about a new customer into the database. Information about the customer is provided with a dialog
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="customer"></param>
            <returns>Returns true if operations is successful</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICustomerService.EditWithDialog(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Customers.Customer,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Update a customer in the database. Information about the customer is provided with a dialog
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="customer"></param>
            <param name="transaction">Current transaction</param>
            <returns>Returns true if operations is successful</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICustomerService.EditWithDialog(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Update a customer in the database. Information about the customer is provided with a dialog
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="customerID"></param>
            <param name="transaction">Current transaction</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICustomerService.Update(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.String)">
            <summary>
            Updates the customer information in the database
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="customerId">The customer id</param>
            <returns>Returns true if operations is successful</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICustomerService.Delete(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.String)">
            <summary>
            Delete the customer from the database if the customer holds no customer transactions.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="customerId">The customer id</param>
            <returns>Returns true if operations is successful</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICustomerService.AuthorizeCustomerAccountPayment(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Enums.CustomerStatusValidationEnum@,System.String@,System.String@,System.String,System.Decimal@,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction)">
            <summary>
            Authentication of a charging to a customer account.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="valid"></param>
            <param name="comment"></param>
            <param name="manualAuthenticationCode"></param>
            <param name="customerId"></param>
            <param name="amount"></param>
            <param name="retailTransaction"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICustomerService.CustomerAccountCreditMemo(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.String,System.Decimal,System.Decimal,System.Decimal,System.Decimal,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier)">
            <summary>
            CustomerAccountCreditMemo
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="customerId"></param>
            <param name="receiptId"></param>
            <param name="currency"></param>
            <param name="currencyAmount"></param>
            <param name="amount"></param>
            <param name="currencyAmountDis"></param>
            <param name="amountDis"></param>
            <param name="storeId"></param>
            <param name="terminalId"></param>
            <param name="transactionId"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICustomerService.CustomerAccountPayment(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.String,System.Decimal,System.Decimal,System.Decimal,System.Decimal,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier)">
            <summary>
            CustomerAccountPayment
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="customerId"></param>
            <param name="receiptId"></param>
            <param name="currency"></param>
            <param name="currencyAmount"></param>
            <param name="amount"></param>
            <param name="amountDis"></param>
            <param name="storeId"></param>
            <param name="terminalId"></param>
            <param name="transactionId"></param>
            <param name="currencyAmountDis"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICustomerService.PaymentIntoCustomerAccount(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.ICustomerPaymentTransaction,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier)">
            <summary>
            Payment into customer account
            </summary>
            <param name="entry"></param>
            <param name="transaction"></param>
            <param name="storeId"></param>
            <param name="terminalId"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICustomerService.CustomerAccountDeposit(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISession,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction@,System.Decimal)">
            <summary>
            Make a deposit to customer account
            </summary>
            <param name="entry">Entry into the database</param>
            <param name="session"></param>
            <param name="transaction">Current <see cref="T:LSOne.Services.Interfaces.ICustomerPaymentTransaction"/> transaction</param>
            <param name="initialAmount">Initial deposit amount</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICustomerService.CustomerHasGoneOverDiscountedPurchaseLimit(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction,System.Decimal@,System.Decimal@)">
            <summary>
            Determines if the given customer has gone over his discounted purchase limit when me buys the given transaction. 
            </summary>
            <param name="entry">Entry into the database</param>
            <param name="customerId">Id of the customer</param>
            <param name="retailTransaction">The retail transaction currently being processed</param>
            <param name="maxDiscountedPurchases">The maximum amount the customer is allowed to buy</param>
            <param name="currentDiscountedPurchases">The current amount the customer is allowed to buy</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICustomerService.SiteServiceIsNeeded(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Returns true if the Site service is needed to conclude a transaction that includes customer payment
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="transaction">The current transaction</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICustomerService.CustomerTransactionReport(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Called from the operation Customer transaction report which is marked as a system operation
            This report is not implemented in the standard functionality but this operation can be changed to 
            be a POS Operation and the function implemented as a part of a customization.
            The only limitation the POS core sets on this operation is that the user has to have the CustomerTransactionReport permission
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="transaction">The current transaction</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICustomerService.CustomerBalanceReport(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Called from the operation Customer balance report which is marked as a system operation
            This report is not implemented in the standard functionality but this operation can be changed to 
            be a POS Operation and the function implemented as a part of a customization.
            The only limitation the POS core sets on this operation is that the user has to have the CustomerTransactionsReport permission
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="transaction">The current transaction</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICustomerService.Transactions(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Called from the operation Customer transactions which is marked as a system operation
            This report is not implemented in the standard functionality but this operation can be changed to 
            be a POS Operation and the function implemented as a part of a customization.
            The only limitation the POS core sets on this operation is that the user has to have the CustomerTransactions permission
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="transaction">The current transaction</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IDDService.RunPostTransactionJob(LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Run the post transaction DD job configured in the functionality profile
            </summary>
            <param name="transaction">Current concluded transaction</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IDimensionService.SetDimensionOnItem(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="saleLineItem"></param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IDimensionService.ShowDimensionDialog(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem)">
            <summary>
            Shows the DimensionDialog which shows all available dimensions and attribute for the given master item.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="saleLineItem">The master item to show dimensions and attributes for</param>
            <returns>The ID of the variant item for the attribute combination that the user selected</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IDimensionService.ShowDimensionDialog(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Utilities.DataTypes.RecordIdentifier,System.String)">
            <summary>
            Shows the DimensionDialog which shows all available dimensions and attribute for the given master item.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="masterItemID">ID of the master item to show dimensions and attributes for</param>
            <param name="masterItemName">Name/description of the master item to show dimensions and attributes for</param>
            <returns>The ID of the variant item for the attribute combination that the user selected</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IDiscountService.CalculateDiscount(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction,System.Boolean)">
            <summary>
            The implementation has to take respect to every possible configuration, i.e. periodic discounts, 
            quantity discounts, check for special offers, customer discounts, multiline discounts. 
            From these factors, the total discount has to be calculated, the retailTransaction parameter has to 
            be updated and then the instance is returned.
            Since an item can belong to more than one discounts (i.e. Mix-and-Match), all discounts attached to an 
            item have to be removed everytime a SaleLine is added and it's discount re-evaluated in order to grant
            the best possible offer to the customers.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="retailTransaction">The retailTransaction parameter has to be updated</param>
            <param name="CalculateNow">Forces the discounts to be calculated no matter what how the Calculate Discount configurations are set</param>
            <returns>A RetailTransaction instance.</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IDiscountService.AddTotalDiscountAmount(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction,System.Decimal)">
            <summary>
            Entry point for further manipulation of the retail transaction. 
            In particular, it is possible to set the amount of the discount granted on the total amount using the property
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="rt"></param>
            <param name="amountValue"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IDiscountService.AuthorizeTotalDiscountAmount(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction,System.Decimal,System.Decimal)">
            <summary>
            Confirms that a total discount amount can be applied to the sale
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="rt">The current sale</param>
            <param name="amountValue">The total amount value entered</param>
            <param name="maxAmountValue">The maximum amount allowed for the current user</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IDiscountService.AddTotalDiscountPercent(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction,System.Decimal)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="rt"></param>        
            <param name="percentValue"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IDiscountService.AuthorizeTotalDiscountPercent(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction,System.Decimal,System.Decimal)">
            <summary>
            Confirms that a total discount percentage can be applied to the sale
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="rt">The current sale</param>
            <param name="percentValue">The total % value entered</param>
            <param name="maxPercentValue">The maximum % allowed for the current user</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IDiscountService.AddLineDiscountAmount(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem,LSOne.Services.Interfaces.SupportInterfaces.ILineDiscountItem)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="lineItem"></param>
            <param name="discountItem"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IDiscountService.AuthorizeLineDiscountAmount(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem,LSOne.Services.Interfaces.SupportInterfaces.ILineDiscountItem,System.Decimal)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="lineItem"></param>
            <param name="discountItem"></param>
            <param name="maximumDiscountAmt"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IDiscountService.AddLineDiscountPercent(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem,LSOne.Services.Interfaces.SupportInterfaces.ILineDiscountItem)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="lineItem"></param>
            <param name="discountItem"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IDiscountService.AuthorizeLineDiscountPercent(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem,LSOne.Services.Interfaces.SupportInterfaces.ILineDiscountItem,System.Decimal)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="lineItem"></param>
            <param name="discountItem"></param>
            <param name="maximumDiscountPct"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IDiscountService.ResetDiscountService(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager)">
            <summary>
            Reloads the discount settings.
            </summary>
            <param name="entry">Entry into the database</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IDiscountService.ManuallyTriggerPeriodicDiscount(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction,System.String)">
            <summary>
            Triggers a periodic discount with the given offerID if it's applicable to the given saleItem. Prompts user to choose a periodic discount for 
            the given item if offerID is empty.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="retailTransaction">The current retail transaction in the POS</param>
            <param name="offerID">If not empty then this offer should be triggered otherwise a list of discounts should be displayed</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IDiscountService.ClearManuallyTriggeredDiscount(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction)">
            <summary>
            Clears the periodic discount the user chooses from a list of manually triggered discounts
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="retailTransaction">The current retail transaction in the POS</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IDiscountService.ClearAllDiscounts(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction)">
            <summary>
            Clears all discounts manual, triggered and automatically calculated discounts from the transaction
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="retailTransaction">The current retail transaction in the POS</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IDiscountService.CustomersDiscountedPurchasesStatus(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.String,System.Decimal@,System.Decimal@)">
            <summary>
            Gets maximum discounted purchases and the current period's discounted purchases of a customer. The period and max discounted purchase are
            controlled by the customers Customer group.
            </summary>
            <param name="entry">Entry into the database</param>
            <param name="customerID">ID of the customer</param>
            <param name="maxDiscountedPurchases">The maximum amount that a customer can buy with customer discounts</param>
            <param name="currentPeriodDiscountedPurchases">The current period's amount that the customer has purchased with discounts</param>
        </member>
        <member name="P:LSOne.Services.Interfaces.IEFTService.EFTExtraInfo">
            <summary>
            Should return a default instance of the implementation of <see cref="T:LSOne.Services.Interfaces.SupportInterfaces.EFT.IEFTExtraInfo"/> that this implementation of <see cref="T:LSOne.Services.Interfaces.IEFTService"/> uses. If you do not intend to use this simply return <see langword="null"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:LSOne.Services.Interfaces.IEFTService.EFTTransactionExtraInfo">
            <summary>
            Should return a default instance of the implementation of <see cref="T:LSOne.Services.Interfaces.SupportInterfaces.EFT.IEFTTransactionExtraInfo"/>  that this implementation of <see cref="T:LSOne.Services.Interfaces.IEFTService"/> uses. If you do not intend to use this simply return <see langword="null"/>
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.IEFTService.ProcessCardPayment(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.EFT.IEFTInfo,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Processes the card payment.
            Takes decision whether this transaction is about voiding a transaction. If this is not the case,
            then a connection to the broker is established and it is attempted to achieve authorisation for the card payment.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="eftInfo">The reference to an eftInfo object.</param>
            <param name="posTransaction">The current transaction.</param>
            <returns>A boolean, giving information about whether the authorisation succeeded or not.</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IEFTService.ManualAuthCodeTransaction(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.EFT.IEFTInfo,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            When the authentication is done manually. Accesses and communicates with the broker. 
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="eftInfo">The reference to an eftInfo object.</param>
            <param name="posTransaction">The current transaction.</param>
            <returns>A boolean, giving information about whether the authorisation succeeded or not.</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IEFTService.VoidTransaction(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.EFT.IEFTInfo,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            For debet cards, the transaction number must be entered manually
            and must match the original transaction number.
            <br></br>
            On the other hand, if a debetcard payment in the current transaction is being voided,
            then it is provided and therefore does not have to be entered manually.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="eftInfo">The reference to an eftInfo object.</param>
            <param name="posTransaction">The current transaction.</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IEFTService.RefundTransaction(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.EFT.IEFTInfo,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Refund a card payment transaction
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="eftInfo">The reference to an eftInfo object.</param>
            <param name="posTransaction">The current transaction.</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IEFTService.IdentifyCard(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Card.CardInfo,LSOne.Services.Interfaces.SupportInterfaces.EFT.IEFTInfo)">
            <summary>
            Loads the eftInfo class with necessay information from the cardInfo class: <br></br>
            Whether the card was read with a stripe reader or the card data entered manually, <br></br>
            assigns the new WinPOSXClass instance the transaction type and passes it as an argument to the EFT payment form.
            After the broker identified the card type, we populate the cardInfo class with the proper information (CardType, TenderTypeId).
            </summary>
            <param name="entry">The entry into the database</param>        
            <param name="cardInfo">Information about the card being checked</param>
            <param name="eftInfo">EFT information</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IEFTService.GetBatchAmount(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.EFT.IEFTInfo,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            To fetch the amount of the current batch for the current terminal Id from the broker.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="eftInfo">The reference to an eftInfo object.</param>
            <param name="posTransaction">The current transaction.</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IEFTService.GetCurrentBatchNumber(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.EFT.IEFTInfo,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Get the current batch number
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="eftInfo">The reference to an eftInfo object.</param>
            <param name="posTransaction">The current transaction.</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IEFTService.IncrementBatchNumber(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager)">
            <summary>
            Increment batch number
            </summary>
            <param name="entry">The entry into the database</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IEFTService.StartListening(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,System.Object)">
            <summary>
            Intended to be used to start listening to external EFT hardware.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="posTransaction"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IEFTService.StopListening(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager)">
            <summary>
            Intended to be used to stop listening to an external EFT hardware.
            </summary>
            <param name="entry">The entry into the database</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IEFTService.EMV_AuthorizeCard(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISession,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.BusinessObjects.EFT.PaymentInfo,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Allows for the customization of Chip and pin or other external payment terminals. 
            </summary>
            <param name="entry">The entry into the database</param>
            <param name = "session" > The current session</param>
            <param name="posTransaction">The current transaction</param>
            <param name="tenderID">The ID of the tender selected on the payment button</param>
            <param name="paymentInfo">Payment information for the transaction</param>
            <param name="authorizeQuick">Indicates wether this is the AuthorizeCardQuick operation. If true then the implementation should skip the payment amount dialog and send the amount directly to the EFT device</param>
            <param name="manual">Indicates if this is a manual entry. Must be supported by the EFT device.</param>
            <param name="offline">Indicates if this is an offline payment. Must be supported by the EFT device.</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IEFTService.EMV_VoidCardPayment(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.Services.Interfaces.SupportInterfaces.ICardTenderLineItem,System.Object)">
            <summary>
            Allows for voiding of a card payment the customization of Chip and pin or other external payment terminals. 
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="posTransaction">The current transaction</param>
            <param name="tenderLine">The selected tender line to be voided</param>
            <param name="parameter">An unspecific parameter that can be used in customization</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IEFTService.GetEftSetupForm(LSOne.DataLayer.BusinessObjects.StoreManagement.Terminal)">
            <summary>
            Returns a form enabling the user to setup EFT from the POS
            </summary>
            <param name="terminal">A reference to the terminal to use as reference</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IEFTService.XReport(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager)">
            <summary>
            Perform a X report operation on the EFT device, if the device supports it
            </summary>
            <param name="entry">The entry into the database</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IEFTService.ZReport(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager)">
            <summary>
            Perform a Z report operation on the EFT device, if the device supports it
            </summary>
            <param name="entry">The entry into the database</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IEFTService.RecoverTransaction(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISession,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Try to recover a payment from the payment terminal in case something bad happened and the POS didn't register the payment
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="session">Current session</param>
            <param name="posTransaction">Current transaction</param>
            <returns></returns>
        </member>
        <member name="T:LSOne.Services.Interfaces.IEFTSession">
            <summary>
            This interface allows extending IEFT implementations with  intialization on POS start and shutdown  on POS exit
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.IEFTSession.Initialize(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISettings)">
            <summary>
            Initialize communication with the EFT device
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="settings">Settings object</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IEFTSession.Shutdown(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISettings)">
            <summary>
            Shutdown communication with the EFT device
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="settings">Settings object</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IEFTSession.OnBeginTransaction(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Called when the POS begins a new transaction
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="transaction">The active transaction</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IEFTSession.OnEndTransaction(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Called when the POS finalizes a transaction
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="transaction">The active transaction</param>
        </member>
        <member name="T:LSOne.Services.Interfaces.IEFTSetupForm">
            <summary>
            Interface to handle fields required for setting up EFT for terminals
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.IEFTSetupForm.IPAddress">
            <summary>
            IPAddress for EFT device
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.IEFTSetupForm.EFTStoreId">
            <summary>
            Store ID for EFT
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.IEFTSetupForm.EFTTerminalID">
            <summary>
            Terminal ID for EFT
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.IEFTSetupForm.CustomField1">
            <summary>
            Custom data, implementation specific
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.IEFTSetupForm.CustomField2">
            <summary>
            Custom data, implementation specific
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.IEndOfDayBackOfficeService.AllowedToPostStatement(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.StatementInfo)">
            <summary>
            Returns a list of flags appropriate for the given statement 
            </summary>
            <param name="entry">Entry to the database</param>
            <param name="statement">The statement</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IEndOfDayBackOfficeService.CalculateStatement(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.DateTime,System.DateTime)">
            <summary>
            Calculate statement lines for the given statement parameters. This will create statement lines.
            </summary>
            <param name="entry">Entry into the database</param>
            <param name="statementID">ID of the statement</param>
            <param name="storeID">The store we are creating the statement on</param>
            <param name="startTime">Starting time of the statement. Transactions between startTime and endTime are considered</param>
            <param name="endTime">Ending time of the statement. Transactions between startTime and endTime are considered</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IEndOfDayBackOfficeService.PostStatement(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.DateTime)">
            <summary>
            Posts the selected statement
            </summary>
            <param name="entry">Entry into the database</param>
            <param name="statementID">ID of the statement to post</param>
            <param name="storeID">ID of the store we are posting in</param>
            <param name="postingDate">Date of posting</param>
        </member>
        <member name="T:LSOne.Services.Interfaces.IEndOfDayService">
            <summary>
            <p/>
            In order for the store owner to divide the store’s sale into countable sizes, an End of day or End of shift  must be performed.  
            This is mainly done because an employee that uses the Pos, has to account for every transaction made be him 
            (and the employees he is reposible for).  
            Basically End of day and End of shift does the same thing in relation to the transaction tables.  
            <p/>
            There are three tables involved in the End of day operation:<br></br><br></br>
            <b>RBOTransactionTable</b><br></br> Contains a row for each transaction; the 'master' or 'header' table.<br></br><br></br>
            <b>RBOTransactionSalesTrans </b><br></br> Contains a row for each item within a transaction.<br></br><br></br>
            <b>RBOTransactionPaymentTrans</b><br></br> Contains a row for each payment operation (it is possible to pay with several tenders).<br></br><br></br>
            <p/>
            Each Terminal in the store registers transactions using it’s own terminal ID.  Completed transactions are then 
            automatically transferred from each terminal to identical datatables int the central store’s database. 
            
            <p/>
            The constructor is called from \SystemFramework\ApplicationServices.cs, then the following method 
            <code>static public void LoadServices()</code>,
            tries to load the EOD.dll assembly. The two parameters needed are retrieved from:
            <code>LSRetailPosis.Settings.ApplicationSettings.Database.LocalConnection</code> and
            <code>LSRetailPosis.Settings.ApplicationSettings.Database.DATAAREAID</code>
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.IEndOfDayService.EndOfDay(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IEndOfDayTransaction)">
            <summary>
            When a complete working day is finished. The instance of the interface is in the ApplicationServices, 
            but the method itself called from within the execute() method in \POSProcesses\Operations\EndOfDay.cs.
            <example><code>LSRetailPosis.ApplicationServices.IEOD.EndOfDay((EndOfDayTransaction)this.posTransaction);</code></example>
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="transaction">The current transaction as a value object which has been expanded to the operation-value of an type 
            'EndOfDayTransaction'.</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IEndOfDayService.EndOfShift(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IEndOfShiftTransaction)">
            <summary>
            When a complete working shift is finished. The instance of the interface is in the ApplicationServices, 
            but the method itself called from within the execute() method in \POSProcesses\Operations\EndOfShift.cs.  
            <example><code>LSRetailPosis.ApplicationServices.IEOD.EndOfShift((EndOfShiftTransaction)posTransaction);</code></example>
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="transaction">The current transaction as a value object which has been expanded to the operation-value of an type 
            'EndOfShiftTransaction'.</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IEndOfDayService.PrintItemSaleReport(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.DataLayer.BusinessObjects.Enums.ItemSaleReportGroupEnum)">
            <summary>
            Prints the item sale report. It will include a summary of items sold and quantity
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="transaction">The current transaction instance</param>
            <param name="printGroup">The group depth used for printing</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IEndOfDayService.PrintXReport(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>        
            Prints the X report. It will include all transactions that have not been picked up by a Z report
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="transaction">The current transaction instance.</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IEndOfDayService.PrintZReport(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,System.Boolean)">
            <summary>        
            Prints the Z report. It will include all transactions that have not already been picked up by a previous Z report        
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="transaction">The current transaction instance.</param>
            <param name="displayConfirmation">If true a confirmation dialog is displayed before printing the Z report</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IEndOfDayService.InitializeZReport(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.DataLayer.BusinessObjects.EOD.ZReport)">
            <summary>
            Initializes the "Total POS sales amount". Will only be called if no Z reports are in the database.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="transaction">The current transaction</param>
            <param name="newZReport">Information about the new Z Report</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IEndOfDayService.PrintInitialZReport(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.DataLayer.BusinessObjects.EOD.ZReport)">
            <summary>
            Prints an empty Z report wich will include the initialized numbers just entered in the Initialize Z Report operation
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="transaction">The current transaction</param>
            <param name="zReport">Information about the initial Z report</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IEndOfDayService.GetXReportPrintString(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Get the X report string to print
            </summary>
            <param name="entry">Database connection</param>
            <param name="transaction">Internal transaction with minimal data</param>
            <returns>String to be printed representing the X report</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IEndOfDayService.GetZReportPrintString(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.DataLayer.BusinessObjects.EOD.ZReport,System.String@)">
            <summary>
            Validate and get the Z report string to print
            </summary>
            <param name="entry">Database connection</param>
            <param name="transaction">Internal transaction with minimal data</param>
            <param name="zReport">Current Z report. Can be null.</param>
            <param name="printString">OUT - string representing the Z report</param>
            <returns>True if the Z report is validated and can be printed.</returns>
            <remarks>If the result is false then the print string is empty.</remarks>
        </member>
        <member name="M:LSOne.Services.Interfaces.IEventService.ReceiptSaleItemDataChange(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.EventArguments.SaleItemDataChangeArgs)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="e"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IEventService.ReceiptCustomerDepositDataChange(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.EventArguments.CustomerDepositDataChangeArgs)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="e"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IEventService.BroadcastTotalsDataChangeEnabled">
            <summary>
            If true then the Totals amount box will broadcast the TotalsDataChange event to the Events service
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.IEventService.TotalsDataChange(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.EventArguments.TotalsDataChangeArgs)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="e"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IEventService.CustomerVisualComponentDataChanged(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Customers.Customer,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="customer"></param>
            <param name="posTransaction"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IEventService.PreDisplayReceiptItem(LSOne.Services.Interfaces.EventArguments.PreDisplayReceiptItemArgs)">
            <summary>
            Is called before an item is added to the receipt panel on the POS. If the item should not be displayed return DisplayReceiptItem as false
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IEventService.PreRefreshStatusStrip(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.EventArguments.PreRefreshStatusStripArgs)">
            <summary>
            Called before refreshing the POS status bar allowing to override the terminal and operator status
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="e"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IEventService.GetHTMLInformation(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Get an HTML string with information to be displayed in the HTML information panel
            </summary>
            <param name="entry">Database connection</param>
            <param name="posTransaction">Current transaction</param>
            <returns></returns>
        </member>
        <member name="T:LSOne.Services.Interfaces.FiscalBarcodeSymbology">
            <summary>
            Supported barcode symbologies for the fiscal printer
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.IFiscalService.ManufacturerName">
            <summary>
             Get fiscal service about info - Manufacturer Name - e.g. LS Retail ehf.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.IFiscalService.CodeVersion">
            <summary>
             Get fiscal service about info - Code Version - e.g. 1.0
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.IFiscalService.LocalVersion">
            <summary>
             Get fiscal service about info - Local Version - e.g. SE
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.IFiscalService.PrintReceiptCopy(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.DataLayer.BusinessObjects.Enums.ReprintTypeEnum)">
            <summary>
            Every time a copy of the receipt is printed this function is called to decide if the copy can be printed
            </summary>
            <param name="entry">Instance of the connection manager</param>
            <param name="transaction">The transaction being printed</param>
            <param name="reprintType">What type of copy is being printed; receipt copy or invoice</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IFiscalService.PrintFiscalLog(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.Collections.Generic.List{LSOne.DataLayer.BusinessObjects.Fiscal.FiscalLogEntity})">
            <summary>
            Prints out selected fiscal log entities
            </summary>
            <param name="entry">Instance of the connection manager</param>
            <param name="logEntities">Instances of log lines to be printed</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IFiscalService.SaveFiscalLog(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.Collections.Generic.List{LSOne.DataLayer.BusinessObjects.Fiscal.FiscalLogEntity},System.String)">
            <summary>
            Saves selected fiscal log entities to a file
            </summary>
            <param name="entry">Instance of the connection manager</param>
            <param name="logEntities">Instances of log lines to be printed</param>
            <param name="saveFilePath">The path to the log file</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IFiscalService.SaveFiscalLog(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Fiscal.FiscalLogEntity)">
            <summary>
            Saves a log entry to the database
            </summary>
            <param name="entry">Connection to the database</param>
            <param name="log">The log to be saved</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IFiscalService.SaveFiscalLog(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.String,LSOne.DataLayer.BusinessObjects.Enums.POSOperations)">
            <summary>
            Creates a FiscalLogEntry and saves it to the database
            </summary>
            <param name="entry">Connection to the database</param>
            <param name="logString">Log string to be saved</param>
            <param name="operation">The operation saving the log</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IFiscalService.IsActive">
            <summary>
            Defines if the fiscal implementation is active
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.IFiscalService.ShowJournalLogExportDialog(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.DateTime@,System.DateTime@,System.String@,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Shows a dialog to select a date range and then decide if the fiscal journal log should be printed or saved to a file
            </summary>
            <param name="entry"></param>
            <param name="saveFilePath"></param>
            <param name="fromDate"></param>
            <param name="toDate"></param>
            <param name="posTransaction"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IFiscalService.SaveReceiptCopy(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,System.Boolean)">
            <summary>
            Save a receipt copy
            </summary>
            <param name="entry"></param>
            <param name="transaction"></param>
            <param name="copyReceipt"></param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IFiscalService.JournalLogExport(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Exports the journal log.
            </summary>
            <param name="entry"></param>
            <param name="transaction"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IFiscalService.GetHeaderTextForTrainingMode(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Forms.FormInfo,LSOne.Services.Interfaces.SupportInterfaces.ISettings,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.DataLayer.BusinessObjects.Enums.FormSystemType)">
            <summary>
             If POS is in training mode then if needed can customize on Receipt Header the two lines 
             T R A I N I N I N G  M O D E This is not a valid receipt
            </summary>
            <param name="entry"></param>
            <param name="formInfo"></param>
            <param name="prnSettings"></param>
            <param name="trans"></param>
            <param name="systemType"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IFiscalService.GetFooterTextForTrainingMode(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Forms.FormInfo,LSOne.Services.Interfaces.SupportInterfaces.ISettings,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.DataLayer.BusinessObjects.Enums.FormSystemType)">
            <summary>
             If POS is in training mode then if needed can customize on Receipt Footer the two lines 
             T R A I N I N I N G  M O D E This is not a valid receipt
            </summary>
            <param name="entry"></param>
            <param name="formInfo"></param>
            <param name="prnSettings"></param>
            <param name="trans"></param>
            <param name="systemType"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IFiscalService.GetFiscalSignature(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISettings,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
             Get the fiscal signature for a sale
            </summary>
            <param name="entry"></param>
            <param name="prnSettings"></param>
            <param name="trans"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IFiscalService.FiscalGetInfoFromTransaction(System.String,LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISettings,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,System.Boolean@)">
            <summary>
            Gets the value/display text for a printing variable in the Fiscalization category.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IFiscalService.FiscalGetText(System.String,LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISettings,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,System.Boolean@)">
            <summary>
            Gets the value/display text for a printing text-only variable. 
            </summary>
            <param name="variable">Name of the printing parameter.</param>
            <param name="entry"></param>
            <param name="prnSettings"></param>
            <param name="trans">Current POS transaction.</param>
            <param name="variableChanged"></param>
            <returns></returns>
        </member>
        <member name="T:LSOne.Services.Interfaces.IGiftCardService">
            <summary>
            
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.IGiftCardService.GiftCardChangeBack(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction,System.String,System.Decimal)">
            <summary>
            Issues or updated a gift card that should be created as a change back when payment is made in the POS
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="retailTransaction">The current transaction</param>
            <param name="giftCardTenderId">The tender type ID used for the gift card tender</param>
            <param name="amount">The amount that is to be issued</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IGiftCardService.IssueGiftCard(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Issues a gift card. Depends on configurations on the Site service profile how the gift card is issued ID/Amount/ID and Amount
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="posTransaction">The current transaction</param>
            <param name="giftCardTenderId">The tender type ID used for the gift card tender</param>
            <param name="prefix">The prefix that is to be used when creating the gift card ID</param>
            <param name="numberSequenceLowest">The first value of the number sequence that should create the gift cards</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IGiftCardService.VoidGiftCard(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.String,System.Decimal)">
            <summary>
            Voids a gift card both in the transaction and at head office
            </summary>
            <param name="entry">The entry into the database</param>        
            <param name="giftCardId">The gift card ID that is to be voided</param>
            <param name="orginalBalance">The original balance of the gift card</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IGiftCardService.AuthorizeGiftCardPayment(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.String@,System.Decimal@,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,System.String,System.Decimal)">
            <summary>
            Returns if the gift card can be used for the payment
            </summary>
            <param name="entry">The entry into the database</param>                
            <param name="giftCardId">The gift card ID that is to be authorized</param>
            <param name="amount">The amount to be authorized</param>
            <param name="posTransaction">The current transaction</param>
            <param name="paymentId">The tender type ID of the payment used</param>
            <param name="restrictedAmount">Maximum amount that can be paid in case of limitations</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IGiftCardService.VoidGiftCardPayment(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.String,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction)">
            <summary>
            Voids a gift card payment that has already been authorized
            </summary>
            <param name="entry">The entry into the database</param>        
            <param name="giftCardId">The gift card ID to be voided</param>
            <param name="retailTransaction">The current transaction in the POS</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IGiftCardService.UpdateGiftCertificate(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.String,System.Decimal,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Updates the gift certificate information if it has changed on the POS
            </summary>
            <param name="entry">The entry into the database</param>        
            <param name="giftCardId"></param>
            <param name="amount"></param>
            <param name="retailTransaction"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IGiftCardService.GiftCardPaid(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IGiftCertificateItem,LSOne.Utilities.DataTypes.RecordIdentifier)">
            <summary>
            Run when a gift card has been paid
            </summary>
            <param name="entry">Connection to the database</param>
            <param name="giftCard">The gift card that was paid</param>
            <param name="receiptID">The receipt ID of the transaction paying for the gift card</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IGiftCardService.GetGiftCardBalance(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager)">
            <summary>
            Get the balance of the gift card with a given ID
            </summary>
            <param name="entry">Connection to the database</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IGiftCardService.UpdateGiftCardPaymentReceipt(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IGiftCertificateTenderLineItem,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction)">
            <summary>
            Updates an already existing gift card payment with a receipt ID once it has been created.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="tenderLine">The gift card tenderline</param>
            <param name="transaction">The current transaction</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IGiftCardService.SiteServiceIsNeeded(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Returns true if the Site service is needed to conclude a transaction that includes gift card information
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="transaction">The current transaction</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IGiftCardService.CreateGiftCardFromTenderLine(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.Services.Interfaces.SupportInterfaces.IGiftCertificateTenderLineItem)">
            <summary>
            Creates a gift card from information on a tender line item. This is used when a gift card is created to give change back and the gift card information
            needs to be printed when the rest of the sale information is being printed
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="transaction">The current transaction</param>
            <param name="giftCertificateTenderLine">The gift card change back tender line</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IHospitalityService.TransferTable(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction,System.Int32,System.Int32)">
            <summary>
            Transfers a transaction between tables
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="FromTransaction">The being transferred</param>
            <param name="ToTransaction">To transaction on the table being transferred to</param>
            <param name="FromTableId">The table ID being transferred</param>
            <param name="ToTableId">The table ID begin transferred to</param>
            <returns>HospitalityResult</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IHospitalityService.SendToStationPrinter(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction,System.Boolean,System.Boolean)">
            <summary>
            Sends information from the retail transaction to a station printer.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="retailTransaction">The retail transaction.</param>
            <param name="sendAllRemainingItems">If true then no items are excluded from printing. This applies to <see cref="P:LSOne.DataLayer.BusinessObjects.Hospitality.HospitalityType.StationPrinting"/> when it is set to <see cref="F:LSOne.DataLayer.BusinessObjects.Hospitality.HospitalityType.StationPrintingEnum.AtItemAddedOneDelay"/></param>
            <param name="isPaymentOperation">If true then we are printing from a payment operation</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IHospitalityService.PreparationForPayment(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Prepare the transaction for payment and check if Site Service is available
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="posTransaction">The retail transaction</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IHospitalityService.PreparationForVoid(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Prepare the transaction for void and check if Site Service is available
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="posTransaction">The retail transaction</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IHospitalityService.GetHospPanel(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.Delegates.SetMainViewIndexDelegate,LSOne.Services.Interfaces.Delegates.RunOperationDelegate,LSOne.Services.Interfaces.Delegates.SetTransactionDelegate,LSOne.Services.Interfaces.Delegates.SetInputAbilityDelegate,LSOne.Services.Interfaces.Delegates.LoadPosDesignDelegate,LSOne.Services.Interfaces.Delegates.LogOffUserDelegate)">
            <summary>
            Returns the table panel for the table view.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="setMainViewIndexHandler">A delegate to switch the between the main dialog and the table view.</param>
            <param name="runOperationHandler">A delegate that runs the operations.</param>
            <param name="setTransactionHandler">A delegate to set a transaction to the POS</param>
            <param name="setInputAbilityHandler">A delegate to enable or disable input into the POS.</param>
            <param name="loadPosDesignHandler">A designer for loading the POS design</param>
            <param name="logOffUserHandler">A delegate for logging out the user</param>
            <returns>TableLayoutPanel.</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IHospitalityService.SetHospitalityTypeText(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.String)">
            <summary>
            Sets the hospitality type text.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IHospitalityService.SetSelectedTableText(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Hospitality.TableInfo)">
            <summary>
            Sets the selected table text.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="table"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IHospitalityService.Initialize(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager)">
            <summary>
            Initializes the hospitality
            </summary>
            <param name="entry">The entry into the database</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IHospitalityService.RunHospitalityPart(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Displays the hospitality table view
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="posTransaction">The pos transaction.</param>
            <param name="cancelStationPrinting">if true then no station printing is done</param>
            <param name="autoLogOff">if true then the POS is trying to automatically log off</param>
            <param name="forceLogoffUser">if true then the logoff functionality in the table view is run</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IHospitalityService.SplitBill(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction@,LSOne.DataLayer.BusinessObjects.Enums.MainViewEnum)">
            <summary>
            An operation to split the bill
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="posTransaction">The pos transaction.</param>
            <param name="origin">From where does is the operation being called; table view or POS</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IHospitalityService.FinalizeSplitBill(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,System.Boolean)">
            <summary>
            Finalizes the transaction after the split bill
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="posTransaction">The pos transaction.</param>
            <param name="cancelStationPrinting">if true then no station printing is done</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IHospitalityService.GetSelectedTableId(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager)">
            <summary>
            Returns the selected table ID.
            </summary>
            <param name="entry">The entry into the database</param>
            <returns>Returns a table ID</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IHospitalityService.GetSelectedTableDescription(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager)">
            <summary>
            Returns the selected table description.
            </summary>
            <param name="entry">The entry into the database</param>
            <returns>Returns a table description</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IHospitalityService.GetNoOfGuests(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager)">
            <summary>
            Returns the number of guests on the selected table
            </summary>
            <param name="entry">The entry into the database</param>
            <returns>Returns the number of guests</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IHospitalityService.GetActiveHospSalesType(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager)">
            <summary>
            Gets the active hospitality type in the table view
            </summary>
            <param name="entry">The entry into the database</param>
            <returns>The description of the hospitality type</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IHospitalityService.SetActiveHospitalityType(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.String)">
            <summary>
            Sets the active hospitality type
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="salesType">Type of the sales.</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IHospitalityService.GetHospitalityTaxGroupFrom(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager)">
            <summary>
            If the selected sales type (hospitality type) has a specific tax group then the function returns UseTaxGroupFrom.SalesType otherwise the default system value
            </summary>
            <returns>How the POS should calculate the tax for the selected hospitality type</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IHospitalityService.SetPrintingStatus(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Sets the printing status on all items on the transaction depending on actions that have been taken already
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="posTransaction">The current transaction</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IHospitalityService.SetPrintingStatus(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem,System.Boolean)">
            <summary>
            Sets the printing status on the items depending on actions that have been taken
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="posTransaction">The current transaction</param>
            <param name="lineItem">The currently selected item</param>
            <param name="linkedItemsGetChangedStatus">If the item has linked items should the linked items get a "Changed" status with the header item?</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IHospitalityService.SetPrintingStatus(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem,System.String,System.String)">
            <summary>
            Sets the printing status on the items depending on changes in item comments
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="posTransaction">The current transaction</param>
            <param name="lineItem">The currently selected item</param>
            <param name="newComment">The item line comments after the user has edited them</param>
            <param name="originalComment">The item line comments before the user edited them</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IHospitalityService.SetPrintingStatus(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem,System.Decimal,System.Decimal)">
            <summary>
            Sets the printing status on the items depending on changes in item quantity
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="posTransaction">The current transaction</param>
            <param name="lineItem">The currently selected item</param>
            <param name="newQty">The item line quantity after the user has edited them</param>
            <param name="originalQty">The item line quantity before the user edited them</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IHospitalityService.ItemAddedToSale(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction)">
            <summary>
            Called when an item has been added to the sales transaction
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="retailTransaction">The transactio the item was added to</param>        
        </member>
        <member name="M:LSOne.Services.Interfaces.IHospitalityService.TransactionVoided(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction)">
            <summary>
            Called when the transaction has been voided
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="retailTransaction">The voided transaction</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IHospitalityService.ItemVoided(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction,LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem)">
            <summary>
            Called when an item is voided
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="retailTransaction">The transaction that the item belongs to</param>
            <param name="lineItem">The voided item</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IHospitalityService.ItemQuantityChanged(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction,LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem)">
            <summary>
            Called when an items quantity is changed
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="retailTransaction">The transaction that the item belongs to</param>
            <param name="lineItem">The item who's quantity changed</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IHospitalityService.BumpOrder(LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier)">
            <summary>
            Bumps the order with the given order id and transaction id
            </summary>
            <param name="orderId">The id of the order</param>
            <param name="transactionId">Id of the transaction</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IHospitalityService.RefreshKitchenService">
            <summary>
            Refreshes the Kitchen Service that the POS is connected to. This means that settings for kitchen displays are resent and orders are resent to all devices
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.IHospitalityService.ClearTableSelection">
            <summary>
            Deselects any table that is selected.
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.IHospitalityService.UpdateSelectedTableTransaction(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,System.Boolean,System.Double)">
            <summary>
            Updates the currently selected table with the transaction as it is now.
            Will only save the transaction if the POS is active (not table view)
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="posTransaction">The transaction to save to the selected table</param>
            <param name="useTableUpdate">If true then the transaction is saved if the "Table update timer interval" has been reached</param>
            /// <param name="secondsIdle">How much time has passed since the user clicked any operation on the POS</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IHospitalityService.IsTableLockedByCurrentTerminal(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager)">
            <summary>
            Checks if the table opened in the POS is possibly locked by another terminal. This can happen if more than one people click a table at the exact same time
            This check is only done once and if more than one terminal has a hospitality profile otherwise it's not done
            </summary>
            <param name="entry">The entry into the database</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IHospitalityService.IsTableUnlocked(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager)">
            <summary>
            Checks if the table open in the POS is unlocked by another terminal.
            </summary>
            <param name="entry">The entry into the database</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IHospitalityService.StopHospitalityTimers">
            <summary>
            Stops all timers currently active in the Hospitality Service
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.IHospitalityService.ConcludeTransaction(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Called when a tranasction is being concluded. Before it has been saved.
            </summary>
            <param name="entry"></param>
            <param name="posTransaction"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IHospitalityService.SetDataModel(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager)">
            <summary>
            Use this to manually set the private instance of the connection for this service. When using the POSEngine always 
            call this function prior to creating a new transaction.
            </summary>
            <param name="entry">The entry into the database</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IHospitalityService.GetActiveHospitalityType(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager)">
            <summary>
            Gets the currently selected hospitality type
            </summary>
            <param name="entry">The connection to the database</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IHospitalityService.GetDiningTableInfo(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Utilities.DataTypes.RecordIdentifier,System.Int32)">
            <summary>
            Gets the specified dining table information
            </summary>
            <param name="entry">The connection to the database</param>
            <param name="diningTableLayoutID">The dining table layout that the table belongs to</param>
            <param name="tableID">The table ID</param>
            <returns>The specified table is returned if it is found, otherwise returns <see langword="null"/></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IHospitalityService.GetDiningTableInfo(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager)">
            <summary>
            Gets the dining table information for the currently selected table on the table view
            </summary>
            <param name="entry">The connection to the database</param>                        
            <returns>The currently selected table, otherwise returns <see langword="null"/> if no table is currently selected</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IHospitalityService.CheckForSplitTransaction(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,System.Boolean,LSOne.Utilities.DataTypes.RecordIdentifier)">
            <summary>
            Checks if the given transaction is part of a split-transaction and combines the split part back into <paramref name="posTransaction"/>
            </summary>
            <param name="entry">The connection to the database</param>
            <param name="posTransaction">The tranasction to combine the split into</param>
            <param name="combineSplitTransactions">If true, then the split part will be combined into <paramref name="posTransaction"/></param>
            <param name="overrideTransactionID">If not <see langword="null"/> then the transaction ID of <paramref name="posTransaction"/> will be overwritten with this value</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IHospitalityService.SelectMenuType(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Shows a dialog allowing the user to select a menu type
            </summary>
            <param name="menuTypeNames">List of menu type names to display</param>
            <param name="caption">Dialog header title</param>
            <returns>The selected menu type</returns>
        </member>
        <member name="T:LSOne.Services.Interfaces.IInfocodesService">
            <summary>
            
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInfocodesService.ProcessInfocode(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISession,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,System.Decimal,System.Decimal,System.String,System.String,System.String,LSOne.DataLayer.BusinessObjects.Transactions.Line.InfoCodeLineItem.TableRefId,System.String,LSOne.DataLayer.BusinessObjects.Transactions.Line.InfoCodeLineItem,LSOne.DataLayer.BusinessObjects.Transactions.Line.InfoCodeLineItem.InfocodeType,System.Boolean)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="session">The current session</param>
            <param name="posTransaction"></param>
            <param name="quantity"></param>
            <param name="amount"></param>
            <param name="refRelation"></param>
            <param name="refRelation2"></param>
            <param name="refRelation3"></param>
            <param name="tableRefId"></param>
            <param name="linkedInfoCodeId"></param>
            <param name="orgInfocode"></param>
            <param name="infocodeType"></param>
            <param name="automaticTriggering"></param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInfocodesService.ProcessInfocode(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISession,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,System.Decimal,System.Decimal,System.String,System.String,System.String,LSOne.DataLayer.BusinessObjects.Transactions.Line.InfoCodeLineItem.TableRefId,System.String,LSOne.DataLayer.BusinessObjects.Transactions.Line.InfoCodeLineItem,LSOne.DataLayer.BusinessObjects.Transactions.Line.InfoCodeLineItem.InfocodeType,LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem@,System.Boolean,System.Decimal)">
            <summary>
            
            </summary>
            <param name="entry"></param>
            <param name="session">The current session</param>
            <param name="posTransaction"></param>
            <param name="quantity"></param>
            <param name="amount"></param>
            <param name="refRelation"></param>
            <param name="refRelation2"></param>
            <param name="refRelation3"></param>
            <param name="tableRefId"></param>
            <param name="linkedInfoCodeId"></param>
            <param name="orgInfocode"></param>
            <param name="infocodeType"></param>
            <param name="saleLineItem"></param>
            <param name="automaticTriggering"></param>
            <param name="minimumValue"></param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInfocodesService.ProcessInfocode(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISession,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,System.Decimal,System.Decimal,System.String,System.String,System.String,LSOne.DataLayer.BusinessObjects.Transactions.Line.InfoCodeLineItem.TableRefId,System.String,LSOne.DataLayer.BusinessObjects.Transactions.Line.InfoCodeLineItem,LSOne.DataLayer.BusinessObjects.Transactions.Line.InfoCodeLineItem.InfocodeType,LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem@,System.Boolean)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="session">The current session</param>
            <param name="posTransaction"></param>
            <param name="quantity"></param>
            <param name="amount"></param>
            <param name="refRelation"></param>
            <param name="refRelation2"></param>
            <param name="refRelation3"></param>
            <param name="tableRefId"></param>
            <param name="linkedInfoCodeId"></param>
            <param name="orgInfocode"></param>
            <param name="infocodeType"></param>
            <param name="saleLineItem"></param>
            <param name="automaticTriggering"></param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInfocodesService.ProcessLinkedInfocodes(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISession,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem,LSOne.DataLayer.BusinessObjects.Transactions.Line.InfoCodeLineItem.TableRefId,LSOne.DataLayer.BusinessObjects.Transactions.Line.InfoCodeLineItem.InfocodeType)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="session">The current session</param>
            <param name="posTransaction"></param>
            <param name="saleLineItem"></param>
            <param name="tableRefId"></param>
            <param name="infocodeType"></param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInfocodesService.ProcessLinkedInfocodes(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISession,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.Services.Interfaces.SupportInterfaces.ITenderLineItem,System.String,LSOne.DataLayer.BusinessObjects.Transactions.Line.InfoCodeLineItem.TableRefId,LSOne.DataLayer.BusinessObjects.Transactions.Line.InfoCodeLineItem.InfocodeType)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="session">The current session</param>
            <param name="posTransaction"></param>
            <param name="tenderLineItem"></param>
            <param name="storeId"></param>
            <param name="tableRefId"></param>
            <param name="infocodeType"></param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInfocodesService.ProcessLinkedInfocodes(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISession,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.DataLayer.BusinessObjects.Transactions.Line.InfoCodeLineItem.TableRefId,LSOne.DataLayer.BusinessObjects.Transactions.Line.InfoCodeLineItem.InfocodeType)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="session">The current session</param>
            <param name="posTransaction"></param>
            <param name="tableRefId"></param>
            <param name="infocodeType"></param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInfocodesService.ProcessCentralSuspensionInfocode(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISession,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction,System.String,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="session">The current session</param>
            <param name="retailTransaction"></param>
            <param name="infocodeId"></param>
            <param name="inputRequired"></param>
            <param name="prompt"></param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IInfocodesService.ChangeTaxGroup(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,System.String)">
            <summary>
            Displays all subcodes with trigger function TaxGroup for the given infocodeID.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="posTransaction">The current transaction</param>
            <param name="infocodeID">The ID of the infocode to display subcodes for</param>
            <returns>True if the user chose to change the current tax group, false otherwise</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IItemService.ProcessItem(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            This function is implemented by Item.cs. There three different functions are called within 'ProcessItem':
            
            1. GetInventTableModuleInfo(ref saleLineItem); //queries the datatable 'InventTable' for the following item attributes:
                
               <code>SELECT I.[ItemType], I.[ItemName], I.[ItemGroupID] FROM InventTable I WHERE I.ItemID = @ItemID AND I.DATAAREAID=@DATAAREAID ";</code>
            
                ItemType, in order to set saleLineItem.ItemType
                ItemName, in order to set the ItemDescription = ItemName if the description has been empty
                ItemGroupID, in order to set saleLineItem.ItemGroupId.
            
            2. GetRBOInventTableInfo(ref saleLineItem);
                <code>SELECT M.[LineDisc],M.[MultiLineDisc],M.[EndDisc],M.[UnitId] FROM InventTableModule M WHERE (...) </code>
                These attributes are assigned as follows: <code>
                    saleLineItem.LineDiscountGroup = Utility.ToStr(reader[reader.GetOrdinal("LineDisc")]);
                    
            
                    saleLineItem.MultiLineDiscountGroup = Utility.ToStr(reader[reader.GetOrdinal("MultiLineDisc")]);
                    
            
                    saleLineItem.IncludedInTotalDiscount = Utility.ToBool(reader[reader.GetOrdinal("EndDisc")]);</code>
                    <remarks>Whether an item is included in the total discount granted. Implementation not yet finished.</remarks>
            
            3. GetInventDimInfo(ref saleLineItem);
                <code>SELECT ItemID FROM InventDimCombination I WHERE I.ItemID = @ItemID AND I.DATAAREAID=@DATAAREAID</code>
                    Sets the boolean <code>saleLineItem.Dimension.EnterDimensions</code> to true or false according to whether the query has returned rows or not.    
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="saleLineItem">A standard sale item line in a transaction.</param>
            <param name="transaction">Transaction</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IItemService.ItemSearch(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.String@,System.Int32,LSOne.Services.Interfaces.Enums.ItemSearchViewModeEnum,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.DataLayer.BusinessObjects.OperationInfo)">
            <summary>
            Displays the Item Search dialog. Returns false if the user pressed cancel. Returns true if the user did choose to sell a selected item.         
            </summary>
            <param name="selectedItemId">The item id selected in the dialog</param>
            <param name="numberOfDisplayedRows">How many rows should be displayed in the dialog</param>
            <param name="viewMode">View mode to use</param>
            <param name="retailGroup">Retail group to filter by</param>
            <param name="entry">The entry into the database</param>
            <param name="posTransaction">The active transaction</param>
            <param name="operationInfo"></param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IItemService.BarcodeSelect(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.Collections.Generic.List{LSOne.DataLayer.BusinessObjects.BarCodes.BarCode},LSOne.DataLayer.BusinessObjects.BarCodes.BarCode@,System.String)">
            <summary>
            Display a list of barcodes to select from
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="barcodes"></param>
            <param name="selectedBarcode"></param>
            <param name="itemName">Name of the item for which a barcode must be selected. Used as display header.</param>
            <returns>True if a barcode has been selected</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IItemService.GetScaleDisplayInformation(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem,System.Int32)">
            <summary>
            Returns a string representation for the display about how the quantity and unitprice is multiplied together.  This is used to comply with 
            regulations from the National Measurement Office
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="saleLineItem"></param>
            <param name="lineLength"></param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IItemService.Validate(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.String)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="validation"></param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IItemService.GetRetailItemCost(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Get the purchase price for an item and store
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="itemID">ID of the item for which to retrieve the cost</param>
            <param name="storeID">ID of the store for which to retrieve the cost. Empty ID will return an average cost of all stores</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IItemService.GetRetailItemCostList(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.BusinessObjects.ItemMaster.RetailItemCostFilter,System.Int32@,System.Boolean)">
            <summary>
            Get a list purchase prices for an item, for each store including an average for all stores
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="itemID">ID of the item for which to retrieve the cost</param>
            <param name="filter">Search filter</param>
            <param name="totalCount">Total items found</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IItemService.InsertRetailItemCosts(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,System.Collections.Generic.List{LSOne.DataLayer.BusinessObjects.ItemMaster.RetailItemCost},System.Boolean)">
            <summary>
            Insert a list of retail item costs
            </summary>
            <param name="entry">Database connection</param>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="itemCosts">List of item costs to insert</param>
            <param name="closeConnection">If true then the connection to the site service is closed as soon as the operation has finished otherwise it will stay open</param>
        </member>
        <member name="P:LSOne.Services.Interfaces.ILabelService.LastErrorMessage">
            <summary>
            The last error that occurred while printing
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.ILabelService.GetAvailableMacros``1">
            <summary>
            Gets a list of all available macros for the specified data entity
            </summary>
            <returns>A list of available macros, or null if none</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ILabelService.Print(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.Collections.Generic.List{LSOne.Services.Interfaces.LabelPrintRequest})">
            <summary>
            Print labels for the specific entities using the specific template
            </summary>
            <param name="entry">Connection to database</param>
            <param name="requests">A list of label print requests</param>
            <returns>True if printed, false otherwise</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ILabelService.AddToPrintQueue(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.String,System.Collections.Generic.List{LSOne.Services.Interfaces.LabelPrintRequest})">
            <summary>
            Add the lael print request to the print queue
            </summary>
            <param name="entry">Connection to database</param>
            <param name="batch">Name of batch</param>
            <param name="requests">A list of label print requests</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ILabelService.PrintFromQueue(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.String)">
            <summary>
            Print all unprinted labels from the batch
            </summary>
            <param name="entry">Connection to database</param>
            <param name="batch">The id of the batch, or empty to print all unprinted labels</param>
            <returns>True if printed, false otherwise</returns>
        </member>
        <member name="T:LSOne.Services.Interfaces.IApplicationService">
            <summary>
            
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.IApplicationService.GetNextReceiptId(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.String)">
            <summary>
            Returns the next receipt ID for the given receipt id number sequence. If no number sequence is given or if the number sequence given does not exist in the NUMBERSEQUENCETABLE
            the default sequence RECEIPTID is used.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="receiptIdNumberSequence">The Number sequence id being used to create the receipt ids</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IApplicationService.ReceiptIDExists(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.String)">
            <summary>
            Returns true if the given receiptID exists in RBOTRANSACTIONTABLE
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="receiptID">The value of the receiptID</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IApplicationService.GenerateReceiptID(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISettings,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            If there is no receipt ID on the transaction or if the receipt ID that is already on the transaction already exists
            a new receipt ID is generated and set on the transaction
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="settings">The current settings</param>
            <param name="transaction">The transaction to check and update</param>
        </member>
        <member name="P:LSOne.Services.Interfaces.IApplicationService.ApplicationWindowCaption">
            <summary>
            Returns the text to be displayed on the task bar icon if it returns an empty string a default LSPOS string is displayed
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.IApplicationService.ApplicationWindowIcon">
            <summary>
            Returns the icon to be displayed in the task bar if null is returned then the default LS Pos icon is displayed
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.IApplicationService.LoginWindowImage">
            <summary>
            Returns the image to be displayed on the logon dialog in the top left corner if null is returned then the default LS Pos image is displayed.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.IApplicationService.ReceiptSequenceProvider">
            <summary>
            Returns the sequence provider used for generating receipt IDs through the number sequence generator. If you wish to suppress the use of this provider
            in the POS return null.
            </summary>
        </member>
        <member name="T:LSOne.Services.Interfaces.IBarcodeService">
            <summary>
            Method to process the original barcode to populate the different barcode properties.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.IBarcodeService.Quantity">
            <summary>
            Quantity scanned
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.IBarcodeService.ProcessBarcode(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem@,LSOne.DataLayer.BusinessObjects.BarCodes.ScanInfo,LSOne.DataLayer.BusinessObjects.BarCodes.BarCode,System.String,System.String)">
            <summary>
            Takes two parameters, processes them (thereby searches the database) and returns an instance of 'BarCode'.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="saleLineItem"></param>
            <param name="scanInfo">Describes the way a barcode has been entered into the system.</param>
            <param name="barCode"></param>
            <param name="barcode">A string barcode as entered into the system.</param>
            <param name="selectedItemID"></param>
            <returns>BarCode is returned to the application core.</returns>
            <seealso cref="T:LSOne.DataLayer.BusinessObjects.BarCodes.BarCode"/>
            <example> This sample shows a call to this method from the class ProcessInput.cs  
            <code> 
            BarCode BarCode = 
            LSRetailPosis.ApplicationServices.IBarcodes.ProcessBarcode(input, BarcodeEntryType.ManuallyEntered); 
            </code> 
            </example>
        </member>
        <member name="M:LSOne.Services.Interfaces.IBarcodeService.ProcessBarcode(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.BarCodes.BarCode.BarcodeEntryType,System.String,System.String)">
            <summary>
            Takes two parameters, processes them (thereby searches the database) and returns an instance of 'BarCode'.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="entrytype">Describes the way a barcode has been entered into the system.</param>
            <param name="barcode">A string barcode as entered into the system.</param>
            <param name="selectedItemID"></param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IBarcodeService.ProcessBarcode(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.BarCodes.ScanInfo,System.String)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="scanInfo"></param>
            <param name="selectedItemID"></param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IBarcodeService.ProcessCustomizedBarcode(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.DataLayer.BusinessObjects.BarCodes.ScanInfo,LSOne.DataLayer.BusinessObjects.BarCodes.BarCode)">
            <summary>
            After the POS has called <see cref="M:LSOne.Services.Interfaces.IBarcodeService.ProcessBarcode(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem@,LSOne.DataLayer.BusinessObjects.BarCodes.ScanInfo,LSOne.DataLayer.BusinessObjects.BarCodes.BarCode,System.String,System.String)"/> and the barcode is of type Customized this function is called 
            to allow any customized functionality that is needed for the scanned barcode. 
            </summary>
            <param name="entry"></param>
            <param name="posTransaction">Current transaction</param>
            <param name="scanInfo">Information about the barcode that was scanned</param>
            <param name="barCode"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IBarcodeService.ProcessQR(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.DataLayer.BusinessObjects.BarCodes.ScanInfo,LSOne.DataLayer.BusinessObjects.BarCodes.BarCode)">
            <summary>
            This function is called if the barcode is of type QR (see <see cref="T:LSOne.DataLayer.BusinessObjects.Enums.BarcodeInternalType"/>).
            Here  customization should handle the actual scanned input, add what is needed to the transaction, call a webservice, retrieve data
            from the database and etc.
            </summary>
            <param name="entry">Entry into the database</param>
            <param name="posTransaction">Current transaction</param>
            <param name="scanInfo">The scan info object created by the scan operation or <see cref="M:LSOne.Services.Interfaces.IBarcodeService.CustomizedScanInput(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.OperationInfo,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,System.String)"/></param>
            <param name="barCode">Optional parameter. Information about the barcode created by the scan operation or PartnerProcessBarcode</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IBarcodeService.ProcessMaskSegments(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.BarCodes.BarCode)">
            <summary>
            Process barcode segments into barcode
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="barCode"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IBarcodeService.CustomizedScanInput(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.OperationInfo,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,System.String)">
             <summary>
             When the POS receives something scanned from a barcode this is called first so that if the input string is f.ex. a QR code or boarding pass or any other 
             input that cannot be configured with the barcode masks can be recognized and then processed. This function should only set the <see cref="T:LSOne.DataLayer.BusinessObjects.BarCodes.ScanInfo"/> properties
             as needed. No processing should be done here. Next step is <see cref="M:LSOne.Services.Interfaces.IBarcodeService.ProcessBarcode(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem@,LSOne.DataLayer.BusinessObjects.BarCodes.ScanInfo,LSOne.DataLayer.BusinessObjects.BarCodes.BarCode,System.String,System.String)"/> function
            
             Note! This function should only be used if the scanned string cannot be configured through barcode masks
             </summary>
             <param name="entry">Entry into the database</param>
             <param name="operationInfo">Information from the operation that was being run in the POS</param>
             <param name="transaction">Rhe current transaction</param>
             <param name="input">The string from the scanner</param>
             <returns>A <see cref="T:LSOne.DataLayer.BusinessObjects.BarCodes.ScanInfo"/> object that has information about the string that was scanned</returns>
             <example>
             <code>
                    if (Input.Length > 10 &amp;&amp; Input.Substring(0, 11) == "my prefix")
                    {
                        return = new ScanInfo("my prefix"){ ScanData = Input};
                    }
             </code>
             </example>
        </member>
        <member name="M:LSOne.Services.Interfaces.IBarcodeService.ParseBarcodeReceipt(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.String)">
            <summary>
            Parse a receipt barcode to get store and terminal information
            </summary>
            <param name="entry">Database connection</param>
            <param name="receiptID">Receipt ID</param>
            <returns>Struct containing Store ID, Terminal ID and Receipt ID</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IBarcodeService.GetReceiptBarCodeData(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.BarCodes.BarcodeReceiptParseInfo)">
            <summary>
            Get receipt barcode data based on mask segments and barcode parsed info
            </summary>
            <param name="entry">Database connection</param>
            <param name="parseInfo">Parsed info of the barcode</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IBarcodeService.ManageReceiptBarcode(LSOne.DataLayer.BusinessObjects.Enums.BarcodeType,System.Int32@,System.String@,System.String@,System.Drawing.Size@)">
            <summary>
            Get the barcode symbology based on the type of barcode
            </summary>
            <param name="typeOfBarcode">Type of barcode</param>
            <param name="barcodeSymbology">Barcode symbology reference</param>
            <param name="barcode">Barcode reference</param>
            <param name="barcodeMessage">Barcode message reference</param>
            <param name="size">Size reference</param>
        </member>
        <member name="T:LSOne.Services.Interfaces.ICardService">
            <summary>
            Implemented by class card.cs
            Several validity checks are involved when selecting a card payment.
            Also it is checked, whether the system recognizes the card type and 
            can figure out which tendertype it belongs to.
            
            The class \SystemFramework\ApplicationServices.cs calls the constructor with the following parameters:
            <code>
            cardParameters[0] = LSRetailPosis.Settings.ApplicationSettings.Database.LocalConnection;  // SqlConnection
            cardParameters[1] = LSRetailPosis.Settings.ApplicationSettings.Database.DATAAREAID;// string
            cardParameters[2] = LSRetailPosis.Settings.ApplicationSettings.Terminal.StoreId;  // string 
            </code>
            
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICardService.GetCardType(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Card.CardInfo)">
            <summary>
            In the current implementation, this method includes another method that first retrieves the data of all cards available.
            Then it is for each retrieved card type it is tested whether the given cardnumber (with the length as stored in the database)
            is within the range:
            <code>foreach (CardInfo cardInfo in cardTypes)(...)</code>
            If a valid number range has been found, the card number, the track2 data and the entering method are assigned to a CardInfo object 
            i.e. 'correctCardType'.
            \POSProcesses\Operations\PayCard.Execute() will evaluate, whether it is an international credit cart, a debit card, 
            a loyality card or a corporate card. An instance of PayCorporateCard is created and it's method RunOperation() called.
            (Further background: PayCard.cs is derived from TenderOperation.cs which is derived from Operation.cs.)
            \POSProcesses\Operations\PayCorporateCard.Execute() calls then the interface method of 
            \ServiceInterfaces\CorporateCardInterface\ICorporateCard.cs.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="cardInfo">If not null, it contains all data, i.e. card number, card name, checkings data etc. </param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICardService.IsCardLengthValid(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.String)">
            <summary>
            First of the checks to determine whether entered cardnumber is of a valid length. 
            Length is an estimate (i.e. between 11 and 16 characters).
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="cardNumber">The cardNumber attached to the cardInfo instance, created from class frmPayCard. </param>
            <returns>True when the length of the card number is within the given limits.</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICardService.IsExpiryDateValid(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.String)">
            <summary>
            Check for date validity.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="expirationDate"></param>
            <returns>True when the expiry date has not yet passed.</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICardService.GetAllCardTypes(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager)">
            <summary>
            Returns an array of all the card types.
            </summary>        
            <param name="entry">The entry into the database</param>
            <returns>List of all card types.</returns>
        </member>
        <member name="T:LSOne.Services.Interfaces.ICentralSuspensionService">
            <summary>
            Interface for central suspension operations. Implement this for suspending centrally, recalling transaction, updating suspended transactions and etc.
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICentralSuspensionService.Test(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager)">
            <summary>
            Test function that can be used when developing the interface to make sure that
            the connection has been made
            </summary>
            <param name="entry">The entry into the database</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICentralSuspensionService.SuspendTransaction(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISession,LSOne.Services.Interfaces.SupportInterfaces.ISettings,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Services.Interfaces.Delegates.ShowMessageHandler,LSOne.Services.Interfaces.Delegates.ShowKeyboardInputHandler,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            Suspends the transaction to a central database
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="session">The current session</param>
            <param name="settings">Application settings for the running application</param>
            <param name="retailTransaction">The current retail transaction</param>
            <param name="transactionTypeID">The type of suspension the transaction should be suspended as</param>
            <param name="msgHandler">A message function that the service uses to display any messages to the user</param>
            <param name="keyboardHandler">A message function that the service uses to display a keyboard for the user to enter any data</param>
            <param name="forecourtAllowsSuspension">When using forecourt the configuration for whether suspension is allowed is on the hardware profile.</param>
            <param name="cultureInfo">The current culture info settings</param>
            <returns>The unique ID of the supension</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICentralSuspensionService.RecallTransaction(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISettings,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Services.Interfaces.SupportClasses.MainFormInfo)">
            <summary>
            Recalls the transaction from a central database
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="settings">Application settings for the running application</param>
            <param name="POSTransaction">The current retail transaction</param>
            <param name="transactionTypeID">The type of suspension the transaction should be suspended as</param>
            <param name="mainFormInfo">Information about the main form size, hight and etc.</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICentralSuspensionService.GetSuspendedTransactionAnswers(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISettings,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.BusinessObjects.Transactions.SuspendedTransaction)">
            <summary>
            Retrieves a list of user input for a specific suspended transaction
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="settings">Application settings for the running application</param>
            <param name="transactionID">The unique ID of the suspended transaction</param>
            <param name="suspendedTransaction">The suspended transaction object that the answers belong to. The function can use information from this class when retrieving answers</param>
            <returns>
            An list of <see cref="T:LSOne.DataLayer.BusinessObjects.Transactions.SuspendedTransactionAnswer"/> with information about the user input done when transaction was
            suspende
            </returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICentralSuspensionService.UpdateRecalledTransaction(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISettings,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction,LSOne.DataLayer.BusinessObjects.Transactions.SuspendedTransaction)">
            <summary>
            After the transaction has been selected the store and terminal information are updated as well as begin/end dates on the transaction, items and tenders.
            </summary>
            <param name="entry">The entry itno the database</param>
            <param name="settings">Application settings for the running application</param>
            <param name="retailTransaction">Selected transaction</param>
            <param name="SelectedTransaction">Information about the suspended
            transaction</param>
            <returns>
            Updated transaction
            </returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICentralSuspensionService.GetSuspendedTransactionCount(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISettings,System.Boolean)">
            <summary>
            Returns the number of suspended transactions
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="settings">Application settings for the running application</param>
            <param name="limitToTerminal">If true then the count is limited to the current terminal otherwise to the current store</param>
            <returns>
            The number of suspended transactions
            </returns>
        </member>
        <member name="T:LSOne.Services.Interfaces.ICurrencyService">
            <summary>
            Implemented by Currency.cs.
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICurrencyService.GetExchangeRateRatio(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.String,System.String)">
            <summary>
            Returns the ration between the exchange rates of two currency codes.
            If the exchange rate of either one of the codes are zero, then the result will be zero. 
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="currencyCode1">i.e. 'USD'</param>
            <param name="currencyCode2">i.e. 'DKK'</param>
            <returns>The currency exchange rate.</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICurrencyService.ExchangeRate(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Utilities.DataTypes.RecordIdentifier)">
            <summary>
            Returns the youngest currency exchange rate found for a given currency code.
            If the currency code is DKK, the default currency EUR and the exchange rate is 744.50 then 
            for 100 EUR you will get 744.50 DKK.
            Axapta stores exchange rate for 100 unit of each currency.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="currencyCode">i.e. 'DKK'</param>
            <returns>The currency exchange rate.</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICurrencyService.DetailedCurrencyInfo(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.String)">
            <summary>
            The CurrencyInfo instance returned contains the amounts and whether each is a coin or a bill for the currency code provided.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="currencyCode">i.e. 'DKK'</param>
            <returns>The CurrencyInfo object.</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICurrencyService.CurrencyToCurrency(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Decimal)">
            <summary>
            Converts a value from one currency to another.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="fromCurrencyCode">The currency which the orgValue is in</param>
            <param name="toCurrencyCode">The currency to which to convert the orgValue to</param>
            <param name="companyCurrency">The company currency</param>
            <param name="orgValue">The value to be converted</param>
            <returns>The value as it is after conversion in the toCurrencyCode rounded according to the toCurrencyCode rounding setup</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICurrencyService.CurrencyToCurrencyNoRounding(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Decimal)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="fromCurrencyCode"></param>
            <param name="toCurrencyCode"></param>
            <param name="companyCurrency">The company currency</param>
            <param name="orgValue"></param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IDialogService.ShowSalesPersonDialog(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportClasses.Employee.Employee@)">
            <summary>
            Displays a dialog for choosing a sales person
            </summary>
            <param name="entry">The entry into the database</param>        
            <param name="selectedSalesPerson">Returns the sales person selected in the dialog</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IDialogService.ItemSearch(System.Int32,System.String@,System.String@,LSOne.Services.Interfaces.Enums.ItemSearchViewModeEnum,LSOne.DataLayer.BusinessObjects.ItemMaster.RetailItemSearchEnum,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.DataLayer.BusinessObjects.OperationInfo,System.Boolean)">
            <summary>
            Shows the item search dialog with the items filtered based on a given filter type and ID
            </summary>
            <param name="howManyRows">The maximum number of rows to show at one time</param>
            <param name="selectedItemID">When the dialog closes, this will be the item ID that the user selected</param>
            <param name="selectedItemName">When the dialog closes, this will be the name of the item that the user selected</param>
            <param name="viewMode">Sets the mode that the item search dialog shold show in"/></param>
            <param name="searchFilterType">The type of filter to set on the search results. <see cref="T:LSOne.DataLayer.BusinessObjects.ItemMaster.RetailItemSearchEnum"/></param>
            <param name="searchFilterID">The ID to use for the filter. E.g. a retail group ID, special group ID etc.</param>
            <param name="posTransaction">The current transaction</param>
            <param name="operationInfo">Contains information about the current operation (i.e if it's a return)</param>
            <param name="canBeSold">Determines if the function returns items that can be sold or not</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IDialogService.RemoveCustomerDiscounts(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.String,System.String,System.String)">
            <summary>
            Shows a dialog that gives the option of removing all customer discounts due to the customer having gone over his maximum discounted purchases limit
            </summary>
            <param name="entry">Entry into the database</param>
            <param name="maxDiscountedPurchases">The customers maximum discounted purchases limit</param>
            <param name="currentDiscountedPurchases">The customers current discounted purchases amount</param>
            <param name="currencySymbol">The currency used by the customer</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IDialogService.ShowOverrideCustomer(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Utilities.DataTypes.Name,LSOne.Utilities.DataTypes.Name)">
            <summary>
            Shows a dialog that allows changing customer for recall transaction.
            </summary>
            <param name="entry">Entry into the database</param>
            <param name="firstCustomerName"></param>
            <param name="secondCustomerName"></param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IDialogService.ShowStatusDialog(System.String,System.String)">
            <summary>
            Shows the a modeless message dialog. This dialog does not contain buttons and must be 
            closed by using the CloseStatusDialog function
            </summary>        
            <param name="message">The message to display on the dialog</param>
            <param name="caption">The caption, if any is desired</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IDialogService.ShowStatusDialog(System.String,System.String,LSOne.Services.Interfaces.Enums.StatusDialogIcon)">
            <summary>
            Shows a modeless dialog with a message and an icon. This dialog does not contain buttons and must be
            closed by using the CloseStatusDialog function
            </summary>
            <param name="message">The message to display</param>
            <param name="caption">The caption on the dialog</param>
            <param name="icon">The icon on the caption bar</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IDialogService.ShowStatusDialog(System.String,System.String,LSOne.Services.Interfaces.Enums.StatusDialogIcon,System.Boolean)">
            <summary>
            Shows a dialog with a message and an icon. This dialog does not contain buttons and must be
            closed by using the CloseStatusDialog function
            </summary>
            <param name="message">The message to display</param>
            <param name="caption">The caption on the dialog</param>
            <param name="icon">The icon on the caption bar</param>
            <param name="showModal">If true the status dialog is displayed as modal otherwise modeless</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IDialogService.ShowStatusDialog(System.String,System.String,LSOne.Services.Interfaces.Enums.StatusDialogIcon,System.Boolean,System.Windows.Forms.Control[])">
            <summary>
            Shows a dialog with a message and an icon. This dialog does not contain buttons and must be
            closed by using the CloseStatusDialog function
            </summary>
            <param name="message">The message to display</param>
            <param name="caption">The caption on the dialog</param>
            <param name="icon">The icon on the caption bar</param>
            <param name="showModal">If true the status dialog is displayed as modal otherwise modeless</param>
            <param name="buttons">Any buttons to display on the dialog</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IDialogService.UpdateStatusDialog(System.String,System.String)">
            <summary>
            Updates the modeless message dialog. This dialog does not contain buttons and must be 
            closed by using the CloseStatusDialog function. This function will instatiate the dialog by using <see cref="M:LSOne.Services.Interfaces.IDialogService.ShowStatusDialog(System.String,System.String)"/> if it hasn't already been done
            </summary>
            <param name="message">The message that should replace the previous one displayed</param>
            <param name="caption">The caption of the dialog if any is desired</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IDialogService.UpdateStatusDialog(System.String,System.String,LSOne.Services.Interfaces.Enums.StatusDialogIcon)">
            <summary>
            Updates the modeless dialog with a new message. This dialog does not contain buttons and must be
            closed by using the CloseStatusDialog function. This function will instatiate the dialog by using <see cref="M:LSOne.Services.Interfaces.IDialogService.ShowStatusDialog(System.String,System.String)"/> if it hasn't already been done
            </summary>
            <param name="message">The message that should replace the previous one displayed</param>
            <param name="caption">The caption on the dialog</param>
            <param name="icon">The icon on the caption bar</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IDialogService.UpdateStatusDialog(System.String,System.String,LSOne.Services.Interfaces.Enums.StatusDialogIcon,System.Boolean)">
            <summary>
            Updates the modeless dialog with a new message. This dialog does not contain buttons and must be
            closed by using the CloseStatusDialog function. This function will instatiate the dialog by using <see cref="M:LSOne.Services.Interfaces.IDialogService.ShowStatusDialog(System.String,System.String)"/> if it hasn't already been done
            </summary>
            <param name="message">The message that should replace the previous one displayed</param>
            <param name="caption">The caption on the dialog</param>
            <param name="icon">The icon on the caption bar</param>
            <param name="showModal">If true, any status dialog that is created is created as modal</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IDialogService.CloseStatusDialog">
            <summary>
            Closes the status dialog if it has not already been closed
            </summary>        
        </member>
        <member name="M:LSOne.Services.Interfaces.IDialogService.CreateStatusDialogButton(System.String)">
            <summary>
            Create a touch friendly button to display on a status dialog
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IDialogService.ShowErrorMessage(System.String,System.String)">
            <summary>
            Shows an error dialog with the given message and details
            </summary>
            <param name="message">The message to display</param>
            <param name="details">The details text to display</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IDialogService.ShowExceptionMessage(System.Exception)">
            <summary>
            Shows an error dialog with the given exception details
            </summary>
            <param name="ex">Exception</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IDialogService.ShowCloseDrawerMessage">
            <summary>
            Shows a modal message dialog which does not close until the drawer is closed. This dialog will automatically close
            if called when the drawer is not open. A default message text is used
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.IDialogService.ShowCloseDrawerMessage(System.String)">
            <summary>
            Shows a modal message dialog which does not close until the drawer is closed. This dialog will automatically close
            if called when the drawer is not open.
            </summary>
            <param name="message">The message body</param>
        </member>
        <member name="P:LSOne.Services.Interfaces.IDialogService.HasQueuedMessages">
            <summary>
            If the dialog service has any queued messages for display, then this will return true
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.IDialogService.EnqueueMessage(LSOne.Services.Interfaces.SupportClasses.QueuedMessage)">
            <summary>
            Queue a message for later display, e.g. when the POS is ready
            </summary>
            <param name="message">Message to queue</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IDialogService.DequeueMessage">
            <summary>
            Dequeue a queued message. Will return null if there are no queueed messages
            </summary>
            <returns>A previously queued message, or null if no queued message exists</returns>
        </member>
        <member name="P:LSOne.Services.Interfaces.IDialogService.Warning">
            <summary>
            Gets a standard warning string - in the default locale this is simply 'Warning'
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.IDialogService.Error">
            <summary>
            Gets a standard error string - in the default locale this is simply 'Error'
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.IDialogService.GetEftSetupForm(LSOne.DataLayer.BusinessObjects.StoreManagement.Terminal)">
            <summary>
            Gets a standard form to collect EFT info
            </summary>
            <param name="terminal">The terminal to use as reference</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IDialogService.ShowSpinnerDialog(System.Action,System.String,System.String,System.Exception@)">
            <summary>
            Shows a spinner dialog while the given action is running. The dialog closes once the action has completed.
            </summary>
            <param name="action">The action to perform while the spinner dialog is displayed</param>
            <param name="caption">The dialog caption to display</param>
            <param name="message">The message to display</param>
            <param name="taskEvents">Returns an exception if the action in the spinner dialog fails</param> 
        </member>
        <member name="M:LSOne.Services.Interfaces.IDialogService.EmailAddressInput(System.String@)">
            <summary>
            Displays a dialog where an email address can be entered.
            </summary>
            <param name="emailAddress">If it is set then this email address will be displayed when the dialog is open. Returns the email address entered in the dialog</param>
            <returns>If the user clicked OK or Cancel</returns>
        </member>
        <member name="T:LSOne.Services.Interfaces.ILicense">
            <summary>
            Implemented by the service License.cs
            Used to enable the possibility to bypass the standard way of providing the license for a given 
            ID that identifies the current hardware.
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.ILicenseService.Validate(System.String,System.Boolean,LSOne.Services.Interfaces.SupportClasses.SQLServerLoginEntry)">
            <summary>
            Validate a product license
            </summary>
            <param name="encodedFile">The encoded license</param>
            <param name="isDeactivating"></param>
            <param name="loginEntry">The database connection</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ILicenseService.ValidatePluginLicense(System.String,LSRetail.Licensing.Common.PluginHostVersion)">
            <summary>
            Validates a license for the given plugin and version information
            </summary>
            <param name="pluginID">The ID of the plugin</param>
            <param name="pluginHostVersionInfo">Contains info from the plugin about which versions of the Site Manager the plugin is compatible with</param>
            <returns>A tuple that contains a boolean flag indicating whether the plugin was valid for a license or not, message containing a description of the results</returns>
        </member>
        <member name="T:LSOne.Services.Interfaces.ILoyaltyService">
            <summary>
            The default implementation has not been finished yet. 
            Still, the framework is implemented and ready to handle loyalty cards.
            The LoyaltyItem (used as private member in an implementation class, i.e. Loyalty.cs) 
            is instantiated at the initialization of the RetailTransaction.
            The properties for the LoyaltyItem are accessible.
            
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.ILoyaltyService.AddLoyaltyCardToTransaction(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Card.CardInfo,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction)">
            <summary>
            If a previous loyalty item exists on the transaction, the system should prompt the user whether to
            overwrite the existing loyalty item or cancel the operation.
            Otherwise, a new LoyaltyItem is instantiated, the properties are set and the LoyaltyItem is assigned
            to the current RetailTransaction.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="cardInfo">Loyalty card information to be added to the transaction</param>
            <param name="retailTransaction">The retail transaction.</param>
            <returns><c>true</c> if the card is not added to the transaction, <c>false</c> otherwise</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ILoyaltyService.GetLoyaltyCardInfo(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Card.CardInfo,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="cardInfo">Loyalty card information to be added to the transaction</param>
            <param name="retailTransaction">The retail transaction.</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ILoyaltyService.AddLoyaltyPoints(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction)">
            <summary>        
            If there is a loyalty record in the transaction, the ILoyalty.AddLoyaltyPoints() operation
            is called to add the calculated loyalty points to the transaction.
            The calculation method is not yet implemented.
            Afterwards, the transaction has to be updated with the latest status.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="retailTransaction">The retail transaction.</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ILoyaltyService.AddLoyaltyPayment(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Card.CardInfo,System.Decimal,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction,LSOne.Utilities.DataTypes.RecordIdentifier)">
            <summary>        
            The adding of a loyalty tender line to the transaction has not yet been implemented; except for a stub in Loyalty.cs.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="cardInfo">The card info.</param>
            <param name="amount">The amount.</param>
            <param name="retailTransaction">The retail transaction.</param>
            <param name="tenderTypeID">The tender type</param>
            <returns>TenderLineItem.</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ILoyaltyService.VoidLoyaltyPayment(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Card.CardInfo,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction,LSOne.Services.Interfaces.SupportInterfaces.ILoyaltyTenderLineItem)">
            <summary>
            Voids the selected loyalty points tender line
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="cardInfo">The card info.</param>
            <param name="retailTransaction">The retail transaction.</param>
            <param name="tenderLine">The tenderline being voided</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ILoyaltyService.UpdateIssuedLoyaltyPoints(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction,LSOne.Services.Interfaces.SupportInterfaces.ILoyaltyItem)">
            <summary>
            Called when issued points are being confirmed
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="retailTransaction">The retail transaction.</param>
            <param name="loyaltyItem">The loyalty item.</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ILoyaltyService.UpdateIssuedLoyaltyPoints(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction,LSOne.Services.Interfaces.SupportInterfaces.ILoyaltyItem,System.Decimal,LSOne.Utilities.DataTypes.RecordIdentifier,System.Decimal)">
            <summary>
            Called when issued points are being confirmed
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="retailTransaction">The retail transaction.</param>
            <param name="loyaltyItem">The loyalty item.</param>
            <param name="lineID">The line id of the tender line</param>
            <param name="cardNumber">The loyalty card number being updated</param>
            <param name="calculatedPoints">The points that are being issued</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ILoyaltyService.UpdateUsedLoyaltyPoints(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction,LSOne.Services.Interfaces.SupportInterfaces.ILoyaltyTenderLineItem)">
            <summary>
            Called when used points are being confirmed
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="retailTransaction">The retail transaction.</param>
            <param name="loyaltyTenderItem">The loyalty tender item.</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ILoyaltyService.UpdateUsedLoyaltyPoints(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction,System.Int32,System.Decimal,System.Boolean)">
            <summary>
            Called when used points are being confirmed or returned
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="retailTransaction">The retail transaction.</param>
            <param name="lineID">The line id of the tender line</param>
            <param name="points">The points that are being used/returned</param>
            <param name="voided">Is the tender line voided</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ILoyaltyService.AddCustomerToLoyaltyCard(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.DataLayer.BusinessObjects.Customers.Customer)">
            <summary>
            Attaches a specific customer to a loyalty card
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="posTransaction">The current transaction</param>
            <param name="customer">Customer for which to add a loyalty card. Null if you want to search for a customer</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ILoyaltyService.AddLoyaltyPointsDiscount(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction,LSOne.Utilities.DataTypes.RecordIdentifier)">
            <summary>
            Adds a loyalty point discount line to the sale
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="retailTransaction">The current transaction in the POS</param>
            <param name="tenderTypeID">The tender type selected on the operation</param>
            <returns>If true then the discount line was added</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ILoyaltyService.LoyaltyDiscountRecalculationNeeded(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction)">
            <summary>
            Returns true if the loyalty discount needs to be recalculated due to the total amount having changed
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="retailTransaction">The current transaction in the POS</param>
            <returns>If true then the loyalty discount needs to be recaluclated</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ILoyaltyService.LoyaltyCardExistsForLoyaltyScheme(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Utilities.DataTypes.RecordIdentifier)">
            <summary>
            Checks if the schem is in use by any card
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="loyaltySchemeID">The scheme</param>
            <returns>if it exists</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ILoyaltyService.SiteServiceIsNeeded(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Returns true if the Site service is needed to conclude a transaction that includes loyalty information
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="transaction">The current transaction</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPharmacyService.AddPrescription(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.String,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction,LSOne.DataLayer.BusinessObjects.OperationInfo)">
            <summary>
            Add a prescription to a retail transactions.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="prescriptionId">The prescription id to add to the transaction. Can f.ex. come from a pharmacy barcode</param>
            <param name="retailTransaction">The retail transaction to add the prescription items to.</param>
            <param name="operationInfo"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPharmacyService.CancelPrescription(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.String,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction)">
            <summary>
            Cancel the prescription in the transaction.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="prescriptionId">The prescription id to cancel.</param>
            <param name="retailTransaction">The retail transaction.</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPharmacyService.CancelAllPrescriptions(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction)">
            <summary>
            Cancel all the pharmacy prescriptions in the retail transaction.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="retailTransaction">The retail transaction</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPharmacyService.PayPrescription(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction)">
            <summary>
            Mark the prescription as paid.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="retailTransaction">The retail transaction.</param>
            <returns>Returns true if the confirmation was successful.</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPharmacyService.IsPrescriptionFound(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.String,LSOne.DataLayer.BusinessObjects.OperationInfo)">
            <summary>
            Is the prescriptiond id found in the database.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="prescriptionId">The prescription id.</param>
            <param name="operationInfo"></param>
            <returns>Returns true if a prescription id is found, else false.</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPharmacyService.SelectPrescription(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.Enums.PrescriptionStatus,LSOne.DataLayer.BusinessObjects.OperationInfo)">
            <summary>
            Select a prescription from a list of all valid prescriptions.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="prescriptionStatus">The status of prescriptions to select from.</param>
            <param name="operationInfo"></param>
            <returns>The selected prescription id.</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPharmacyService.SelectPrescription(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.Enums.PrescriptionStatus,System.String,LSOne.DataLayer.BusinessObjects.OperationInfo)">
            <summary>
            Select a prescription containing a certain string from a list of all valid prescriptions.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="prescriptionStatus"></param>
            <param name="rowFilter"></param>
            <param name="operationInfo"></param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPharmacyService.SiteServiceIsNeeded(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Returns true if the Site service is needed to conclude a transaction that includes phramacy information
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="transaction">The current transaction</param>
            <returns></returns>
        </member>
        <member name="T:LSOne.Services.Interfaces.ITimeKeeperService">
            <summary>
            Method to process the original barcode to populate the different barcode properties.
            </summary>
        </member>
        <member name="T:LSOne.Services.Interfaces.SupportClasses.Calculation.ChangeBackAmountsInfo">
            <summary>
            Contains change back amounts. Used by <see cref="M:LSOne.Services.Interfaces.ICalculationService.CalculateChangeBackAmounts(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.Services.Interfaces.SupportInterfaces.ITenderLineItem)"/>
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportClasses.Calculation.ChangeBackAmountsInfo.CalculatedAmount">
            <summary>
            The calculated unrounded balance amount
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportClasses.Calculation.ChangeBackAmountsInfo.CalculatedRoundedAmount">
            <summary>
            The rounded calculated balance amount
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportClasses.Calculation.ChangeBackAmountsInfo.CalculatedRoundedAmountForPayment">
            <summary>
            The rounded payment amound
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportClasses.Calculation.ChangeBackAmountsInfo.TenderedAmount">
            <summary>
            The total amount already paid on a transaction
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportClasses.Calculation.ChangeBackAmountsInfo.CalculatedChangeBack">
            <summary>
            The rounded changeback amount
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportClasses.Calculation.ChangeBackAmountsInfo.CalculatedRoundingDifference">
            <summary>
            The rounding difference for the changeback
            </summary>
        </member>
        <member name="T:LSOne.Services.Interfaces.SupportClasses.IPOSPlugin.POSPluginTask">
            <summary>
            Used by <see cref="T:LSOne.Services.Interfaces.IPOSPluginSetupProvider"/> to describe a single task and it's parameter type. This is used when configuring an <see cref="N:LSOne.Services.Interfaces.SupportClasses.IPOSPlugin"/> on a button to allow the user
            select the type of parameter rather than manually entering all the information.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportClasses.IPOSPlugin.POSPluginTask.Description">
            <summary>
            The description of the action
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportClasses.IPOSPlugin.POSPluginTask.TaskID">
            <summary>
            The ID of the action. This is passed to <see cref="M:LSOne.Services.Interfaces.IPOSPlugin.RunTask(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISession,LSOne.Services.Interfaces.SupportInterfaces.ISettings,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.DataLayer.BusinessObjects.OperationInfo,System.String,System.Collections.Generic.List{System.String})"/>
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportClasses.IPOSPlugin.POSPluginTask.LookupType">
            <summary>
            Gets or sets the <see cref="T:LSOne.DataLayer.BusinessObjects.TouchButtons.LookupTypeEnum"/> that should be used when configuring this task. This will set what kind of parameter the user can configure in button configuration dialog for the POS.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportClasses.IPOSPlugin.POSPluginTask.PosOperation">
            <summary>
            Gets or sets the <see cref="T:LSOne.DataLayer.BusinessObjects.Enums.POSOperations"/> that should be used when configuring this task. This will set which parameters will be shown in the button cofiguration dialog according to the <see cref="P:LSOne.Services.Interfaces.SupportClasses.IPOSPlugin.POSPluginTask.LookupType"/>
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportClasses.LogonInfo.storeId">
            <summary>
            The ID of the store that is calling the Site Service
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportClasses.LogonInfo.terminalId">
            <summary>
            The ID of the terminal that is calling the Site Service
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportClasses.LogonInfo.StaffID">
            <summary>
            The ID of the staff that is logged onto the POS that is calling the Site Service
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportClasses.LogonInfo.UserID">
            <summary>
            Site Manager user identification
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportClasses.Price.TradeAgreementPriceInfo.PriceType">
            <summary>
            Type of the trade agreement. BasePrice = 0, SalesPrice = 1, Promotion = 2
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportClasses.Price.TradeAgreementPriceInfo.Price">
            <summary>
            Price of the trade agreement
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportClasses.Price.TradeAgreementPriceInfo.PriceID">
            <summary>
            ID generated from number sequence to be sent to ERP systems
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportClasses.Price.TradeAgreementPriceInfo.DiscountPercentage">
            <summary>
            The promotion discount percentage
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportClasses.Forecourt.Device.Id">
            <summary>
            The Id of the device
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportClasses.Forecourt.FuellingData.Volume">
            <summary>
            The volume the fuelling point has reached while fuelling.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportClasses.Forecourt.FuellingData.Amount">
            <summary>
            The amount the fuelling point has reached while fuelling.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportClasses.Forecourt.FpTotals.GrandVolTotal">
            <summary>
            The grand volume total.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportClasses.Forecourt.FpTotals.GrandAmountTotal">
            <summary>
            The grand money total.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportClasses.Forecourt.FpTotals.TypeOfTotal">
            <summary>
            Type of totals (fuelling point totals/pump totals)
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportClasses.Forecourt.FpError.ErrorCode">
            <summary>
            The error code from the fuelling point.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportClasses.Forecourt.FpError.ProtocolId">
            <summary>
            The protocol id of the pump that experienced the error.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportClasses.Forecourt.FpError.ErrorText">
            <summary>
            A text descriping the fuel point error.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportClasses.Forecourt.FpError.ErrorSeqId">
            <summary>
            The sequence id of the alarm.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportClasses.Forecourt.FuellingPoint.Fuellingdata">
            <summary>
            The fuelling data the fuelling point has reached while fuelling.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportClasses.Forecourt.Grade.Id">
            <summary>
            The id of the grade
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportClasses.Forecourt.Grade.Name">
            <summary>
            The name of the grade
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportClasses.Forecourt.GradePrice.Id">
            <summary>
            The id of this grade   
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportClasses.Forecourt.GradePrice.Price">
            <summary>
            The unit price for the grade. 
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportClasses.PermissionInfo.#ctor(System.String)">
            <summary>
            Create a permission info for query by guid only
            </summary>
            <param name="GUID">Permission guid</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportClasses.PermissionInfo.#ctor(System.String,LSOne.DataLayer.BusinessObjects.Enums.POSOperations,LSOne.DataLayer.BusinessObjects.Enums.OperationAuditEnum,System.Int32,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Create a permission info for query by guid and an operation
            </summary>
            <param name="GUID">Permission guid</param>
            <param name="operationID">Operation name</param>
            <param name="auditSetting">Audit settings for the operation</param>
            <param name="lineID">Current sale line item id</param>
            <param name="transaction">The current transaction</param>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportClasses.ImportExport.WorksheetCell.CellReference">
            <summary>
            E.g. A1, B2, A1:C4
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportClasses.IDialog.PopUpFormData.ClearSelection(LSOne.Services.Interfaces.SupportClasses.IDialog.Group)">
            <summary>
            Clear the selection information
            </summary>
            <param name="Group">The group to clear the seletion for</param>
        </member>
        <member name="T:LSOne.Services.Interfaces.SupportClasses.PartnerObjectBase">
            <summary>
            An abstract class that can be customzied to be any class. Used by partners for customizations. See further information in the PartnerObjectDemo project on the LS Retail Partner Portal
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportClasses.PartnerObjectBase.ToXML">
            <summary>
            The partner object needs to be included in the XML-ing of transactions. If the Partner Object includes other classes and/or objects
            they need to have ToXML and ToClass functions as well. See more information in the PartnerObjectDemo project on the LS Retail Partner Portal        
            </summary>
            <returns>The the object in an XML format</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportClasses.PartnerObjectBase.ToClass(System.Xml.Linq.XElement)">
            <summary>
            The partner object needs to be included in the XML-ing of transactions. If the Partner Object includes other classes and/or objects
            they need to have ToXML and ToClass functions as well. See more information in the PartnerObjectDemo project on the LS Retail Partner Portal        
            </summary>
            <param name="xmlPartnerObject">The XML that the object has to recreate itself from</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportClasses.PartnerObjectBase.Save(LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction)">
            <summary>
            After the transaction has been saved the PartnerObject.Save function is called to allow the PartnerObject to be saved into
            the database without having to implement it separately in the PostEndTransactionTrigger.
            </summary>
            <param name="retailTransaction">The transaction that was just saved to the database</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportClasses.PartnerObjectBase.Rebuild(LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction)">
            <summary>
            If the partner object should be rebuilt with the transaction f.ex. to be viewed in the Journal or as a copy of the receipt 
            in the Site Manager then the Rebuild function needs to be implemented. 
            The PartnerObject.Rebuild function is called after theentire transaction has been rebuild
            </summary>
            <param name="retailTransaction">The transaction that was rebuilt from data</param>
        </member>
        <member name="T:LSOne.Services.Interfaces.SupportInterfaces.EFT.IEFTExtraInfo">
            <summary>
            Defines methods to add additional information to EFTInfo that need to be stored during a transactions lifetime
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.EFT.IEFTExtraInfo.ToXml(LSOne.Utilities.ErrorHandling.IErrorLog)">
            <summary>
            Serializes the contents of this instance to XML and returns it as a <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="errorLogger">The logger instance</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.EFT.IEFTExtraInfo.ToClass(System.Xml.Linq.XElement,LSOne.Utilities.ErrorHandling.IErrorLog)">
            <summary>
            Deserializes <paramref name="xmlExtraInfo"/> and populates this instance with the information
            </summary>
            <param name="xmlExtraInfo">The <see cref="T:System.Xml.Linq.XElement"/> that contains the serialized information</param>
            <param name="errorLogger">The logger instance</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.EFT.IEFTExtraInfo.Insert(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction)">
            <summary>
            Saves any relevant information to the database. This is called when the transaction is saved into RBOTRANSACTIONTABLE
            </summary>
            <param name="entry">The connection to the database</param>
            <param name="retailTransaction">The transaction that was just saved to the database</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.EFT.IEFTExtraInfo.Rebuild(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction)">
            <summary>
            Called when the transaction has been rebuilt from data from the database. F.ex when returning a transaction or when it's being
            viewed from the journal. This will rebuild this instance from data from the posted transaction and any other data required from the transaction tables.
            </summary>
            <param name="entry">The connection to the database</param>
            <param name="retailTransaction">The transaction that was rebuilt from the database</param>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.EFT.IEFTInfo.EFTExtraInfo">
            <summary>
            Gets or sets the instance of <see cref="T:LSOne.Services.Interfaces.SupportInterfaces.EFT.IEFTExtraInfo"/>
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.EFT.IEFTInfo.EFTExtraInfoXElement">
            <summary>
            The element containing the serialized <see cref="T:LSOne.Services.Interfaces.SupportInterfaces.EFT.IEFTExtraInfo"/>
            </summary>
        </member>
        <member name="T:LSOne.Services.Interfaces.SupportInterfaces.EFT.IEFTTransactionExtraInfo">
            <summary>
            Defines an object that is stored on a <see cref="T:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction"/> and adds transaction-level information for an EFT integration
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.EFT.IEFTTransactionExtraInfo.ToXml(LSOne.Utilities.ErrorHandling.IErrorLog)">
            <summary>
            Serializes the contents of this instance to XML and returns it as a <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="errorLogger">The logger instance</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.EFT.IEFTTransactionExtraInfo.ToClass(System.Xml.Linq.XElement,LSOne.Utilities.ErrorHandling.IErrorLog)">
            <summary>
            Deserializes <paramref name="xmlExtraInfo"/> and populates this instance with the information
            </summary>
            <param name="xmlExtraInfo">The <see cref="T:System.Xml.Linq.XElement"/> that contains the serialized information</param>
            <param name="errorLogger">The logger instance</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.EFT.IEFTTransactionExtraInfo.Insert(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction)">
            <summary>
            Saves any relevant information to the database. This is called when the transaction is saved into RBOTRANSACTIONTABLE
            </summary>
            <param name="entry">The connection to the database</param>
            <param name="retailTransaction">The transaction that was just saved to the database</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.EFT.IEFTTransactionExtraInfo.Rebuild(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction)">
            <summary>
            Called when the transaction has been rebuilt from data from the database. F.ex when returning a transaction or when it's being
            viewed from the journal. This will rebuild this instance from data from the posted transaction and any other data required from the transaction tables.
            </summary>
            <param name="entry">The connection to the database</param>
            <param name="retailTransaction">The transaction that was rebuilt from the database</param>
        </member>
        <member name="T:LSOne.Services.Interfaces.SupportInterfaces.ICloneTransactions">
            <summary>
            A support class that handles cloning a <see cref="T:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction"/>
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.ICloneTransactions.CloneTransaction(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Clones the given transaction and returns the populated deep clone
            </summary>
            <param name="dataModel">The connection to the database</param>
            <param name="transactionToClone">The transaction to clone</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.ICloneTransactions.ClonePartnerObject(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Clones the PartnerObject if it is present on the transaction
            </summary>
            <param name="dataModel">The connection to the database</param>
            <param name="posTransaction">The transaction to populate</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.ICloneTransactions.CloneEFTExtraInfo(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Clones any <see cref="T:LSOne.Services.Interfaces.SupportInterfaces.EFT.IEFTExtraInfo"/> that might exist on <see cref="T:LSOne.Services.Interfaces.SupportInterfaces.EFT.IEFTInfo"/>
            </summary>
            <param name="dataModel">The connection to the database</param>
            <param name="posTransaction">The transaction to populate</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.ICloneTransactions.CloneEFTTransactionExtraInfo(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Clones <see cref="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.EFTTransactionExtraInfo"/> if it is present on the tranasction.
            </summary>
            <param name="dataModel">The connection to the database</param>
            <param name="posTransaction">The transaction that contains the instance of <see cref="T:LSOne.Services.Interfaces.SupportInterfaces.EFT.IEFTTransactionExtraInfo"/></param>
            <remarks>This method will not do anything if <paramref name="posTransaction"/> is anything other than <see cref="T:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction"/>. The parameter is defined as <see cref="T:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction"/> because when this is called the POS
            only has an <see cref="T:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction"/> and it is up to the method to determine the exact type</remarks>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ILogTransaction.LogLines">
            <summary>
            Contains all log lines to be saved
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.ILogTransaction.AddLine(System.String)">
            <summary>
            Adds a log text to the transaction
            </summary>
            <param name="logText">The text to log</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IPosEngine.GetSessionSettings(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier)">
            <summary>
            Gets the settings associated with the given staff and terminal.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="staffID">The ID of the staff to get the settings for</param>
            <param name="terminalID">The ID of the terminal to get the settings for</param>
            <param name="storeID">The ID of the store to get the settings for</param>
            <returns></returns>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IPosEngine.DefaultSettings">
            <summary>
            Gets the <see cref="T:LSOne.Services.Interfaces.SupportInterfaces.ISettings"/> instance associated with the base POSEngine user. This instance can be used when no user context is available. This is mostly applicable 
            when using the engine on a server where a caller does not supply a valid LS One user id.
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IPosEngine.SetDefaultSettings(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier)">
            <summary>
            Sets the <see cref="P:LSOne.Services.Interfaces.SupportInterfaces.IPosEngine.DefaultSettings"/> instance based on the given parameters. The <see cref="P:LSOne.Services.Interfaces.SupportInterfaces.IPosEngine.DefaultSettings"/> instance will then be loaded with the profile information
            from the given user and store.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="staffID">The ID of the staff to set the settings for</param>
            <param name="storeID">The ID of the store to set the settings for</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IPosEngine.GetConnectionManager(LSOne.Utilities.DataTypes.RecordIdentifier,System.String,System.Security.SecureString,System.String,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier)">
            <summary>
            Gets a connection from the connection pool for the given credentials
            </summary>
            <param name="userID">The GUID ID of the user that will be logged on to the connection</param>
            <param name="userLogin">The logon (i.e "admin" or "101") that will be used to log on to the connection</param>
            <param name="password">The LS One user password for the user</param>
            <param name="database">The name of the database to connect to</param>
            <param name="terminalID">The ID of the terminal the user is operating on</param>
            <param name="storeID">The ID of the store</param>        
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IPosEngine.GetConnectionManager(System.String,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier)">
            <summary>
            Gets a connection from the connection pool using credentials provided internally by the engine. 
            </summary>
            <param name="database">The name of the database to connecto to</param>
            <param name="terminalID">The ID of the terminal the user is operating on</param>
            <param name="storeID">The ID of the store</param>    
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IPosEngine.SetConnectionPoolUser(System.Guid,System.String,System.Security.SecureString)">
            <summary>
            Sets the LS One user that will be used when creating connections via the <see cref="M:LSOne.Services.Interfaces.SupportInterfaces.IPosEngine.GetConnectionManager(System.String,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier)"/> function
            </summary>
            <param name="userID">The ID of the user</param>
            <param name="userLogin">The login name of the user</param>
            <param name="password">The password for the user</param>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IPosEngine.ServiceBasePath">
            <summary>
            Gest or sets the location of the LS One service assemblies. This path will be assigned onto every instance if <see cref="T:LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager"/> 
            generated by <see cref="M:LSOne.Services.Interfaces.SupportInterfaces.IPosEngine.GetConnectionManager(System.String,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier)"/> or <see cref="M:LSOne.Services.Interfaces.SupportInterfaces.IPosEngine.GetConnectionManager(LSOne.Utilities.DataTypes.RecordIdentifier,System.String,System.Security.SecureString,System.String,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier)"/>.
            </summary>
            <remarks>
            By default the value of this property is "(main executable's working directory)\Services"
            </remarks>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IPosEngine.SuppressUI">
            <summary>
            Gets or sets wether the engine should suppress all POS UI. This is for example used when the engine is running on a server.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.Forecourt.IFcConfig.FpPriceDecPointPosition">
            <summary>
            Specifies posistion of the decimal point of the unit price. 
            A value of zero indicates the rightmost position, equalling no decimals. Valid range 0-5.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.Forecourt.IFcConfig.FpMoneyDecPointPosition">
            <summary>
            Specifies posistion of the decimal point of the amount value. 
            A value of zero indicates the rightmost position, equalling no decimals. Valid range 0-5.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.Forecourt.IFcConfig.FpVolumeDecPointPosition">
            <summary>
            Specifies posistion of the decimal point of the volume value. 
            A value of zero indicates the rightmost position, equalling no decimals. Valid range 0-5.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.Forecourt.IFcConfig.FpMoneyTotalDecPointPosition">
            <summary>
            Specifies posistion of the decimal point in money totals. 
            A value of zero indicates the rightmost position, equalling no decimals. Valid range 0-5
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.Forecourt.IFcConfig.FpVolumeTotalDecPointPosition">
            <summary>
            Specifies posistion of the decimal point in volume totals. 
            A value of zero indicates the rightmost position, equalling no decimals. Valid range 0-5
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.Forecourt.IFcConfig.TgDecPointPosition">
            <summary>
            Specifies posistion of the decimal point of the tank gauge data. 
            A value of zero indicates the rightmost position, equalling no decimals. Valid range 0-5.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.Forecourt.IFcConfig.TgTemperatureDecPointPosition">
            <summary>
            Specifies posistion of the decimal point in tank gauge temperatures. 
            A value of zero indicates the rightmost position, equalling no decimals. Valid range 0-5
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.Forecourt.IFcConfig.Connected">
            <summary>
            Stores the connection status of POS to the forecourt controller.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.Forecourt.IFcConfig.FcSupportedOperations">
            <summary>
            Operations supported by the forecourt controller.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.Forecourt.IFcConfig.SynchronizeTimeOnControllerWithPOS">
            <summary>
            Should time be on forecourt controller be synchronized with the POS system?
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.BarcodeId">
            <summary>
            The barcode as stored in the ERP system.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.BasicPrice">
            <summary>
            Price from the item card
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.PriceID">
            <summary>
            ID generated from number sequence to be sent to ERP systems
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.PriceType">
            <summary>
            Type of Price. BasePrice = 0, SalesPrice = 1, Promotion = 2
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.CanBeSold">
            <summary>
            True if the item is can be sold on the POS system.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.Blocked">
            <summary>
            True if the item is blocked from being sold on the POS system.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.CanBeModified">
            <summary>
            A variable designed for our partners to use when dealing with fiscal printers.
            Dictates whether the line has already been sent to the fiscal printer, etc, and cannot therefore be changed subsequently.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.Comment">
            <summary>
            An insertable comment/remark by the clerk
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.CostPrice">
            <summary>
            The cost price of the item.
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.CreateDiscountLines(System.Xml.Linq.XElement,LSOne.Utilities.ErrorHandling.IErrorLog)">
            <summary>
            Deserialize the discount lines
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.CreateInfocodeLines(System.Xml.Linq.XElement,LSOne.Utilities.ErrorHandling.IErrorLog)">
            <summary>
            Deserialize the info code lines
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.CreateTaxLines(System.Xml.Linq.XElement,LSOne.Utilities.ErrorHandling.IErrorLog)">
            <summary>
            Deserialize the tax lines
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.CustomerDiscount">
            <summary>
            Total customer discount given in this transaction (excluding tax)
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.CustomerDiscountWithTax">
            <summary>
            Total customer discount given in this transaction (including tax)
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.CustomerPrice">
            <summary>
            Price that is set for the customer only - Trade Agreements
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.DateToActivateItem">
            <summary>
            The date when the items becomes active
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.DateToBeBlocked">
            <summary>
            The date when the blocking becomes active
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.DimensionGroupId">
            <summary>
            The item's dimension group id
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.DiscountsWereRemoved">
            <summary>
            Whether the discount was removed form the item.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.DiscountUnsuccessfullyApplied">
            <summary>
            True if the item was supposed to be discounted but the NoDiscountAllowed property did not allow it.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.Excluded">
            <summary>
            Whether the item line is to be excluded
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.Found">
            <summary>
            Is set as true if a item is found.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.GrossAmount">
            <summary>
            The total line amount (price * quantity) excluding tax
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.GrossAmountWithTax">
            <summary>
            The total line amount (price * quantity) including tax
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.IDiscountLines">
            <summary>
            A collection of all discounts belonging to the salesitem.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.IncludedInTotalDiscount">
            <summary>
            It is true if the item is included in the calculation of a combined total discount. Should be set when the item info is found.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.ItemDepartmentId">
            <summary>
            The retail departement of the item.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.ItemGroupId">
            <summary>
            The retail group of the item.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.ItemId">
            <summary>
            The item id as stored in the ERP system.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.HeaderItemID">
            <summary>
            If this item is a variant item, the header ID is the item that this item is a variation of
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.ItemType">
            <summary>
            The type of item sold, i.e item, BOM, service.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.LineDiscount">
            <summary>
            Total line discount given in this transaction (excluding the tax). 
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.LineDiscountGroup">
            <summary>
            The line discount group that the item belongs to. Should be set when the item info is found.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.LineDiscountWithTax">
            <summary>
            Total line discount given in this transaction (including the tax)
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.LinePctDiscount">
            <summary>
            The percentage discount given in this line excluding the total discount.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.LineWasDiscounted">
            <summary>
            Is set to true if a discount was calculated for the item.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.OriginalQuantity">
            <summary>
            The original quantity if the line is part of a return transaction
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.LinkedItemOrgQuantity">
            <summary>
            The original quantity of the item if it is a linked item.
            Has to be saved to that Set Qty and Clear Qty can multiply/divide the qty correctly
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.LoyaltyDiscount">
            <summary>
            The calculated loyalty discount excluding tax
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.LoyaltyDiscountWithTax">
            <summary>
            The calculated loyalty discount including tax
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.LoyaltyPctDiscount">
            <summary>
            The percentage discount given using a loyalty discounts
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.MultiLineDiscountGroup">
            <summary>
            The multiline discount group that the item is a part of. Should be set when the item info is found.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.NetAmount">
            <summary>
            The line amount excluding tax.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.NetAmountPerUnit">
            <summary>
            Used when terminal setting is set to have prices including tax
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.NetAmountWithAllInclusiveTaxPerUnit">
            <summary>
            Used when terminal setting is set to have prices including tax
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.NetAmountWithTax">
            <summary>
            The total rounded amount including tax.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.NoDiscountAllowed">
            <summary>
            It is true if the item should never be discounted. Should be set when the item info is found.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.NoManualDiscountAllowed">
            <summary>
            It is true if the item should never be allowed a manual discount.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.NoPriceCalculation">
            <summary>
            The price cannot be calculated - always use the price as is set
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.OrgUnitOfMeasure">
            <summary>
            The item unit
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.OrgUnitOfMeasureName">
            <summary>
            The item unit name
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.OriginalPrice">
            <summary>
            Stores the original price excluding the tax, if price was manually overrided.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.OriginalPriceWithTax">
            <summary>
            Stores the original price including the tax, if price was manually overrided.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.PeriodicDiscount">
            <summary>
            Total periodic discount given in this transaction (tax excluded)
            </summary> 
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.PeriodicDiscountOfferId">
            <summary>
            The periodic discount offer id that the item is connected to.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.PeriodicDiscountOfferName">
            <summary>
            The periodic discount offer name that the item is connected to.
            </summary>     
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.PeriodicDiscountWithTax">
            <summary>
            Total periodic discount given in this transaction (tax included)
            </summary> 
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.PeriodicDiscType">
            <summary>
            The periodic discount type 0 = None, 1 = Multibuy, 2 = Mix And Match, 3 = Discount offer
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.PeriodicPctDiscount">
            <summary>
            The percentage discount given in this line excluding the total and line discount.
            </summary> 
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.Price">
            <summary>
            Price excluding the tax.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.PriceOverrideAmount">
            <summary>
            Stores the amount entered when the price was overridden. If you are rebuilding a transaction (e.g. from returns) then this property is not populated.
            For returns you need to examine the properties <see cref="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.PriceOverridden"/> and the fields <see cref="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.Price"/>, <see cref="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.PriceWithTax"/>, <see cref="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.OriginalPrice"/> and <see cref="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.OriginalPriceWithTax"/>
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.PriceOverridden">
            <summary>
            It is set to true if price was manually overrided
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.PriceUnit">
            <summary>
            If a price is given for a for more than one unit the price unit tells how many. (tax excluded)
            If the price is given for six units (priceUnit=6) as 100 EUR, then when 12 units are sold the price will be 200 EUR.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.PriceUnitWithTax">
            <summary>
            If a price is given for a for more than one unit the price unit tells how many. (tax included)
            If the price is given for six units (priceUnit=6) as 100 EUR, then when 12 units are sold the price will be 200 EUR.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.PriceWithTax">
            <summary>
            Price including the tax.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.PromotionPrice">
            <summary>
            Promotion price if it exists
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.Quantity">
            <summary>
            The quantity sold/returned
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.QuantityDiscounted">
            <summary>
            Used in calculation of the periodic discount. Keeps track of how many items have been discounted.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.RetailItemGroupId">
            <summary>
            The retail group of the item.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.RFIDTagId">
            <summary>
            The item's RFID tag
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.SerialIdManualInput">
            <summary>
            If true, the serial number was manually entered
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.SalesOrderUnitOfMeasure">
            <summary>
            The item unit
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.SalesOrderUnitOfMeasureName">
            <summary>
            The item unit name
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.SalesOrderUnitOfMeasureText">
            <summary>
            The item unit
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.SalesTaxGroupId">
            <summary>
            Describes a group of sales tax codes
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.SerialId">
            <summary>
            The item's serial no.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.StandardRetailPrice">
            <summary>
            The standard retail price. Used to store a retail price for comparison with the customer price.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.StandardRetailPriceWithTax">
            <summary>
            The standard retail price uncluding the tax. Used to store a retail price for comparison with the customer price.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.TaxAmount">
            <summary>
            The tax amount for the item.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.TaxExempt">
            <summary>
            If true, then this sale item is tax exempt
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.TaxExemptionCode">
            <summary>
            The code entered by the user when the item was tax exempted
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.TaxGroupId">
            <summary>
            The tax group used for calculation of tax.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.TaxIncludedInItemPrice">
            <summary>
            Does the original price include tax?
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.OriginalTaxIncludedInItemPrice">
            <summary>
            Original setting of the <see cref="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.TaxIncludedInItemPrice"/>
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.TaxRatePct">
            <summary>
            The taxrate as a percentage, i.e 14,5%. 
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.TotalDiscount">
            <summary>
            Total discount given in this line minus the linediscount (tax exclued).
            The total discount for the transaction containing this line is proportionally distributed among each line of the transaction.
            TotalDiscount contains the amount associated to the current line.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.TotalDiscountWithTax">
            <summary>
            Total discount given in this transaction minus the linediscount (including the tax).
            The total discount with tax for the transaction containing this line is proportionally distributed among each line of the transaction.
            TotalDiscountWithTax contains the amount associated to the current line.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.TotalPctDiscount">
            <summary>
            The percentage discount given in this line excluding the linediscount.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.TradeAgreementPrice">
            <summary>
            Price from the Trade Agreements that does not come from a customer relation
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.Transaction">
            <summary>
            The transaction that this sale item belongs to
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.UnitOfMeasureChanged">
            <summary>
            Has the unit of measure been changed for the current sale item?
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.MarkupAmount">
            <summary>
            The amount that is used as markup for a specific unit of measure
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.UnitQuantity">
            <summary>
            The unit quantity
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.UnitQuantityFactor">
            <summary>
            To be used in CalculateLine when calculating unitQuantity
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.WasChanged">
            <summary>
            It is set to true if the item was changed by price or discount calculation. 
            It is set to false in the totalcalulation.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.DiscountLines">
            <summary>
            A collection of all discounts belonging to the salesitem.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.Order">
            <summary>
            Item information for the Customer order 
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.Returnable">
            <summary>
            Indicates wether this item can be returned at the POS
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.ID">
            <summary>
            The unique ID of this tender line. This is not the same as <see cref="P:LSOne.DataLayer.BusinessObjects.Transactions.Line.ILineItem.LineId"/> since this is ID is not tied to the position of this 
            line within the transaction. This is not saved to the database and is only used at runtime to uniquely identify the line
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ICardTenderLineItem.CardTypeID">
            <summary>
            The id of the cardtype.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IDepositTenderLineItem.RedeemedDeposit">
            <summary>
            If true then this is a tender line with information about the sum of previously paid deposits for the items that are being sold
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IDepositTenderLineItem.RedeemedAmount">
            <summary>
            How much of the original payment has been redeemed
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IGiftCertificateTenderLineItem.IssuingStoreId">
            <summary>
            The id of the store that issued the gift certificate.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IGiftCertificateTenderLineItem.IssuingTerminalId">
            <summary>
            The id of the terminal that issued the gift certificate.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IGiftCertificateTenderLineItem.SerialNumber">
            <summary>
            The serialnumber of the gift certificate. 
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IGiftCertificateTenderLineItem.IssuedDate">
            <summary>
            The date when the gift certificate was issued.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IGiftCertificateTenderLineItem.AppliedDate">
            <summary>
            The date when the gift certificate was applied.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ILoyaltyItem.UsePointsLimit">
            <summary>
            Usage limit as percentage of transaction total
            </summary>
        </member>
        <member name="T:LSOne.Services.Interfaces.SupportInterfaces.IDepositItem">
            <summary>
            An object that holds information about the deposits that to be paid on the item and if they have been paid or not
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IDepositItem.Deposit">
            <summary>
            The calculated deposit on the item
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IDepositItem.DepositPaid">
            <summary>
            If true then the deposit has already been paid
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IDepositItem.Status">
            <summary>
            The current status of the deposit
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IDepositItem.Empty">
            <summary>
            If true then the deposit instance is empty
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IDepositItem.Clear">
            <summary>
            Resets the values of all the variables in the object
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IOrderItem.DepositToBePaid">
            <summary>
            Returns all deposists with status Normal and Distributed (<see cref="T:LSOne.DataLayer.BusinessObjects.Enums.DepositsStatus"/>) that have not yet been paid
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IOrderItem.DepositToBePaid(LSOne.DataLayer.BusinessObjects.Enums.DepositsStatus)">
            <summary>
            Returns all deposists with a specific status (<see cref="T:LSOne.DataLayer.BusinessObjects.Enums.DepositsStatus"/>) that have not yet been paid
            </summary>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IOrderItem.DepositAlreadyPaid">
            <summary>
            Returns all deposits with status Normal  and Distributed (<see cref="T:LSOne.DataLayer.BusinessObjects.Enums.DepositsStatus"/>) that have already been paid
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IOrderItem.DepositAlreadyPaid(LSOne.DataLayer.BusinessObjects.Enums.DepositsStatus)">
            <summary>
            Returns all deposists with a specific status (<see cref="T:LSOne.DataLayer.BusinessObjects.Enums.DepositsStatus"/>) that have already been paid
            </summary>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IPOSApp.LoadTouchLayout(LSOne.Utilities.DataTypes.RecordIdentifier)">
            <summary>
            Sets the current touch layout to the layout with the given ID
            </summary>
            <param name="layoutID">The ID of the layout to set</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IPOSApp.ResetTouchLayout">
            <summary>
            Sets the current touch layout to the default touch layout shown when the user logs in.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.BeginDateTime">
            <summary>
            The start date and time of the transaction
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.CalcCustomerDiscounts">
            <summary>
            Controls if the customer discounts should always be calculated when an item is added to the transaction or only at payment
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.CalcPeriodicDiscounts">
            <summary>
            Controls if the periodic discounts should always be calculated when an item is added to the transaction or only at payment
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.Comment">
            <summary>
            A comment insertable by the operator
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.CreatedOnTerminalId">
            <summary>
            The orginal terminal the transaction was created on, if the transaction was transfered from another terminal
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.CreateXmlTransaction">
            <summary>
            Serialize the transaction
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.DisplayAmountsIncludingTax">
            <summary>
            Controls if amounts are displayed with or without tax in the POS
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.EndDateTime">
            <summary>
            The finishing date and time of the transaction
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.EntryStatus">
            <summary>
            The status of the transaction, i.e voided, posted, training etc.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.HasBeenSentToStation">
            <summary>
            Used in Hospitality to know if the transaction has already been sent to kitchen or printing station
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.KeyedInPriceContainsTax">
            <summary>
            This is used for price override and when it is required to key in an item price.
            When true, then the value entered contains tax such that tax will not be added on top of this value.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.LastRunOperation">
            <summary>
            The last operation that was run on the transaction
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.LastRunOperationIsValidPayment">
            <summary>
            If the last run operation was a valid payment operation, that is a successful one.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.OpenDrawer">
            <summary>
            Was drawer opened during the transaction
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.Cashier">
            <summary>
            The Operator entering the transaction on the POS
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.ReceiptId">
            <summary>
            This is the internal primary key in the POSTRANSACTION table. Consists of the terminal id and a sequential number.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.ShiftDate">
            <summary>
            The shift date
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.ShiftId">
            <summary>
            The shift id
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.StatementMethod">
            <summary>
            The way a statement is done for the store (staff, terminal, total).
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.StoreAddress">
            <summary>
            The store address
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.StoreCurrencyCode">
            <summary>
            The Store currency code - i.e. GBP, USD, EUR etc.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.StoreExchangeRate">
            <summary>
            The exchange rate between HO currency and Store currency.        
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.StoreId">
            <summary>
            The store id
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.StoreName">
            <summary>
            The store name
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.StoreTaxGroup">
            <summary>
            The store tax group
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.TerminalId">
            <summary>
            The terminal id. A unique id for each terminal inside each store.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.Training">
            <summary>
            If the till is in training mode.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.TransactionId">
            <summary>
            It is assigned quite late in the transaction process and thus not available from the beginning.
            The assignment happens in TransactionData.cs with the call to its method 
            "public string GetNextTransactionId(string transactionIdNumberSequence)"
            that fetches the next number from the table NUMBERSEQUENCETABLE.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.SuspendedId">
            <summary>
            Holds the SUSPENDEDTRANS value
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.SalesSequenceID">
            <summary>
            A running number according to the SALESSEQUENCE number series
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.TransactionIdNumberSequence">
            <summary>
            The id of the number sequence for the transaction ids
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.UnconcludedTransaction">
            <summary>
            If true then this transaction was recalled and re-created when the POS was started
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.ReturnedLocally">
            <summary>
            If true then the transaction has been returned using the local database
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.ReceiptSettings">
            <summary>
            Should the receipt for the transaction be printed, emailed or even both.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.ReceiptEmailAddress">
            <summary>
            If the receipt for the transaction should be emailed the adderss is kept here.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.KeepRowSelectionOnBlankOperation">
            <summary>
            Set to true if the current selected item in the transaction should remain selected after executing a blank operation.
            This value is not saved to the database and must be set after each blank operation.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.OriginalNumberOfTransactionLines">
            <summary>
            Gets or sets the original number of lines (sales, payments, tax, discounts, infocodes, etc.) created with the transaction.
            This should only be set when the transaction is saved on the POS.
            This value can be used to check if the current transaction contains the correct amount of lines as when it was created (ex. replication).
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.CalculateTotalNumberOfTransactionLines">
            <summary>
            Sums up all transaction lines from the current transaction. This value should be set as the <see cref="P:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.OriginalNumberOfTransactionLines"/> before saving the new transaction.
            This should be overriden and implemented based on the type of transaction.
            </summary>
            <returns>Total transaction lines</returns>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.HTMLInformation">
            <summary>
            Transaction information in HTML format that can be displayed in a HTML information panel
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.Hospitality">
            <summary>
            Hospitality information if the transaction was created through the hospitality functionality
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.PendingEFTTransaction">
            <summary>
            Temporary data saved before performing an EFT payment
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.EFTTransactions">
            <summary>
            A list of all generated EFT transactions
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.ID">
            <summary>
            The unique ID of this POS transaction.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IReceiptInfo.FormType">
            <summary>
            The unique identifier of the form type that is being printed
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IReceiptInfo.PrintString">
            <summary>
            The OPOS print string that was printed
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IReceiptInfo.DocumentName">
            <summary>
            The name of the document created with the receipt f.ex. when a PDF file is created
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IReceiptInfo.DocumentLocation">
            <summary>
            The file location of the document created
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IReceiptInfo.FormWidth">
            <summary>
            The width of the form that was used to create this receipt. Necessary for the WinPrinter
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IReceiptInfo.IsEmailReceipt">
            <summary>
            True if this receipt was generated using the email profile and is meant to be sent via email
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.Add(LSOne.Services.Interfaces.IDiscountVoucherItem,System.Int32)">
            <summary>
            Inserts a discount voucher item 
            </summary>
            <param name="discountVoucher">The discount coucher item that is added</param>
            <param name="lineId"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.Add(LSOne.Services.Interfaces.IFuelSalesLineItem)">
            <summary>
            Adds a fuel sale line to the collection of saleitems that belong to this transaction
            </summary>
            <param name="fuelSaleLineItem">The fuel line that is added</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.Add(LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem,LSOne.DataLayer.BusinessObjects.Enums.AggregateItemsModes)">
            <summary>
            Adds a sale line item to the collection of sale line items that belong to this transaction
            If the aggregate items mode is Full or Barcode then the item added doesn't necessarily have to be a
            new item line but rather an updated line.
            </summary>
            <param name="saleLineItem">The sale line that is added</param>
            <param name="aggregateItems">Which aggregation mode is to be used when adding the sales line</param>  
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.Add(LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem,LSOne.DataLayer.BusinessObjects.Enums.AggregateItemsModes,System.Int32@)">
            <summary>
            Adds a sale line item to the collection of sale line items that belong to this transaction
            If the aggregate items mode is Full or Barcode then the item added doesn't necessarily have to be a
            new item line but rather an updated line. So the item line is returned through lineIdBeingAdded
            </summary>
            <param name="saleLineItem">The sale line that is added</param>
            <param name="aggregateItems">Which aggregation mode is to be used when adding the sales line</param>
            <param name="lineIdBeingAdded">The Line id of the item that was added</param>
            <returns>Aggregation performed</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.Add(LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem,System.Int32)">
            <summary>
            Used when splitting a line to two lines. And lines have to get a new line id.
            </summary>
            <param name="saleLineItem">The sale line that is added</param>
            <param name="lineId">The lineId</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.Add(LSOne.Services.Interfaces.SupportInterfaces.ITenderLineItem)">
            <summary>
            Adds a tendeline to the collection of tenderlines that belong to this transaction
            </summary>
            <param name="tenderLineItem">The tender line item to be added to the transaction</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.Add(LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem)">
            <summary>
            Adds a sale line item to the collection of sale line items that belong to this transaction
            </summary>
            <param name="saleLineItem">The sale line item that is added</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.Add(LSOne.DataLayer.BusinessObjects.Customers.Customer)">
            <summary>
            Adds a customer to the current transaction
            </summary>
            <param name="customer">The customer to be added</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.Add(LSOne.DataLayer.BusinessObjects.Customers.Customer,System.Boolean)">
            <summary>
            Adds a customer to the current transaction, specifying whether it is added during a return transaction
            </summary>
            <param name="customer">The customer to be added</param>
            <param name="returnCustomer">Set to true if this is a return transaction</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.Add(LSOne.DataLayer.BusinessObjects.Transactions.Line.InfoCodeLineItem)">
            <summary>
            Adds an infocode to the transaction header
            </summary>
            <param name="infoCodeLineItem">The infocode line to be added to the transaction</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.AddInvoicedCustomer(LSOne.DataLayer.BusinessObjects.Customers.Customer)">
            <summary>
            Adds a customer that will be invoiced for the items.
            </summary>
            <param name="customer">The customer to be added</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.AddTotalDiscAmountLines(System.Boolean)">
            <summary>
            Adds a total discount amount line to the item lines
            </summary>
            <param name="banCompoundDiscounts">If true, the total amount discount is not added to sale lines that already have a discount applied</param>
            <returns>The discount percentage applied</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.AddTotalDiscPctLines">
            <summary>
            Adds total discount percent lines to the item lines.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.AmountToAccount">
            <summary>
            The total amount posted to customer account.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.BalanceNetAmountWithTax">
            <summary>
            The total net amount (grossamount minus discounts) exluding tax. 
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.CalculateTotalDiscount">
            <summary>
            Tells the transaction if a total discount should be calculated
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.ClearAllDiscountLines">
            <summary>
            Clears all discounts of all sale line items
            </summary>     
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.ClearCustomerDiscountLines">
            <summary>
            Clears all customer discounts of all sale line items
            </summary> 
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.ClearLineDiscountLines">
            <summary>
            Clears all line discounts of all sale line items
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.ClearLoyaltyDiscountLines">
            <summary>
            Clears all loyalty discount lines of all sale line items
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.ClearPeriodicDiscountLines">
            <summary>
            Clears all periodic discounts of all sale line items
            </summary> 
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.ClearTotalDiscountLines">
            <summary>
            Clears all total discount lines of all sale line items
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.ClearManuallyTriggeredPeriodicDiscountLines">
            <summary>
            Clears all manually triggered periodic discount lines of all sale line items
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.ClearTotalAmounts">
            <summary>
            Clears all total amounts on the transaction header such as net amount, gross amount, tax amount and etc.
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.ClearCustomer">
            <summary>
            Clears the customer from the transaction
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.CreateAnswerLines(System.Xml.Linq.XElement)">
            <summary>
            Deserializes the suspended transaction answers
            </summary>
            <param name="xItem">The XElement to be deserialized</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.CreateInfocodeLines(System.Xml.Linq.XElement)">
            <summary>
            Deserializes the info code line items
            </summary>
            <param name="xItems">The XElement to be deserialized</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.CreateSaleLineItems(System.Xml.Linq.XElement)">
            <summary>
            Deserializes the sale line items
            </summary>
            <param name="xItems">The XElement to be deserialized</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.CreateTaxLines(System.Xml.Linq.XElement)">
            <summary>
            Deserializes the tax items
            </summary>
            <param name="xItem">The XElement to be deserialized</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.CreateTenderLines(System.Xml.Linq.XElement)">
            <summary>
            Deserializes the tender line items
            </summary>
            <param name="xItems">The XElement to be deserialized</param>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.CreditMemoItem">
            <summary>
            An issued Credit Memo in the transaction
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.Customer">
            <summary>
            Information about the customer on the transaction. This is a read-only property.
            In order to set the customer use the Add function
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.CustomerPaysTax">
            <summary>
            Is set to true if the customer pays tax, else false.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.CustomerPurchRequestId">
            <summary>
            The ID of the purchase order this transaction belongs to
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.GetItem(System.Int32)">
            <summary>
            Returns a sale line item for a certain line id.
            </summary>
            <param name="lineId">The line ID of the item. This corresponds to <see cref="P:LSOne.DataLayer.BusinessObjects.Transactions.Line.ILineItem.LineId"/>.</param>
            <returns>The sale line item.</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.GetItem(System.Guid)">
            <summary>
            Returns a sale line item for the given line Id.        
            </summary>
            <param name="lineId">The unique line ID of the item. This corresponds to <see cref="P:LSOne.Services.Interfaces.SupportInterfaces.IBaseSaleItem.ID"/></param>
            <returns>The sale line item.</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.GetTenderItem(System.Int32)">
            <summary>
            Returns a tender item for a certain tender line id.
            </summary>
            <param name="lineId">The unique line id of the tender line.</param>
            <returns>The sale line item.</returns>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.GrossAmount">
            <summary>
            The total amount excluding tax
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.GrossAmountWithTax">
            <summary>
            The total amount including tax
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.IdleElapsedTime">
            <summary>
            The total time the terminal was idle during the transaction.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.ILineDiscCalculationType">
            <summary>
            Determines how the linediscount is found/calculated.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.IMarkupItem">
            <summary>
            Markup information for the transaction
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.IncomeExpenseAmounts">
            <summary>
            The total amount of income and expense accounts in the transaction
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.InfoCodeNeeded(System.String)">
            <summary>
            Returns true if the Infocode Id "is needed" i.e. cannot be found already on the transaction header. 
            It is used when an Infocode is set to be "once per transaction".
            </summary>
            <param name="infoCodeId">The Infocode Id to check</param>
            <returns>Returns true if the infocode can not be found</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.Insert(LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem,LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem)">
            <summary>
            Inserts a sale line between salelines. Needed when working with item modifing sale items.
            </summary>
            <param name="currentSaleLineItem">The current saleLineItem after which the new item line should be inserted</param>
            <param name="newSaleLineItem">The new saleLineItem.</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.Insert(LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem,System.Int32)">
            <summary>
            Inserts a sale line between salelines. Needed when working with item modifing sale items.
            </summary>
            <param name="saleLineItem"></param>
            <param name="lineId">The lineid, after the item should be inserted.</param>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.InvoiceComment">
            <summary>
            Comment to be printed on the invoice
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.CustomerOrder">
            <summary>
            If the transaction is to be a customer order the <see cref="T:LSOne.DataLayer.BusinessObjects.CustomerOrders.CustomerOrderItem"/> contains all the information needed
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.InvoicedCustomer">
            <summary>
            Information about the customer that will be invoiced for the items.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.ISaleItems">
            <summary>
            Gets a generic <see cref="T:System.Collections.Generic.IEnumerable`1"/> for all <see cref="T:LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem"/> on the transaction
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.IsTableTransaction">
            <summary>
            When coming from Split Bill, a transaction can either be a Table transaction or Guest transaction. If true, this
            transaction is the table transaction, otherwise this is the guest transaction.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.ITaxLines">
            <summary>
            Gets a generic <see cref="T:System.Collections.Generic.IEnumerable`1"/> for all <see cref="T:LSOne.DataLayer.BusinessObjects.Tax.TaxItem"/> on the transaction
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.ItemElapsedTime">
            <summary>
            The total time the terminal was handling items.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.KeyItemGroupCount">
            <summary>
            The number of items that were sold on an item group.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.KeyItemGroupPercent">
            <summary>
            The percentage of items that were sold as an item group.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.LineDiscCalculationType">
            <summary>
            Determines how the linediscount is found/calculated.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.LineDiscount">
            <summary>
            The total line discount given in this transaction minus the total discount (tax excluded).
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.LineDiscountWithTax">
            <summary>
            The total line discount given in this transaction minus the total discount (tax included).
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.LineItemsKeyedCount">
            <summary>
            The number of items that were keyed in.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.LineItemsKeyedPercent">
            <summary>
            The perenctage of items that were keyed in.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.LineItemsMultiScannedCount">
            <summary>
            The number of items that were scanned with a multi scanning device
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.LineItemsMultiScannedPercent">
            <summary>
            The percentage of items that were scanned with a multi scanning device
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.LineItemsSingleScannedCount">
            <summary>
            The number of items that were scanned with a single scanning device
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.LineItemsSingleScannedPercent">
            <summary>
            The percentage of items that were scanned with a single scanning device
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.LockElapsedTime">
            <summary>
            The total time the terminal was locked during the transaction.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.LoyaltyItem">
            <summary>
            Loyalty information for the transaction
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.MarkupItem">
            <summary>
            Markup information for the transaction
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.MenuTypeItem">
            <summary>
            The currently selected menu type of the transaction
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.NetAmount">
            <summary>
            The total net amount (grossamount minus discounts) exluding tax. 
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.NetAmountWithTax">
            <summary>
            The total net amount (grossamount minus discounts) including tax. 
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.IsNetAmountWithTaxRounded">
            <summary>
            Sometimes NetAmountWithTax is rounded (eg: in CalculationService, when certain conditions are met).
            Because sometimes we want to know when NetAmountWithTax is rounded (eg: when we post transactions to SAP), we store this information in this property.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.NoOfItemLines">
            <summary>
            Number of the item lines, not the quantity of the items
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.NoOfItems">
            <summary>
            Number of items in the transaction - the total quantity.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.NoOfPaymentLines">
            <summary>
            Number of payment lines.
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.NumberOfLines">
            <summary>
            Gets the total number of item lines and payment lines
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.Oiltax">
            <summary>
            The total calculated oiltax amount for the fuel items.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.OrgReceiptId">
            <summary>
            The original receipt id if the transaction is being returned
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.OrgStore">
            <summary>
            The original store id if the transaction is being returned
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.OrgTerminal">
            <summary>
            The original terminal id if the transaction is being returned
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.OrgTransactionId">
            <summary>
            The original transaction id if the transaction is being returned
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.OverrideTaxGroup">
            <summary>
            The ID of the tax group that should be used when calculating Tax if UseOverrideTaxGroup has been set to true.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.PartnerObject">
            <summary>
            An object which can hold any information that localization might want to add to the RetailTransaction
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.PartnerXElement">
            <summary>
            The element containing the serialized <see cref="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.PartnerObject"/>
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.Payment">
            <summary>
            The total payment including the vat
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.Period">
            <summary>
            Infomation about periodic discount validation period
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.PeriodicDiscount">
            <summary>
            Infomation for periodic discount.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.ManualPeriodicDiscounts">
            <summary>
            List of manually triggered periodic discounts 
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.Coupons">
            <summary>
            Coupons used in the transaction
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.CouponItems">
            <summary>
            Coupon items used in the transaction (needed when coupons have retail groups on them)
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.PeriodicDiscountAmount">
            <summary>
            The total periodic discount given in this transaction (tax exluded).
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.PeriodicDiscountWithTax">
            <summary>
            The total periodic discount given in this transaction (tax included)
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.PostAsShipment">
            <summary>
            Specifies whether the sale should be posted as an invoice or a shipment. Only used if customer is selected.
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.PriceOverride(LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem,System.Decimal)">
            <summary>
            Used to override the price manually.
            </summary>
            <param name="saleLineItem">The unique line id of the item line.</param>
            <param name="amount">The override price, including the tax.</param>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.ReceiptIdNumberSequence">
            <summary>
            The id of the number sequence for the receipt id
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.RefundReceiptId">
            <summary>
            Id of a receiption for items that will be refunded.
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.Remove(LSOne.Services.Interfaces.SupportInterfaces.ITenderLineItem,System.Boolean)">
            <summary>
            Removes a tender line item
            </summary>
            <param name="tender">The tender line item to be removed</param>
            <param name="updateLineIDs">True if we want to reset the line ids starting from 1</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.Remove(LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem,System.Boolean)">
            <summary>
            Removes a sale line item
            </summary>
            <param name="item">The sale line item to be removed</param>
            <param name="updateLineIDs">True if we want to reset the line ids starting from 1</param>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.RoundingDifference">
            <summary>
            Rounding difference between summed up item lines and what the customer should be charged
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.RoundingSalePmtDiff">
            <summary>
            Rouding difference between payment and sales amount. Sales can be 9,99 but payment can be 10
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.SaleIsReturnSale">
            <summary>
            True if the sale is a credit sale.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.SalesInvoiceAmounts">
            <summary>
            The total amount of sales invoice payments in the transaction
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.SalesOrderAmounts">
            <summary>
            The total amount of sales orders payments in the transaction
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.SalesPerson">
            <summary>
            The sales person if other than the cashier on the transaction
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.SetCostPrice(LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem,System.Decimal)">
            <summary>
            Used to set the cost price of a sale line item
            </summary>
            <param name="saleLineItem">The sale line item to be changed</param>
            <param name="amount">The new cost price amount</param>
            <returns>The sale line item that was changed</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.SetNetAmountWithTax(System.Decimal,System.Boolean)">
            <summary>
            Sets the RetailTransaction.NetAmountWithTax. Should only be used in Calculation service when calculating the remaining payment after a partial payment has been made.
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.SetTotalDiscAmount(System.Decimal)">
            <summary>
            Sets the amount given as a total discount for the transaction
            </summary>
            <param name="totalDiscountAmount">The amount given as a total discount.</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.SetTotalDiscPercent(System.Decimal)">
            <summary>
            Sets the total percentage discount given for the transaction
            </summary>
            <param name="totalDiscountPercentage">The percentage discount</param>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.SplitID">
            <summary>
            An ID that identifies which split this transaction belongs to. This is used in split-bill.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.SplitTransaction">
            <summary>
            True if this transaction was created as a split from another transaction
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.SuspendDestination">
            <summary>
            A description of where the transaction was suspended, i.e. the terminal number or if it was suspended centrally
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.SuspendTransactionAnswers">
            <summary>
            A list of answers the user entered when the transaction was suspended
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.TaxAmount">
            <summary>
            The total tax in transaction
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.TaxExempt">
            <summary>
            Tells the transaction whether it should be tax exempted
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.TaxIncludedInPrice">
            <summary>
            Does the BO system provide the price including a tax. 
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.OrgTaxIncludedInPrice">
            <summary>
            Indicates the original "price includes tax" setting. If <see cref="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.TaxIncludedInPrice"/> is not the same as <see cref="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.OrgTaxIncludedInPrice"/> 
            then that indicates that something changed (i.e. customer added) that has changed the calculation of this transaction.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.TenderElapsedTime">
            <summary>
            The total time the terminal was handling payments.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.TimeWhenTotalPressed">
            <summary>
            The time of the first payment.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.TotalDiscount">
            <summary>
            The total discount given in this transaction excluding the linediscount (tax excluded).
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.TotalDiscountWithTax">
            <summary>
            The total discount given in this transaction excluding the linediscount (tax included).
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.TotalManualDiscountAmount">
            <summary>
            The total amount discount given manually for the total discount.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.TotalManualPctDiscount">
            <summary>
            The percentage discount given manually for the total discount.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.TransactionTaxExemptionCode">
            <summary>
            The tax exemption code entered by the user when running the TaxExemptTransaction operation.
            This field is not saved to the database, it is copied to TaxItem.TaxExemptionCode
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.TransSalePmtDiff">
            <summary>
            The difference between payment and grossAmount plus rounded
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.TransSalePmtDiffForCurrentPaymentOperation">
            <summary>
            Same as TransSalePmtDiff, but calculated for the ongoing payment transaction
            </summary>
            <remarks>
            This property is useful when we have the following scenario:
                One transaction with one item, price with tax = $10
                Pay without limitation: $5 => TransSalePmtDiff = $10 - $5 = $5
                Pay with limitation the remaining part 
                    => the item becomes tax exempt during the process (even though only 50% of its quantity should become tax exempt) 
                    => total to pay: $9.52 (it should be $9.76)
                    => TransSalePmtDiff = $9.52 - $5 = $4.52 which is wrong
                    we should be able to pay 4.76 because only half of the item is tax exempt
                    So here TransSalePmtDiffForCurrentPaymentOperation comes into play; TransSalePmtDiffForCurrentPaymentOperation = $4.76
            </remarks>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.UnMarkSelectedItems(System.Collections.Generic.List{System.Int32},System.Boolean)">
            <summary>
            Unmarks the given items by setting <see cref="P:LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem.SplitMarked"/> as <see langword="false"/>
            </summary>
            <param name="SelectedLineIds">A list containing the line IDs of the items to unmark</param>
            <param name="UnMarkAll">If true, then all items on the transaction are unmarked</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.UpdateTotalAmounts(LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem)">
            <summary>
            Updates all total amounts on the transaction header such as net amount, gross amount, tax amount etc.
            </summary>
            <param name="saleLineItem">Sale line item with the values to be added to the total amounts</param>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.UseOverrideTaxGroup">
            <summary>
            Used to indicate if the POS should use the OverrideTaxGroup tax group code when calculating tax.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.UseTaxGroupFrom">
            <summary>
            This is used to tell the Tax service whether it should use the tax group defined on the Store or
            the tax group defined on the Customer when a customer has been added to the transaction.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.UseTransactionService">
            <summary>
            Tells whether the TransactionService should be used or not (in connection with returning a transaction)
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.VoidItemLine(System.Int32)">
            <summary>
            Voids an item line if it is not already voided, else if the void flag is on, it takes the void flag off.
            </summary>
            <param name="lineId">The unique line id of the item</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.VoidPaymentLine(System.Int32)">
            <summary>
            Voids a payment line on the transaction
            </summary>
            <param name="lineId">The tender line id to be voided</param>
            <returns>The tender line that was voided</returns>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.TenderLines">
            <summary>
            Contains the tender line items
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.SaleItems">
            <summary>
            The list of all <see cref="T:LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem"/> on the transaction
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.InfoCodeLines">
            <summary>
            A list of all <see cref="T:LSOne.DataLayer.BusinessObjects.Transactions.Line.InfoCodeLineItem"/> on the transaction
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.TaxLines">
            <summary>
            A list of all <see cref="T:LSOne.DataLayer.BusinessObjects.Tax.TaxItem"/> on the transaction
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.GetTopMostLimitationSplitParentItem(LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem)">
            <summary>
            Returns the topmost limitation split parent item of the given line item.
            </summary>
            <param name="currentItem">The current child- or parent item</param>
            <returns>The top most parent item or the same item if it is already the parent item or not part of a limited payment split</returns>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.IsReturnTransaction">
            <summary>
            Tells whether this transaction is a return transaction or if it's a credit sale (a return transaction without any original transaction).
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.JournalID">
            <summary>
            The ID of the inventory adjustment (return, reserve) that this transaction is related to. For example when making a customer order an item might be included in a reservation
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.UpdateDiscountAmounts(LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem)">
            <summary>
            Adds the discount amounts from the given <see cref="T:LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem"/> to the transaction totals
            </summary>
            <param name="saleLineItem">The sale item that should be added to the discount totals</param>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.EFTTransactionExtraInfo">
            <summary>
            Gets or sets the implementation of <see cref="T:LSOne.Services.Interfaces.SupportInterfaces.EFT.IEFTTransactionExtraInfo"/>. This will be persisted on the transaction if it is not <see langword="null"/>
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.EFTTransactionExtraInfoXElement">
            <summary>
            The element containing the serialized <see cref="T:LSOne.Services.Interfaces.SupportInterfaces.EFT.IEFTTransactionExtraInfo"/>
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction.KDSOrderID">
            <summary>
            Uniqure ID of the order sent to KDS
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem.BlockDiscountLinkItem">
            <summary>
            Set by the discount service to block an item sale from setting split items added by the discount service as linked items
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem.PaymentIndex">
            <summary>
            The index of the payment line on the transaction that was used to pay for this item. This only applies for limited payments.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem.KdsId">
            <summary>
            ID of an item used by the KDS system
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem.TotalDiscountExact">
            <summary>
            Total discount amount applied to the item without rounding (Not saved)
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem.TotalDiscountWithTaxExact">
            <summary>
            Total discount amount with tax applied to the item without rounding (Not saved)
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem.LineDiscountExact">
            <summary>
            Line discount amount applied to the item without rounding (Not saved)
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem.LineDiscountWithTaxExact">
            <summary>
            Line discount amount with tax applied to the item without rounding (Not saved)
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem.NetAmountExact">
            <summary>
            Net amount without rounding (Not saved)
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem.NetAmountWithTaxExact">
            <summary>
            Net amount with tax without rounding (Not saved)
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem.PaymentAmount">
            <summary>
            The amount that has been paid for. This is linked to <see cref="P:LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem.PaymentIndex"/> and is only valid when there is a limited payment on the transaction (Not saved). 
            If <see cref="P:LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem.PaymentIndex"/> does not point to a valid tender line then this will return 0.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem.LimitationSplitParentLineId">
            <summary>
            The parent line ID that this line item was created from. This happens when a line item is partially paid with a limited payment and the remaining amount of the item is split into anoter line.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem.LimitationSplitChildLineId">
            <summary>
            The line ID of the child item that was split away from this line. This happens when a line item is partially paid with a limited payment and the remaining amount of the item is split into anoter line.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem.ItemAssembly">
            <summary>
            The active assembly for the current store for the sold item if it is an assembly item
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem.ParentAssembly">
            <summary>
            The active assembly for the current store that the sold item is a component of
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem.IsAssemblyComponent">
            <summary>
            True if an item is a component of an assembly
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem.IsAssembly">
            <summary>
            True if an item is an assembly
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem.ShouldCalculateAndDisplayAssemblyPrice">
            <summary>
            True if this assembly item should calculate it's price normally
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem.ShouldDisplayTotalAssemblyComponentPrice(LSOne.DataLayer.BusinessObjects.ItemMaster.ExpandAssemblyLocation)">
            <summary>
            True if an assembly should display it's total price from the components if the components are not displayed
            </summary>
            <param name="assemblyLocation">Assembly display location</param>
            <returns></returns>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem.AssemblyID">
            <summary>
            ID of the assembly
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem.AssemblyComponentID">
            <summary>
            ID of the assembly component
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem.AssemblyParentLineID">
            <summary>
            Line ID of the parent assembly
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem.ProductionTime">
            <summary>
            The production time of an item. This tells how long it takes to cook and prepare the item.
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem.GetCalculatedNetAmount(System.Boolean)">
            <summary>
            Returns the net amount for the sale line item, with or without tax.
            If the item as an assembly item, this function returns sum of the net amounts for all 
            assembly components that are linked to the item that has a price on them.
            </summary>
            <param name="withTax">if true, the returned net amount is with tax included</param>
            <returns>the net amount for the item</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem.GetCalculatedPrice(System.Boolean)">
            <summary>
            Returns the price for the sale line item, with or without tax.
            If the item as an assembly item, this function returns sum of the prices for all 
            assembly components that are linked to the item that has a price on them.
            </summary>
            <param name="withTax">if true, the returned price is with tax included</param>
            <returns>the price for the item</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem.GetRootAssemblyLineItem">
            <summary>
            Returns the sale line item of the root assembly item on the transaction
            for an assembly component sales line, 
            i.e. the parent assembly (of the parent assembly etc...) 
            of the component item.
            </summary>
            <returns>The root assembly item on the transaction, or null if no parent assembly item is found</returns>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ISession.UserLogin">
            <summary>
            The login of the user (i.e "admin")
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ISession.TerminalID">
            <summary>
            The ID of the terminal this session is for
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ISession.StoreID">
            <summary>
            The ID of the store this session is for
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.ISession.GetSettings(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager)">
            <summary>
            Gets the current settings for this session based on the user, store and terminal
            </summary>
            <param name="entry">The entry into the database</param>
            <returns></returns>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ISettings.TrainingMode">
            <summary>
            Gets or sets wether the terminal is in training mode
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ISettings.SplitBillID">
            <summary>
            The unique ID when running the split bill operation to make sure that multiple terminals that are all using the same transaction ID 
            numbersequence don't overwrite each others split bill information
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ISettings.StorePriceGroup">
            <summary>
            This field contains the default Price Group for the POS terminal.
            If you select a price group in this field, the POS terminal system checks whether there exists an item price with this price group when an item is sold on this POS terminal. If it finds the price, the item is sold at that price, otherwise, it is sold at the normal unit price.
            If you leave this field blank, there are no special item prices for the POS terminal.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ISettings.TaxIncludedInPrice">
            <summary>
            Is set to true if the tax is included in price.
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.ISettings.LoadProfiles(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Utilities.DataTypes.RecordIdentifier)">
            <summary>
            Loads all profiles for the application
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="userID">The pos user login name. This is used to check for profiles on the user</param>
            <returns>True if all profiles were loaded, false if en error occurred. Use GetProfileLoadErrors function to retrieve error messages</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.ISettings.GetProfileLoadErrors(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager)">
            <summary>
            Checks if there are profiles/profile information missing and returns each error message
            </summary>
            <param name="entry">The entry into the database</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.ISettings.LoadVisualProfile(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.String@)">
            <summary>
            Used to only load the visual profile. This is used in cases when the visual profile information might have changed, i.e when a new 
            user logs in.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="errorMessage">The message to display to the user if the profile could not be loaded</param>
            <returns>True if the visual profile was loaded successfully, false if the visual profile could not be loaded</returns>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ISettings.NeedsEFTSetup">
            <summary>
            Local state of the application, is not saved to the settings file
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ISettings.HardwareProfileNeedsSetup">
            <summary>
            Used to convey need of setup of services. Local state of the application, is not saved to the settings file
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ISettings.RestartDevices">
            <summary>
            Indicates if the hardware devices must be restarted. Local state of the application, is not saved to the settings file
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ISettings.IsBasic">
            <summary>
            Gets or sets wether the POS is configured for a BASIC installation
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ISettings.SuppressUI">
            <summary>
            Gets or sets wether the POS should suppress UI dialogs and forms. This is for example used when the POS Engine is running on a server where
            UI cannot be displayed.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ISettings.DefaultItemImage">
            <summary>
            Returns the image used when no item image is available
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.ISettings.AddEmployeeToRecentList(LSOne.Services.Interfaces.SupportClasses.Employee.Employee)">
            <summary>
            Add an employee to the recently used employees list
            Holds maximum 5 entries
            </summary>
            <param name="employee">The employee to add</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.SupportInterfaces.ISettings.GetRecentEmployees">
            <summary>
            Get a list of recently used employees
            </summary>
            <returns></returns>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ITenderLineItem.PaidDeposit">
            <summary>
            If true then this is a deposit line that has already been paid and does not need to be saved again
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ITenderLineItem.LoyaltyPoints">
            <summary>
            Has the points that were calculated for this specific line item
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ITenderLineItem.Transaction">
            <summary>
            The transaction this line belongs to
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ITenderLineItem.TenderTypeId">
            <summary>
            The id for the Tendertype
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ITenderLineItem.Amount">
            <summary>
            Payment amount
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ITenderLineItem.ForeignCurrencyAmount">
            <summary>
            The amount in a foreign currency.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ITenderLineItem.CompanyCurrencyAmount">
            <summary>
            The amount in the company currency as calculated from the entry in CompanyInfo table.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ITenderLineItem.ExchrateMST">
            <summary>
            The exchange rate between any paid amount and the company currency.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ITenderLineItem.ExchangeRate">
            <summary>
            The exchange rate used to calculate the amount.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ITenderLineItem.CurrencyCode">
            <summary>
            The code to identify the currency.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ITenderLineItem.OpenDrawer">
            <summary>
            Should the drawer be opened?
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ITenderLineItem.ChangeTenderID">
            <summary>
            If 0 > change - amount >= minimumChangeAmount, then
            </summary>     
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ITenderLineItem.MinimumChangeAmount">
            <summary>
            changeTenderID will be used as changeID, else tenderTypeID will be used 
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ITenderLineItem.ChangeBack">
            <summary>
            Is the tender item a change back tender line - needed for Return Transactions
            </summary>                                     
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ITenderLineItem.Comment">
            <summary>
            Infocode comment on the tender line
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ITenderLineItem.TypeOfTender">
            <summary>
            The type of tender line this is. Used for rebuilding 
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.SupportInterfaces.ITenderLineItem.ID">
            <summary>
            The unique ID of this tender line. This is not the same as <see cref="P:LSOne.DataLayer.BusinessObjects.Transactions.Line.ILineItem.LineId"/> since this is ID is not tied to the position of this 
            line within the transaction. This is not saved to the database and is only used at runtime to uniquely identify the line
            </summary>
        </member>
        <member name="T:LSOne.Services.Interfaces.IPOSPlugin">
            <summary>
            Defines a plugin for the POS that can be executed from a button when running the operation "Execute POS plugin"
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPOSPlugin.RunTask(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISession,LSOne.Services.Interfaces.SupportInterfaces.ISettings,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.DataLayer.BusinessObjects.OperationInfo,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Called by the POS when the user runs the "Execute POS plugin". The POS will supply the database connection, session, current transaction and the task- and parameters that were selected on the button.
            </summary>
            <param name="entry">The connection to the database</param>
            <param name="session">The current session which the transaction belongs to</param>
            <param name="settings">Application settings for the running application</param>
            <param name="transaction">The current transaction</param>
            <param name="operationInfo">Contains various information from the POS about the current state for the operation</param>
            <param name="task">The ID of the task to run. This will be what the user selected in the button properties dialog</param>
            <param name="args">Zero or more arguments as selected- or entered by the user</param>
            <returns></returns>
        </member>
        <member name="T:LSOne.Services.Interfaces.IPOSPluginSetupProvider">
            <summary>
            Provides information about an <see cref="T:LSOne.Services.Interfaces.IPOSPlugin"/> to display to the user when he is configuring a button for the POS. If a <see cref="T:LSOne.Services.Interfaces.IPOSPlugin"/> does not implement this interface then the user must
            manually enter all the relevant information.
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.IPOSPluginSetupProvider.PluginTasks">
            <summary>
            Returns the list of tasks that the <see cref="T:LSOne.Services.Interfaces.IPOSPlugin"/> can execute.
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPriceService.SetPrice(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction,LSOne.DataLayer.GenericConnector.Enums.CacheType)">
            <summary>
            Gets and sets the price for the last item and any other instances of the same item on the current sale. 
            </summary>
            <param name="entry">The entry to the database</param>
            <param name="retailTransaction">The current retail transaction</param>
            <param name="cacheType">What type of caching should be done during this operation</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPriceService.UpdateAllPrices(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction,System.Boolean,LSOne.DataLayer.GenericConnector.Enums.CacheType)">
            <summary>
            Updates all prices for all items on the transaction
            </summary>
            <param name="entry">The entry to the database</param>
            <param name="retailTransaction">The current retail transaction</param>
            <param name="cacheType">What type of caching should be done during this operation</param>
            <param name="restoreItemPrices">If false then the prices will not be restored for specific items f.ex. when a price has already been overwritten and a customer is then added to the transaction</param>        
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPriceService.UpdatePrice(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction,LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem,System.Boolean,LSOne.DataLayer.GenericConnector.Enums.CacheType)">
            <summary>
            Updates the price of a single item on the transaction
            </summary>
            <param name="entry">The entry to the database</param>
            <param name="retailTransaction">The current retail transaction</param>
            <param name="saleLineItem">Item for which to update the price</param>
            <param name="cacheType">What type of caching should be done during this operation</param>
            <param name="restoreItemPrices">If false then the prices will not be restored for specific items f.ex. when a price has already been overwritten and a customer is then added to the transaction</param>        
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPriceService.GetPrice(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean,System.Decimal,LSOne.DataLayer.GenericConnector.Enums.CacheType)">
            <summary>
            Retrieves the TradeAgreementPriceInfo for a specific item. This function checks the all the prices and promotions and decides what is the best trade agreement depending on currency, dates and other configurations
            </summary>
            <param name="entry">The entry to the database</param>        
            <param name="cacheType">What type of caching should be done during this operation</param>
            <param name="itemID">The </param>
            <param name="variantID"></param>
            <param name="customerID"></param>
            <param name="storeID"></param>
            <param name="currencyCode"></param>
            <param name="unitID"></param>
            <param name="salesTypeID"></param>
            <param name="calculateWithTax"></param>
            <param name="quantity"></param>        
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPrintingService.PrintTenderLineToPrintingStation(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Hospitality.PrintingStation,LSOne.DataLayer.BusinessObjects.Enums.FormSystemType,LSOne.Services.Interfaces.SupportInterfaces.ITenderLineItem,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Prints the given tender line to the given printing station
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="printingStation">The printing station to print to</param>
            <param name="formType">The type of receipt to get the receipt string for</param>
            <param name="tenderLine">The tender line to print</param>
            <param name="posTransaction">The transaction to generate a receipt for</param>
            <returns>True if the tender line was printed on the printing station, false otherwise if something went wrong</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPrintingService.PrintToPrintingStation(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Hospitality.PrintingStation,LSOne.DataLayer.BusinessObjects.Enums.FormSystemType,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Prints a receipt string to the given printing station
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="printingStation">The printing station to print to</param>
            <param name="formType">The type of receipt to get the receipt string for</param>
            <param name="posTransaction">The transaction to generate a receipt for</param>
            <returns>True if the receipt string was printed on the printing station, false otherwise if something went wrong</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPrintingService.GetOPOSPrintString(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Enums.FormSystemType,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Gets the OPOS receipt string for the given transaction
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="formType">The type of receipt to get the receipt string for</param>
            <param name="posTransaction">The transaction to generate a receipt for</param>
            <returns>An OPOS print string identical to the one that would be sent out to the printer if using the function <see cref="M:LSOne.Services.Interfaces.IPrintingService.PrintReceipt(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Enums.FormSystemType,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,System.Boolean)"/></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPrintingService.PrintReceipt(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Enums.FormSystemType,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,System.Boolean)">
            <summary>
            Prints a specific receipt to either OPOS or Windows printer
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="formType">The type of receipt that should be printed</param>
            <param name="posTransaction">The transaction to be printed</param>
            <param name="copyReceipt">If true then this is a copy of a previously existing receipt</param>
            <returns>If true the printing was successful</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPrintingService.PrintReceipt(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Enums.FormSystemType,LSOne.DataLayer.BusinessObjects.Forms.FormInfo,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,System.Boolean)">
            <summary>
            Prints a specific receipt to either OPOS or Windows printer
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="formType">The type of receipt that should be printed</param>
            <param name="posTransaction">The transaction to be printed</param>
            <param name="copyReceipt">If true then this is a copy of a previously existing receipt</param>
            <param name="formInfo">Information about the receipt to be printed.</param>
            <returns>If true the printing was successful</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPrintingService.CreateWinPrintReceipt(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.String,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,System.Collections.Generic.List{LSOne.DataLayer.BusinessObjects.BarCodes.BarcodePrintInfo},System.Int32)">
            <summary>
            Creates a receipt in PDF format
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="posTransaction">The transaction to be printed</param>
            <param name="receiptString">The receipt after it has been transformed to an OPOS string</param>
            <param name="barcodePrintInfo">Information for the barcode printing</param>
            <param name="formWidth">The width of the print form</param>
            <returns>The receipt in a format the WinPrinter understands</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPrintingService.CreateWinPrintReceipt(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Enums.FormSystemType,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,System.Boolean,System.Collections.Generic.List{LSOne.DataLayer.BusinessObjects.BarCodes.BarcodePrintInfo})">
            <summary>
            Creates a receipt in PDF format
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="formType">The type of receipt that should be printed</param>
            <param name="posTransaction">The transaction to be printed</param>
            <param name="copyReceipt">If true then this is a copy of a previously existing receipt</param>
            <param name="barcodePrintInfo">Information for the barcode printing</param>
            <returns>The receipt in a format the WinPrinter understands</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPrintingService.CreateWinPrintReceipt(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Forms.FormInfo,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,System.Collections.Generic.List{LSOne.DataLayer.BusinessObjects.BarCodes.BarcodePrintInfo})">
            <summary>
            Creates a receipt in PDF format
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="posTransaction">The transaction to be printed</param>
            <param name="formInfo">The receipt after it has been transformed to an OPOS string</param>
            <param name="barcodePrintInfo">Information for the barcode printing</param>
            <returns>The receipt in a format the WinPrinter understands</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPrintingService.PrintCardReceipt(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Enums.FormSystemType,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.Services.Interfaces.SupportInterfaces.ITenderLineItem,System.Boolean)">
            <summary>
            Prints a credit card receipt
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="formType">The type of receipt that should be printed</param>
            <param name="posTransaction">The transaction to be printed</param>
            <param name="copyReceipt">If true then this is a copy of a previously existing receipt</param>
            <param name="tenderLineItem">The card tender line item that has the information to be printed</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPrintingService.PrintCardReceipt(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Enums.FormSystemType,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.Services.Interfaces.SupportInterfaces.EFT.IEFTInfo,System.Boolean,LSOne.Services.Interfaces.SupportInterfaces.ICardTenderLineItem)">
            <summary>
            Prints a credit card receipt
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="formType">The type of receipt that should be printed</param>
            <param name="posTransaction">The transaction to be printed</param>
            <param name="copyReceipt">If true then this is a copy of a previously existing receipt</param>
            <param name="tenderLineItem">The card tender line item that has the information to be printed</param>
            <param name="eftInfo">Specific information about the card payment</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPrintingService.PrintCustomerReceipt(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Enums.FormSystemType,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.Services.Interfaces.SupportInterfaces.ITenderLineItem,System.Boolean)">
            <summary>
            Prints a customer account receipt
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="formType">The type of receipt that should be printed</param>
            <param name="posTransaction">The transaction to be printed</param>
            <param name="copyReceipt">If true then this is a copy of a previously existing receipt</param>
            <param name="tenderLineItem">The tender line that has the information to be printed</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPrintingService.PrintFloatEntryReceipt(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Prints a float entry receipt
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="posTransaction">The float entry transaction</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPrintingService.PrintRemoveTenderReceipt(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Prints a remove tender receipt
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="posTransaction">The remove tender transaction</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPrintingService.PrintCreditMemo(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Enums.FormSystemType,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.Services.Interfaces.SupportInterfaces.ITenderLineItem,System.Boolean)">
            <summary>
            Prints a when customer is paying with a credit memo
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="formType">The type of receipt that should be printed</param>
            <param name="posTransaction">The transaction to be printed</param>
            <param name="copyReceipt">If true then this is a copy of a previously existing receipt</param>
            <param name="tenderLineItem">The tender line that has the information to be printed</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPrintingService.PrintInvoice(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="posTransaction"></param>
            <param name="copyInvoice"></param>
            <param name="printPreview"></param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPrintingService.ShowPrintPreview(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Enums.FormSystemType,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            show preview 
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="formType"></param>
            <param name="posTransaction"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPrintingService.ShowPrintPreview(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.String,System.Boolean)">
            <summary>
            Displays a print preview for any text
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="textToDisplay">The text to display</param>
            <param name="allowPrint">Is the user allowed to print the result</param>
            <returns>Was the text printed or not</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPrintingService.PrintTenderDeclaration(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="posTransaction"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPrintingService.PrintBankDrop(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="posTransaction"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPrintingService.PrintFiscalInfo(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Print a slip containing fiscal information
            e.g. For the Swedish fiscalization should contain the following info: - terminal ID, - serial number of the eTax
            e.g. For the Default fiscalization will contain the following info: - terminal ID
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="posTransaction">The pos transaction</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPrintingService.PrintSafeDrop(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="posTransaction"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPrintingService.PrintGiftCertificate(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Enums.FormSystemType,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.Services.Interfaces.SupportInterfaces.IGiftCertificateItem,System.Boolean)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="formType"></param>
            <param name="posTransaction"></param>
            <param name="giftCertificateItem"></param>
            <param name="copyReceipt"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPrintingService.PrintGiftReceipt(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Enums.FormSystemType,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="formType"></param>
            <param name="posTransaction"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPrintingService.PrintSafeDropReversal(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            
            </summary>
            <param name="entry"></param>
            <param name="posTransaction"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPrintingService.PrintBankDropReversal(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="posTransaction"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPrintingService.PrintSuspendedTransaction(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Enums.FormSystemType,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,System.Boolean)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="formType"></param>
            <param name="posTransaction"></param>
            <param name="copyReceipt"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPrintingService.PrintVoidedTransaction(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Enums.FormSystemType,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,System.Boolean)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="formType"></param>
            <param name="posTransaction"></param>
            <param name="copyReceipt"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPrintingService.Validate(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.String)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="validation"></param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPrintingService.PrintTransaction(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="entry"></param>
            <param name="transaction"></param>
            <param name="copyReceipt"></param>
            <param name="printPreview"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPrintingService.PrintLoyaltyReceipt(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Enums.FormSystemType,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.Services.Interfaces.SupportInterfaces.ITenderLineItem,System.Boolean)">
            <summary>
            
            </summary>
            <param name="entry"></param>
            <param name="formType"></param>
            <param name="posTransaction"></param>
            <param name="tenderLine"></param>
            <param name="copyReceipt"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPrintingService.GetInfoForForm(LSOne.DataLayer.BusinessObjects.Enums.FormSystemType,System.Boolean,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Returns form information about a specific receipt form
            </summary>
            <param name="systemType">What form type is being requested</param>
            <param name="copyReceipt">Is this a copy of the receipt</param>
            <param name="formProfileID">The form profile that should be used to get the information about the form</param>
            <param name="displayNoPrintform">If false then no message is displayed if the form does not exist</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPrintingService.GetTransformedTransaction(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Enums.FormSystemType,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.DataLayer.BusinessObjects.Forms.FormInfo,System.Boolean)">
            <summary>
            Returns the complete form information with the text ready for printing
            </summary>
            <param name="systemType">The form to be printed</param>
            <param name="transaction">The transaction to be printed</param>
            <param name="formInfo"></param>
            <param name="copyReceipt"></param>
            <param name="entry">The entry into the database</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPrintingService.PrintCustomReceipt(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Transactions.Transaction,System.String,LSOne.DataLayer.BusinessObjects.OperationInfo)">
            <summary>
            Prints a custom receipt needs tpo be configured by a partner
            </summary>
            <param name="entry"></param>
            <param name="transaction"></param>
            <param name="customText"></param>
            <param name="operationInfo"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPrintingService.PrintOpenDrawer(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Prints a slip when open drawer operation is concluded without any sale
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="transaction">The transaction to be printed</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPrintingService.PrintGiftCardBalanceReceipt(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Enums.FormSystemType,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.Services.Interfaces.SupportInterfaces.ITenderLineItem,System.Boolean)">
            <summary>
            Prints a gift card balance receipt
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="formType">The type of receipt that should be printed</param>
            <param name="posTransaction">The transaction to be printed</param>
            <param name="tenderLineItem">The tender line that has the information to be printed</param>
            <param name="copyReceipt">If true then this is a copy of a previously existing receipt</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IPrintingService.PrintReceiptOnPrintingStation(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.String,LSOne.DataLayer.BusinessObjects.Hospitality.PrintingStation,System.Int32)">
            <summary>
            Print a string on the printing station
            </summary>
            <param name="entry">Database connection</param>
            <param name="receipt">String to print</param>
            <param name="printingStation">Printing station on which to print</param>
            <param name="formWidth">Form width. Default value is 56.</param>
            <returns>True if the printing was succesful</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IRFIDService.GetUnProcessedRFIDs(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager)">
            <summary>
            Gets the unprocessed RFID tags that will then be processed as items and sold on the POS
            </summary>
            <param name="entry">The entry into the database</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IRFIDService.MarkProcessedRFIDs(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction)">
            <summary>
            Is called after all the RFID tags have been processed and sold on the POS to mark the tags as sold/processed. The tags sold can be viewed on each SaleLineItem on the transaction in property RFIDTagId
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="transaction">the current transaction</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IRFIDService.ConcludeRFIDs(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager)">
             <summary>
             Here any processing of RFID tags that needs to be done after the sale has concluded should be done
            for example send the RFID tags to the security gates or surveilance systems.
             </summary>
             <param name="entry">The entry into the database</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IRFIDService.Load">
            <summary>
            Is called from the POS core when the POS is loading in all the devices. This function is called through the RFIDScanner part of the Peripherals service.
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.IRFIDService.Unload">
            <summary>
            Is called from the POS core when the POS is unloading in all the devices. This function is called through the RFIDScanner part of the Peripherals service.
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.IRFIDService.DisableForScan">
            <summary>
            Is called from the POS core when POS input is being disable for example when a dialog is being displayed or an operation is running
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.IRFIDService.ReEnableForScan">
            <summary>
            Is called from the POS core when POS input is being enabled for example when a dialog has been closed or an operation has finished running
            </summary>
        </member>
        <member name="T:LSOne.Services.Interfaces.ISalesInvoiceService">
            <summary>
            
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISalesInvoiceService.SalesInvoices(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction@)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="posTransaction">The current transaction</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ISalesInvoiceService.SiteServiceIsNeeded(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Returns true if the Site service is needed to conclude a transaction that includes sales invoice item
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="transaction">The current transaction</param>
            <returns></returns>
        </member>
        <member name="T:LSOne.Services.Interfaces.ScaleUnit">
            <summary>
            The 4 scale units that a weighing instrument can weigh
            </summary>
        </member>
        <member name="T:LSOne.Services.Interfaces.ScaleMessage">
            <summary>
            The event that returns the weight to the POS from the scale
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:LSOne.Services.Interfaces.WeightResult">
            <summary>
            The event that returns the quantity to the POS from the scale
            </summary>
            <param name="quantity"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IScaleService.GetScaleDisplayInformation(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem,System.Int32)">
            <summary>
            Creates a string to display the weight information on the customer and user facing displays
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="saleLineItem">The sale line that has the weighing item </param>
            <param name="columnLength">How long the string can be</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IScaleService.GetScalePrintInformation(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem,System.Int32)">
            <summary>
            Creates a string to print the weight information on the receipt
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="saleLineItem">The sale line that has the weighing item </param>
            <param name="columnLength">How long the string can be</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IScaleService.IsScaleUnit(LSOne.Utilities.DataTypes.RecordIdentifier)">
            <summary>
            Returns true if the unit is a weighing (or scale) unit 
            </summary>
            <param name="ID">The unique ID of the unit</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IScaleService.FromRecordIdentifier(LSOne.Utilities.DataTypes.RecordIdentifier)">
            <summary>
            Returns an object with information about the scale unit from a unique ID of a unit
            </summary>
            <param name="ID"></param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IScaleService.GetCurrentScaleUnit">
            <summary>
            Returns the current scale unit of the scale
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IScaleService.ConvertScaleUnits(LSOne.Services.Interfaces.ScaleUnit,LSOne.Services.Interfaces.ScaleUnit,System.Decimal)">
            <summary>
            Converts the weighing in one scale unit to another
            </summary>
            <param name="fromUnit"></param>
            <param name="toUnit"></param>
            <param name="quantity"></param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IScaleService.GetTareWeight">
            <summary>
            Returns the current tare weight
            </summary>
            <returns></returns>
        </member>
        <member name="P:LSOne.Services.Interfaces.IScaleService.GetVersion">
            <summary>
            Returns the current version of the Scale service
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.IScaleService.CertificationNumber">
            <summary>
            Returns the current scale certification number
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.IScaleService.HasCertificationNumber">
            <summary>
            Returns true if the scale service includes a scale certification number
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.IScaleService.SetCertificationNumber(System.String)">
            <summary>
            Sets the certification number to be displayed in the POS
            </summary>
            <param name="certificationNumber"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IScaleService.LoadPeripheral">
            <summary>
            Loads the OPOS scale 
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.IScaleService.UnloadPeripheral">
            <summary>
            Unloads the OPOS scale
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.IScaleService.ReadFromScaleEx(System.Int32@,System.Int32,System.String,System.String,System.Decimal,System.Int32,System.Decimal@)">
            <summary>
            Reads the weight from the scale and returns the results.
            </summary>
            <param name="weight">The weight that was read from the scale in grams</param>
            <param name="timeout">The timeout to set on the read operation</param>
            <param name="weightUnit">The scale unit that the scale should be set to</param>
            <param name="description">The description to send to the connected display</param>
            <param name="unitPrice">The unit price for the item that should be weighed</param>
            <param name="tareWeight">The tare weight for the item to be weighed</param>
            <param name="salesPrice">The calculated sales price from the scale</param>
            <returns>True if the scale successfully read the weight, false otherwise. If an error occurred it is raised through an error event</returns>
        </member>
        <member name="P:LSOne.Services.Interfaces.IScaleService.ScaleDeviceActive">
            <summary>
            Returns true if the scale is active
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.IScaleService.EnableScale(System.Boolean)">
            <summary>
            Enabled or disables the scale for weighing
            </summary>
            <param name="enable"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IScaleService.ScaleToJsonString">
            <summary>
            Returns the Scale properties as json, including the underlying LSOne.Services.OPOS.OPOSScale.
            Useful for logging and debugging purposes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITenderRestrictionService.DisplayTenderRestrictionInformation(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISettings,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.DataLayer.BusinessObjects.StoreManagement.StorePaymentMethod,System.Decimal@)">
            <summary>
            Displays a dialog with the items that have been excluded from payment due to limitations
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="settings">The current POS settings</param>
            <param name="retailTransaction">The current transaction</param>
            <param name="paymentMethod">The payment method that is to pay for the items</param>
            <param name="payableAmount">The total payable amount for the items that fall within the limitations</param>
            <returns><see cref="T:LSOne.DataLayer.BusinessObjects.Enums.TenderRestrictionResult"/></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITenderRestrictionService.GetTenderRestrictionAmount(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISettings,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.DataLayer.BusinessObjects.StoreManagement.StorePaymentMethod,System.Decimal@)">
            <summary>
            Calculates the amount that can be paid when payment limitations have been taken into account
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="settings">The current POS settings</param>
            <param name="retailTransaction">The current transaction</param>
            <param name="paymentMethod">The payment method that is to pay for the items</param>
            <param name="payableAmount">The total payable amount for the items that fall within the limitations</param>
            <returns><see cref="T:LSOne.DataLayer.BusinessObjects.Enums.TenderRestrictionResult"/></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITenderRestrictionService.GetUnconfirmedTenderRestrictionAmount(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISettings,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.DataLayer.BusinessObjects.StoreManagement.StorePaymentMethod,System.Decimal@)">
            <summary>
            Calculates the amount that can be paid when payment limitations have been taken into account
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="settings">The current POS settings</param>
            <param name="retailTransaction">The current transaction</param>
            <param name="paymentMethod">The payment method that is to pay for the items</param>
            <param name="payableAmount">The total payable amount for the items that fall within the limitations</param>
            <returns><see cref="T:LSOne.DataLayer.BusinessObjects.Enums.TenderRestrictionResult"/></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITenderRestrictionService.ClearTenderRestriction(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Deletes restrictions from the tendertype.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="retailTransaction">The current transaction</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITenderRestrictionService.CancelTenderRestriction(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISettings,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.DataLayer.BusinessObjects.StoreManagement.StorePaymentMethod,System.Int32)">
            <summary>
            Clears all restrictions from items that were paid for for a specific payment line. If payment line is set to -999 then all limitations that have been set 
            but have no payment index yet.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="settings">The current POS settings</param>
            <param name="retailTransaction">The current transaction</param>
            <param name="paymentMethod">The payment method that is to pay for the items</param>
            <param name="paymentIndex">The number of the payment line that is to be cleared</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITenderRestrictionService.CancelUnconfirmedTenderRestriction(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISettings,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.DataLayer.BusinessObjects.StoreManagement.StorePaymentMethod)">
            <summary>
            Clears all restrictions from items that have been prepared but not yet paid for f.ex. when the user clicks Cancel in the payment dialog after restrictions have been displayed
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="settings">The current POS settings</param>
            <param name="retailTransaction">The current transaction</param>
            <param name="paymentMethod">The payment method that is to pay for the items</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITenderRestrictionService.UpdatePaymentIndex(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISettings,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.DataLayer.BusinessObjects.StoreManagement.StorePaymentMethod,System.Int32)">
            <summary>
            Updates the payment index for from items that were paid for using the current payment line
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="settings">The current POS settings</param>
            <param name="retailTransaction">The current transaction</param>
            <param name="paymentMethod">The payment method that is to pay for the items</param>
            <param name="paymentIndex">The number of the payment line that is to be cleared</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITenderRestrictionService.GetRestrictionForItem(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.StoreManagement.StorePaymentMethod,System.Collections.Generic.List{LSOne.DataLayer.BusinessObjects.LookupValues.PaymentMethodLimitation},LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem)">
            <summary>
            Goes through the limitation list (items/groups/departments) and checks if the item that is being looked at can be included in the payment
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="paymentMethod">The payment method that is to pay for the items</param>
            <param name="limitationList">The list of limitations that have been configured</param>
            <param name="item">The item that is being checked</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITenderRestrictionService.GetPaymentLimitationsAsHtml(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISettings,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Returns the text to be displayed in the HTML panel. The text contains a list with all payment types that can be used to pay for a transaction if the payment types contain limitations.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="settings">The current POS settings</param>
            <param name="retailTransaction">The retail transaction for which we display the HTML panel</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITenderRestrictionService.GetRefundableAmountLimitedToPaymentTypeAsHtml(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISettings,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Returns the text to be displayed in the HTML panel. The text contains a list with all payment types that can be used to refund for a return transaction.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="settings">The current POS settings</param>
            <param name="posTransaction">The return retail transaction for which we display the HTML panel</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITenderRestrictionService.SplitLines(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISettings,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.DataLayer.BusinessObjects.StoreManagement.StorePaymentMethod,System.Int32)">
            <summary>
            Goes through the transaction and splits up the limited items that have been paid for with the given tender line. This will add a new sale line to the transaction
            which contains the remaining amount if the limited payment does not fully pay for all the applicable items on the transaction.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="settings">The curront POS settings</param>
            <param name="posTransaction">The retail transaction to split the lines for</param>
            <param name="paymentMethod">The payment method that is to pay for the items</param>
            <param name="paymentIndex">The number of the payment line that is to be cleared</param>
        </member>
        <member name="P:LSOne.Services.Interfaces.ITenderService.ErrorText">
            <summary>
            Returns the error text (if any) that was created when the tender was being checked in IsTenderAllowed
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITenderService.IsTenderAllowed(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.BusinessObjects.StoreManagement.StorePaymentMethod,System.Decimal,System.Boolean,System.Decimal,System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Goes through all the configurations on the payment type and tender type and decides if the tender can be used for this particular payment.
            To view the reason why it is not allowed use property ErrorText
            </summary>
            <param name="dataModel">Entry into the database</param>
            <param name="transaction">The current transaction</param>
            <param name="storeCurrencyID">The currency ID for the store</param>
            <param name="tenderInfo">The payment method information</param>
            <param name="paidAmount">The amount being paid</param>
            <param name="manuallyEnteredAmount">Was the amount entered manually</param>
            <param name="balance">The current balance of the transaction</param>
            <param name="transactionTotal">The total balance of the transaction</param>
            <param name="payment">Total amount paid already on the transaction</param>
            <param name="restrictedAmount">The restricted amount for the ongoing payment</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITenderService.GetTenderDetails(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ITenderLineItem)">
            <summary>
            Returns a string with details about the tender line. Is used when printing the receipts
            </summary>
            <param name="dataModel">Entry into the database</param>
            <param name="tenderLine">The tender line being printed</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITransactionService.CalculatePriceTaxDiscount(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Calculates the price, tax and discount amounts based on the current transaction information. This will not refresh information on trade agreements of prices from the database, but only
            use information that have already been cached. To re-calculate the prices (e.g. after a customer change or to refresh trade agreements) use <see cref="M:LSOne.Services.Interfaces.ITransactionService.RecalculatePriceTaxDiscount(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,System.Boolean,System.Boolean)"/>
            </summary>
            <param name="entry">The connection to the database</param>
            <param name="transaction">The transaction to calculate the amounts for</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITransactionService.RecalculatePriceTaxDiscount(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,System.Boolean,System.Boolean)">
            <summary>
            Calculates the price, tax and discount amounts. This will read all price and trade-agreement information from the database.
            </summary>
            <param name="entry">The connection to the database</param>
            <param name="transaction">The transaction to calculate</param>
            <param name="restoreItemPrices">If true then price- and tax amounts are re-calculated</param>
            <param name="calculateDiscountsNow">If true then the current discount information is cleared and re-fetched from the database</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITransactionService.AddCustomerToTransaction(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISession,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Adds the customer with the given ID to the transaction and re-calculates all prices/discounts for that customer
            </summary>
            <param name="entry">The connection to the database</param>
            <param name="session">The current session</param>
            <param name="transaction">The transaction to add the customer to</param>
            <param name="customerID">The ID of the customer to add</param>
            <param name="processInfocodes">If true the infocodes defined for that customer are also processed, otherwise they are skipped</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITransactionService.ClearCustomerFromTransaction(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction@)">
            <summary>
            Executes the "Clear customer" operation and removes the current customer from the tranasction.
            </summary>
            <param name="entry">The connection to the database</param>
            <param name="transaction">The transaction to clear the customer from</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITransactionService.ConcludeTransaction(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Concludes the transaction and saves it to the database after all payments have been registered (if applicable for the current transaction). This executes the final steps of the transaction like printing, generating a receipt-id, calling any services
            to perform the final steps etc. 
            </summary>
            <param name="entry">The connection to the database</param>
            <param name="transaction">The tranasction to conclude</param>        
        </member>
        <member name="M:LSOne.Services.Interfaces.ITransactionService.LoadTransactionStatus(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,System.Boolean,System.Boolean)">
            <summary>
            Initialises the header information for the transaction such as store-, terminal- and transaction ID.
            </summary>
            <param name="entry">The connection to the database</param>
            <param name="transaction">The transaction to initialize</param>
            <param name="rebuildingTransaction">If true then <paramref name="transaction"/> should be treated as a transaction that is being re-built from the posted transaction tables. Transaction ID and receipt ID information should not be refreshed if this is set to true.</param>
            <param name="generateTransactionID">If true then a new transaction ID will always be generated for the given transaction</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITransactionService.ReturnTransaction(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISession,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean,System.Boolean,System.String)">
            <summary>
            Executes the return process (i.e. show the return dialog) for the given transaction
            </summary>
            <param name="entry">The connection to the database</param>
            <param name="session">The current session</param>
            <param name="transaction">The transaction instance that should be populated with the items to return</param>
            <param name="receiptID">The receipt ID of the transaction to return</param>
            <param name="transactionID">The transaction ID of the transaction to return</param>
            <param name="useCentralReturns">If true the transaction information is retrieved from the Site Service and if a connection cannot be made then the return process is cancelled. If set to false then the transaction is retrieved from the local database and the Site Service connection is not verified.</param>
            <param name="showReasonCodesSelectList">If true the user is prompted to select a reason code for the returned transaction.</param>
            <param name="defaultReasonCodeID">If <paramref name="showReasonCodesSelectList"/> is set to <see langword="false"/> then this value will be used for the reason code</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITransactionService.SetReasonCode(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISession,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Shows the return-transaction dialog so the user can set a reason code for individual sale lines
            </summary>
            <param name="entry">The connection to the database</param>
            <param name="session">The current session</param>
            <param name="transaction">The transaction to set reason codes for</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITransactionService.PrintGiftReceipt(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier)">
            <summary>
            Prints a gift receipt for the given tranasction
            </summary>
            <param name="entry">The connection to the database</param>
            <param name="transaction">The transaction instance that should be populated with the items to print the gift receipt for</param>
            <param name="receiptID">The receipt ID of the transaction to get</param>
            <param name="transactionID">The transaction ID of the transaction to get</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITransactionService.ReturnSequencedNumbers(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,System.Boolean,System.Boolean)">
            <summary>
            Returns the sequenced numbers/IDs on the transaction back to the number sequence
            </summary>
            <param name="entry">The connection to the database</param>
            <param name="posTransaction">The transaction to return the sequenced numbers/IDs for</param>
            <param name="returnReceiptID">If true the <see cref="P:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.ReceiptId"/> for the <paramref name="posTransaction"/> is returned to the number sequence</param>
            <param name="returnTransactionID">If true the <see cref="P:LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction.TransactionId"/> for the <paramref name="posTransaction"/> is returned to the number sequence</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITransactionService.CheckTenderStatusInDrawer(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Goes through the transaction and checks if the current status of the cash-drawer matches the limits that have been defined for the current payments. If any limits have been exceeded this returns the a message that describes what action needs to be taken.
            </summary>
            <param name="entry">The connection to the database</param>
            <param name="posTransaction">The transaction to check</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITransactionService.CreateCloneTransactions">
            <summary>
            Creates an instance of <see cref="T:LSOne.Services.Interfaces.SupportInterfaces.ICloneTransactions"/>
            </summary>
            <returns>An new instance that implements the <see cref="T:LSOne.Services.Interfaces.SupportInterfaces.ICloneTransactions"/> interface</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITransactionService.EmailReceipt(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISession,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.DataLayer.BusinessObjects.Enums.ReceiptEmailParameterEnum,LSOne.DataLayer.BusinessObjects.OperationInfo)">
            <summary>
            Creates and sends an email with the receipt for the given transaction based on the current email configuration for the store.
            </summary>
            <param name="entry">The connection to the database</param>
            <param name="session">The current session</param>
            <param name="transaction">The transaction to email a receipt for</param>
            <param name="currentOption">Controls what receipt to send</param>
            <param name="operationInfo">Information about the current operation</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITransactionService.ReprintReceipt(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISession,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.DataLayer.BusinessObjects.OperationInfo,LSOne.DataLayer.BusinessObjects.Enums.ReprintReceiptEnum,System.String)">
            <summary>
            Reprints a receipt
            </summary>
            <param name="entry">The connection to the database</param>
            <param name="session">The current session</param>
            <param name="transaction">The current transaction</param>
            <param name="operationInfo">Information about the current operation</param>
            <param name="currentReprintType">Controls the type of receipt to reprint</param>
            <param name="customText"></param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITransactionService.CreateAndSendEmailReceipt(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Sends the receipt for the given transaction via email
            </summary>
            <param name="entry">The connection to the database</param>
            <param name="transaction">The tranasction to create a receipt for</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITransactionService.CreateEmailAttachmentName(LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.DataLayer.BusinessObjects.Forms.FormInfo)">
            <summary>
            Creates a file name for the receipt attachment that is going to be emailed. If the transaction is a RetailTransaction then the receipt ID
            is used for the file name otherwise the file name is set to "TRID-" + transaction ID.
            </summary>
            <param name="transaction">The current transaction</param>
            <param name="formInfo">The form that is going to be emailed</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITransactionService.TransactionCanSendEmail(LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            If true then the transaction is allowed to send an email based on the current email configuration for the store.
            </summary>
            <param name="transaction">The current transaction</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITransactionService.SiteServiceConnectionIsNeededandAlive(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.Services.Interfaces.SupportInterfaces.ISettings)">
            <summary>
            Checks if the given transaction requires a Site Service connection
            </summary>
            <param name="entry">The connection to the database</param>
            <param name="transaction">The transaction to check</param>
            <param name="settings">Application settings for the running application</param>
            <returns>True if a connection is needed, false otherwise</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITransactionService.OnPriceOverride(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.DataLayer.BusinessObjects.OperationInfo)">
            <summary>
            Called from the price override operation when the item selected needs special price override functionality.
            In all versions including LS One 2018 this function is only called for a sales order item
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="transaction">The current transaction</param>
            <param name="operationInfo">Information about what is going on in the POS i.e. the item selected, payment line selected and etc</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITransactionService.SetSalesPerson(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISession,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.DataLayer.BusinessObjects.OperationInfo,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean)">
            <summary>
            Set a sales person on the current item in the transaction
            </summary>
            <param name="entry">Database connection</param>
            <param name="session">POS session</param>
            <param name="transaction">Current transaction</param>
            <param name="operationInfo">Current operation info</param>
            <param name="salesPersonID">ID of the sales person to set. If not set, a dialog is displayed.</param>
            <param name="hereAfter">True if all further items added to the transaction will have the same sales person</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITransactionService.CanRunSalesPersonOperation(LSOne.Services.Interfaces.SupportInterfaces.ISettings,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.DataLayer.BusinessObjects.Enums.POSOperations,System.Collections.Generic.LinkedList{LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem})">
            <summary>
            Decide if a sales person operation can be triggered based on the functionality profile settings and the current operation executed
            </summary>
            <param name="settings">Current settings</param>
            <param name="transaction">Current transaction after the main operation was executed</param>
            <param name="operationID">The operation that was executed</param>
            <param name="saleItemsBeforeOperation">The list of sale items from the transaction before the main operation was executed</param>
            <returns>True if a sales operation must be triggered</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITransactionService.CanReturnSaleLineItem(LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem)">
            <summary>
            Returns true if a sale line item is eligible for return
            </summary>
            <param name="item">Sale line item</param>
            <returns></returns>
        </member>
        <member name="T:LSOne.Services.Interfaces.ClientTimeNotSynchronizedException">
            <summary>
            Represents the error when the client (POS or Site Manager) is not in sync with the server. This means that either the Site Service host or the local machine is
            out of sync in regards to date/time.
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITaxService.CalculateTax(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction,LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem)">
            <summary>
            Calculates the tax for a specific item in the transaction.
            </summary>
            <param name="entry">Entry into the data framework</param>
            <param name="retailTransaction">The transaction to be calculated</param>
            <param name="saleLineItem">The sale line item to calculate tax for</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITaxService.CalcAmountsTaxIncluded(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction)">
            <summary>
            Calculates tax for all amounts and discounts
            </summary>
            <param name="entry">Entry into the database</param>
            <param name="saleLineItem">The sale line to be calculated</param>
            <param name="retailTransaction">The transaction to calculate for</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITaxService.CalcAmountsTaxExcluded(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem)">
            <summary>
            Calculate tax for all amounts and discounts
            </summary>
            <param name="entry">Entry into the database</param>
            <param name="saleLineItem">The sale line to be calculated</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITaxService.PricesAreCalculatedWithTax(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Utilities.DataTypes.RecordIdentifier)">
            <summary>
            Returns true if prices are calculated with tax
            </summary>
            <param name="entry">Entry into the database</param>
            <param name="defaultStoreID">The default storeID</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITaxService.CalculateNewItemPrice(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.ItemMaster.RetailItem,System.Boolean,LSOne.Utilities.DataTypes.RecordIdentifier)">
            <summary>
            Calculates new item price for a price struct when a tax group has changed. 
            Note this only handles base price
            </summary>
            <param name="entry">Entry into the database</param>
            <param name="item">The item to be recalculated</param>
            <param name="calculatePriceWithTax">True if prices should be calculated with tax, else false</param>
            <param name="defaultStoresTaxGroupID">The default stores tax group ID</param>
            <returns>True if price actually changed, else false</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITaxService.UpdateTradeAgreementsAndPromotionsForItem(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.ItemMaster.RetailItem,System.Boolean,LSOne.Utilities.DataTypes.RecordIdentifier)">
            <summary>
            Updates trade agreement lines as well as promotion lines for given retail item when tax group has changed.
            </summary>
            <param name="entry">Entry into the database</param>
            <param name="item">The retail item to update the lines for</param>
            <param name="calculatePriceWithTax">True if prices should be calculated with tax, else false</param>
            <param name="defaultStoresTaxGroupID">The default stores tax group ID</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITaxService.CalcTaxExcluded(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction)">
            <summary>
            Simple tax check for an item. The function calculates the taxamount and sets the PriceInclTax variable
            </summary>
            <param name="entry">Entry into the database</param>
            <param name="lineItem">The sale line to be calculated</param>
            <param name="rt">The retail transaction</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITaxService.CalcTaxIncluded(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction)">
            <summary>
            Simple tax check for an item. The function calculates the taxamount and sets the Price variable
            </summary>
            <param name="entry">Entry into the database</param>
            <param name="lineItem">The sale line to be calculated</param>
            <param name="rt">The retail transaction</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITaxService.CalculatePriceWithTax(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.Decimal,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean,System.Decimal,LSOne.Utilities.DataTypes.DecimalLimit)">
            <summary>
            Calculates price with tax based on the given price and the two sales tax groups
            </summary>
            <param name="entry">Entry into the database</param>
            <param name="price">The original price</param>
            <param name="itemSalesTaxGroupID">The item sales tax group ID. TaxCodes that are in this group and in the group defined by salesTaxGroupID will be used to calculate the tax</param>
            <param name="salesTaxGroupID">The sales tax group ID. TaxCodes that are in this group and in the group defined by itemSalesTaxGroupID will be used to calculate the tax</param>
            <param name="hasLastKnownPriceWithTax">True if we supply lastknownPriceWithTax, else false</param>
            <param name="lastKnownPriceWithTax">Last known price with tax, this is for the system to be able to correct it self from rounding inaccurancy. The parameter may be null</param>
            <param name="priceWithTaxLimiter">The decimal limiter used to figure out if the last known price has changed enough, given that hasLastKnownPriceWithTax is true</param>
            <returns>Price with tax</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITaxService.CalculatePriceFromPriceWithTax(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.Decimal,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier)">
            <summary>
            Calculates price without tax based on price with tax
            </summary>
            <param name="entry">Entry into the database</param>
            <param name="priceWithTax">The price with tax</param>
            <param name="itemSalesTaxGroupID">The item sales tax group ID. TaxCodes that are in this group and in the group defined by salesTaxGroupID will be used to calculate the tax</param>
            <param name="salesTaxGroupID">The sales tax group ID. TaxCodes that are in this group and in the group defined by itemSalesTaxGroupID will be used to calculate the tax</param>
            <returns>Price without tax</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITaxService.CalculateTax(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.Decimal,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier)">
            <summary>
            Calculates the tax on an item
            </summary>
            <param name="entry">Entry into the database</param>
            <param name="priceWithoutTax">The items price without tax</param>
            <param name="itemSalesTaxGroupID">The item sales tax group ID. TaxCodes that are in this group and in the group defined by salesTaxGroupID will be used to calculate the tax</param>
            <param name="salesTaxGroupID">The sales tax group ID. TaxCodes that are in this group and in the group defined by itemSalesTaxGroupID will be used to calculate the tax</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITaxService.GetItemTax(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.ItemMaster.RetailItem)">
            <summary>
            Gets an items tax based on its sales price. It is assumed the item is sold on the default store
            </summary>
            <param name="entry">Entry into the database</param>
            <param name="item">The item</param>
            <returns>Items tax based on its sales price</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITaxService.GetItemTaxForAmount(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Utilities.DataTypes.RecordIdentifier,System.Decimal)">
            <summary>
            Gets the tax for an item given a price and that it is sold on the default store 
            </summary>
            <param name="entry">Entry into the database</param>
            <param name="salesTaxItemGroupID">The item</param>
            <param name="amount">The amount to calculate taxes on</param>
            <returns>The tax for an item given a price and that it is sold on the default store </returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITaxService.GetItemPriceForItemPriceWithTax(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Utilities.DataTypes.RecordIdentifier,System.Decimal)">
            <summary>
            Gets an items price given its price with tax. It is assumed the item is sold on the default store
            </summary>
            <param name="entry">Entry into the database</param>
            <param name="salesTaxItemGroupID">The tax group</param>
            <param name="amountWithTax">The amount with tax to calculate amount without tax</param>
            <returns>Items price given its price with tax</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITaxService.UpdatePrices(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.BusinessObjects.Enums.UpdateItemTaxPricesEnum,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Updates prices in the system. Updates include item prices, trade agreement prices, promotion prices. It depends on the 
            default store setting wether prices with or without tax are kept and the other updated.
            </summary>
            <param name="entry">Entry into the database</param>
            <param name="ID">ID related to the change, controled by the parameter updateEnum. The following list describes what each enum means for the ID
            TaxCode: ID = new RecordIdentifier(taxCodeID);
            ItemTaxGroup: ID = new RecordIdentifier(itemTaxGroupID);
            DefaultStoreTaxGroup: ID = new RecordIdentifier(defaultStoreID, defaultStoresTaxGroupID);
            SpecificItemTaxGroup:ID = new RecordIdentifier(itemID, itemSalesTaxGroupID);
            AllItems: ID not used;
            </param>
            <param name="updateEnum">Indicates the type of change happening. This controls what is stored in the ID parameter</param>
            <param name="updatedItemsCount">Count of items that were updated</param>
            <param name="updatedTradeAgreementsCount">Count of trade agreements that were updated</param>
            <param name="updatedPromotionOfferLinesCount">Count of promotion offer lines that were updated</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITaxService.GetCommonTaxCodes(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier)">
            <summary>
            Get common tax codes between an item sales tax group and a sales tax group
            </summary>
            <param name="entry">Entry into the database</param>
            <param name="itemSalesTaxGroupID">ID of the item sales tax group</param>
            <param name="salesTaxGroupID">ID of the sales tax group</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITaxService.GetTaxAmountForPurchaseOrderLine(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Decimal,System.Decimal,System.Decimal,LSOne.DataLayer.BusinessObjects.Enums.TaxCalculationMethodEnum)">
            <summary>
            Gets the tax amount for a purchse order line
            </summary>
            <param name="entry">Entry into the database</param>
            <param name="itemSalesTaxGroupID">Sales tax group id of the item</param>
            <param name="vendorID">ID of the vendor connected to the purchase order</param>
            <param name="storeID">ID of the store connected to the purchase order</param>
            <param name="unitPrice">Unit price of the item</param>
            <param name="discountAmount">Discount amount of the item</param>
            <param name="discountPercentage">Discount percentage of the item</param>
            <param name="taxCalculationMethod">The tax calculation method to use</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITaxService.GetLinesWithPrices(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.Collections.Generic.List{LSOne.DataLayer.BusinessObjects.PricesAndDiscounts.DiscountOfferLine})">
            <summary>
            Looks up extended information for each item in supplied list and adds to the reply.
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="lines"></param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITaxService.ClearTaxExemption(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction)">
            <summary>
            Clears the tax exemption properties of the transaction and recalculates the prices
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="retailTransaction">The current transaction</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITaxService.SetTaxExemption(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction)">
            <summary>
            Asks the user for a tax exemption code and then sets the tax exemption properties of the transaction and recalculates the prices
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="retailTransaction">The current transaction</param>
        </member>
        <member name="T:LSOne.Services.Interfaces.ITaxFreeService">
            <summary>
            Support for tax free / tax refund
            </summary>
        </member>
        <member name="P:LSOne.Services.Interfaces.ITaxFreeService.ShowInJournal">
            <summary>
            Return true to show a button in the daily journal for adding tax free
            </summary>
        </member>
        <member name="M:LSOne.Services.Interfaces.ITaxFreeService.CaptureSale(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Capture information on customer and print tax free slip
            </summary>
            <param name="entry">Entry into database</param>
            <param name="transaction">The transaction to capture</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICalculationService.CalculateTotals(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.Utilities.DataTypes.RecordIdentifier)">
            <summary>
            Calculates all amounts on the transaction
            </summary>
            <param name="entry">Entry into the database</param>
            <param name="posTransaction">The transaction to be calculated</param>
            <param name="currencyCode">POS Should in most cases pass null here then current store currency is used, while on Site Manager a value needs to be passed here</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICalculationService.CalculateLine(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction,LSOne.Utilities.DataTypes.RecordIdentifier)">
            <summary>
            Calculates all amounts on the saleline item such as discount amounts, net amount and etc.
            </summary>
            <param name="entry">Entry into the database</param>
            <param name="saleLineItem">The sale line item that is to be calculated</param>
            <param name="retailTransaction">The retail transaction</param>
            <param name="currencyCode">POS Should in most cases pass null here then current store currency is used, while on Site Manager a value needs to be passed here</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICalculationService.CalculateLine(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction,System.Boolean,LSOne.Utilities.DataTypes.RecordIdentifier)">
            <summary>
            Calculates all amounts on the saleline item such as discount amounts, net amount and etc.
            </summary>
            <param name="entry">Entry into the database</param>
            <param name="saleLineItem">The sale line item that is to be calculated</param>
            <param name="retailTransaction">The retail transaction</param>
            <param name="compareDiscounts">If true then discounts are compared and the best one found for the customer</param>
            <param name="currencyCode">POS Should in most cases pass null here then current store currency is used, while on Site Manager a value needs to be passed here</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICalculationService.CalculatePeriodicDiscountPercent(LSOne.Services.Interfaces.SupportInterfaces.ISaleLineItem,LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction)">
            <summary>
            Calculates the periodic discount percent on a sale line
            </summary>
            <param name="saleLineItem">The sale line item to be calculated</param>
            <param name="retailTransaction">The retail transaction</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.ICalculationService.CalculateChangeBackAmounts(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.Services.Interfaces.SupportInterfaces.ITenderLineItem)">
            <summary>
            Calculates the change-back amounts for the given transaction
            </summary>
            <param name="entry">Entry into the database</param>        
            <param name="transaction">The transaction to calculate the change-back. Transaction of type <see cref="T:LSOne.Services.Interfaces.SupportInterfaces.IRetailTransaction"/> and <see cref="T:LSOne.Services.Interfaces.ICustomerPaymentTransaction"/> are supported</param>
            <param name="lastTenderLineItem">The last tender line of <paramref name="transaction"/> that should be used to calculate the change back from</param>
        </member>
        <member name="M:LSOne.Services.Interfaces.IRoundingService.RoundToUnit(System.Decimal,System.Decimal,LSOne.Services.Interfaces.Enums.RoundMethod)">
            <summary>
            Rounds values to nearest currency unit, i.e 16,45 kr. rounded up if the smallest coin is 10 kr will give 20 kr.
            or if the smallest coin is 24 aurar(0,25 kr.) then if rounded up it will give 16,50 kr.
            </summary>
            <param name="value">The currency value or value to be rounded.</param>
            <param name="unit">The smallest unit to be rounded to.</param>
            <param name="roundMethod">The method of rounding, Nearest,up and down</param>
            <returns>Returns a value rounded to the nearest unit.</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IRoundingService.Round(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.Decimal,System.Int32,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.GenericConnector.Enums.CacheType)">
            <summary>
            Round the value with a certain number of decimals.
            </summary>
            <param name="connection">entry into the data model</param>
            <param name="value">The value to round</param>
            <param name="numberOfDecimals">Number of decimals to round to</param>
            <param name="currencyCode">The currency of the value</param>
            <param name="cacheType">The type of caching to be used, default is CacheType.CacheTypeNone</param>
            <returns>The rounded value</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IRoundingService.Round(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.Decimal,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.GenericConnector.Enums.CacheType)">
            <summary>
            Standard round to minimal coin/value in defined currency
            </summary>
            <param name="connection">entry into the data model</param>
            <param name="value">The value to round</param>
            <param name="currencyCode">The currency of the value</param>
            <param name="cacheType">The type of caching to be used, default is CacheType.CacheTypeNone</param>
            <returns>The rounded value</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IRoundingService.Round(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.Decimal,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean,LSOne.DataLayer.GenericConnector.Enums.CacheType)">
            <summary>
            Standard round to sales rounding
            </summary>
            <param name="connection">entry into the data model</param>
            <param name="value">The value to round</param>
            <param name="currencyCode">The currency of the value</param>
            <param name="useSalesRounding">If true the Currency.RoundOffTypeSales is used otherwise Currency.RoundOffTypeAmount is used</param>
            <param name="cacheType">The type of caching to be used, default is CacheType.CacheTypeNone</param>
            <returns>The rounded value</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IRoundingService.RoundString(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.Decimal,System.Int32,System.Boolean,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.GenericConnector.Enums.CacheType)">
            <summary>
            Rounds the value either using the default store currency or a specific currency code
            </summary>
            <param name="connection">entry into the data model</param>
            <param name="value">The value to round</param>
            <param name="numberOfDecimals">Number of decimals to round to</param>
            <param name="useCurrencySymbol">Set as true if a currency symbol should be added to the string</param>
            <param name="currencyCode">Used if the useStoreCurrency parameter is false to control the rounding</param>
            <param name="cacheType">The type of caching to be used, default is CacheType.CacheTypeNone</param>
            <returns>The rounded value</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IRoundingService.RoundString(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.Decimal,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean,LSOne.DataLayer.GenericConnector.Enums.CacheType)">
            <summary>
            Standard round to minimal coin/value in defined currency
            </summary>
            <param name="connection">entry into the data model</param>
            <param name="value">The value to round</param>
            <param name="currencyCode">Used if the useStoreCurrency parameter is false to control the rounding</param>
            <param name="useCurrencySymbol">Set as true if a currency symbol should be added to the string</param>
            <param name="cacheType">The type of caching to be used, default is CacheType.CacheTypeNone</param>
            <returns>The rounded value</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IRoundingService.RoundForDisplay(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.Decimal,System.Boolean,System.Boolean,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.GenericConnector.Enums.CacheType)">
            <summary>
            Rounding for display: If no decimal places then sales rounding is used otherwise the value rounding is used
            </summary>
            <param name="connection">entry into the data model</param>
            <param name="value">The value to round</param>
            <param name="useCurrencySymbol">Set as true if a currency symbol should be added to the string</param>
            <param name="useSalesRounding">If true the Currency.RoundOffTypeSales is used otherwise Currency.RoundOffTypeAmount is used</param>
            <param name="currencyCode">Used if the useStoreCurrency parameter is false to control the rounding</param>
            <param name="cacheType">The type of caching to be used, default is CacheType.CacheTypeNone</param>
            <returns>The rounded value as string</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IRoundingService.RoundAmountViewer(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.Decimal)">
            <summary>
            Returns a decimal converted as a string with as many decimal numbers as there are in the value
            </summary>
            <param name="connection">entry into the data model</param>
            <param name="value">Value to be converted to string</param>
            <returns>Value as string with the same number of decimals</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IRoundingService.RoundAmountViewer(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.Decimal,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.GenericConnector.Enums.CacheType)">
            <summary>
            Returns a decimal converted as a string with as many decimal numbers as there are in the currencyUnit value
            </summary>
            <param name="connection">entry into the data model</param>
            <param name="value">Amount to be converted to string</param>
            <param name="currencyCode">Returned string should have as many decimals as the value rounding value for the currency</param>
            <param name="cacheType">The type of caching to be used, default is CacheType.CacheTypeNone</param>
            <returns>Amount as string with as many decimals as there are in the currencyCode value</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IRoundingService.RoundAmount(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.Decimal,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.GenericConnector.Enums.CacheType)">
            <summary>
            Rounds the tender value according to the tender type and store
            </summary>
            <param name="connection">entry into the data model</param>
            <param name="value">The value to round</param>
            <param name="storeId">The store id</param>
            <param name="tenderTypeId">The tender type id</param>
            <param name="cacheType">The type of caching to be used, default is CacheType.CacheTypeNone</param>
            <returns>The rounded value</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IRoundingService.RoundAmount(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.Decimal,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.GenericConnector.Enums.CacheType)">
            <summary>
            Rounds the tender value according to store 
            </summary>
            <param name="connection">entry into the data model</param>
            <param name="value">The value to round</param>
            <param name="storeId">The store id</param>
            <param name="tenderTypeId">The tender type id</param>
            <param name="useCurrencySymbol">Set as true if a currency symbol should be added to the string</param>
            <param name="currencyCode">The currency of the value</param>
            <param name="cacheType">The type of caching to be used, default is CacheType.CacheTypeNone</param>
            <returns>The rounded value</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IRoundingService.RoundAmount(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.Decimal,System.Decimal,LSOne.Services.Interfaces.Enums.TenderRoundMethod,System.Boolean,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.GenericConnector.Enums.CacheType)">
            <summary>
            Rounds an amount using the tender type settings except the rounding method is fixed i.e. the tender rounding method is not used
            </summary>
            <param name="entry">entry into the data model</param>
            <param name="value">The value to round</param>
            <param name="roundingValue">The number of decimals the amount should be rounded to i.e. 0,01 or 0,1 or 1,0</param>
            <param name="useCurrencySymbol">Set as true if a currency symbol should be added to the string</param>
            <param name="currencyCode">The currency of the value</param>
            <param name="cacheType">The type of caching to be used, default is CacheType.CacheTypeNone</param>
            <param name="roundMethod">The rounding method that should be used regardless of what the tender settings are</param>
            <returns>The rounded value</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IRoundingService.RoundAmount(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.Decimal,System.Decimal,LSOne.Services.Interfaces.Enums.TenderRoundMethod,LSOne.DataLayer.GenericConnector.Enums.CacheType)">
            <summary>
            Rounds the tender value according to the tender type and store
            </summary>
            <param name="entry">entry into the data model</param>
            <param name="value">The value to round</param>
            <param name="roundingValue">The number of decimals the amount should be rounded to i.e. 0,01 or 0,1 or 1,0</param>
            <param name="roundMethod">The rounding method that should be used regardless of what the tender settings are</param>
            <param name="cacheType">The type of caching to be used, default is CacheType.CacheTypeNone</param>
            <returns>The rounded value</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IRoundingService.IsLessThanSmallestCoin(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.Decimal,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.GenericConnector.Enums.CacheType)">
            <summary>
            Finds if the rounding difference is smaller than the smallest used coin.
            </summary>
            <param name="connection">entry into the data model</param>
            <param name="roundingDifference">The rounding difference between item and payments</param>
            <param name="storeId">The store id</param>
            <param name="tenderTypeId">The tender type id</param>
            <param name="cacheType">The type of caching to be used, default is CacheType.CacheTypeNone</param>
            <returns>Returns true if the rounding difference is smaller than the rounding value</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IRoundingService.IsRoundedEqualToSmallestCoin(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.Decimal,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.GenericConnector.Enums.CacheType)">
            <summary>
            Finds if the rounded rounding difference is equal to the smallest used coin.
            </summary>
            <param name="connection">entry into the data model</param>
            <param name="roundingDifference">The rounding difference between item and payments</param>
            <param name="storeId">The store id</param>
            <param name="tenderTypeId">The tender type id</param>
            <param name="cacheType">The type of caching to be used, default is CacheType.CacheTypeNone</param>
            <returns>Returns true if the rounding difference is smaller than the rounding value</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IRoundingService.TaxRound(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.Decimal,System.Decimal,System.Int32)">
            <summary>
            Standard round of the tax value according to the tax code setup
            </summary>
            <param name="connection">entry into the data model</param>
            <param name="value">The value to round</param>
            <param name="taxRoundOff">The roundoff value</param>
            <param name="taxRoundOffType">The round off type i.e. round nearest, down, up</param>
            <returns>The rounded value</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IRoundingService.RoundQuantity(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.Decimal,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.GenericConnector.Enums.CacheType)">
            <summary>
            Returns the quantity rounded to the correct value of decimals, corresponding to the settings in the Unit table.
            </summary>
            <param name="connection">entry into the data model</param>
            <param name="value">The value to be rounded</param>
            <param name="unitId">The unit the quantity should be rounded to</param>
            <param name="currencyCode">Returned string should have as many decimals as the value rounding value for the currency</param>
            <param name="cacheType">The type of caching to be used, default is CacheType.CacheTypeNone</param>
            <returns>Rounded quanity</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IRoundingService.RoundQuantity(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.Decimal,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.GenericConnector.Enums.CacheType)">
            <summary>
            Returns the quantity rounded to the correct value of decimals, corresponding to the settings in the Unit table or the Decimals settings
            </summary>
            <param name="connection">entry into the data model</param>
            <param name="value">The value to be rounded</param>
            <param name="unitId">The unit the quantity should be rounded to. Not valid when SplitItem is true</param>
            <param name="splitItem">Is the item a split item? If so then the Split Qty DecimalSettings are used</param>
            <param name="currencyCode">The currency of the value</param>
            <param name="cacheType">The type of caching to be used, default is CacheType.CacheTypeNone</param>
            <returns>Rounded quanity</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IRoundingService.RoundQuantity(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.Decimal,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean,LSOne.Utilities.DataTypes.RecordIdentifier,System.Boolean,LSOne.DataLayer.GenericConnector.Enums.CacheType)">
            <summary>
            Returns the quantity rounded to the correct value of decimals, corresponding to the settings in the Unit table or the Decimals settings
            </summary>
            <param name="connection">entry into the data model</param>
            <param name="value">The value to be rounded</param>
            <param name="unitId">The unit the quantity should be rounded to. Not valid when SplitItem is true</param>
            <param name="splitItem">Is the item a split item? If so then the Split Qty DecimalSettings are used</param>
            <param name="currencyCode">The currency of the value</param>
            <param name="showUOM">Whether or not to show the unit ID as a postfix</param>
            <param name="cacheType">The type of caching to be used, default is CacheType.CacheTypeNone</param>
            <returns>Rounded quanity</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IRoundingService.RoundForReceipt(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.Decimal,System.Int32)">
            <summary>
            returns formated string for receipt displaying.
            </summary>
            <param name="connection">entry into the data model</param>
            <param name="value">value to round</param>
            <param name="numberOfDecimals">number of decemal digits</param>
            <returns></returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IRoundingService.RoundPrecision(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,System.Decimal,System.String,LSOne.Utilities.DataTypes.RecordIdentifier,LSOne.DataLayer.GenericConnector.Enums.CacheType)">
            <summary>
            A value rounded to the specified precision
            </summary>
            <param name="connection">entry into the data model</param>
            <param name="value">The value to be rounded</param>
            <param name="priceDecimalPlaces"></param>
            <param name="currencyCode">The currency of the value</param>
            <param name="cacheType">The type of caching to be used, default is CacheType.CacheTypeNone</param>
            <returns>The rounded value as a string</returns>
        </member>
        <member name="M:LSOne.Services.Interfaces.IRoundingService.Validate(System.String)">
            <summary>
            Get a hash key for the specified string
            </summary>
            <param name="validation">String to get a hash for</param>
            <returns>A hash for the string</returns>
        </member>
        <member name="M:SalesOrderInterface.ISalesOrderService.PriceOverride(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction,LSOne.DataLayer.BusinessObjects.OperationInfo)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="posTransaction">The current transaction</param>
            <param name="operationInfo">The parameters and information for the Price override operation</param>
        </member>
        <member name="M:SalesOrderInterface.ISalesOrderService.SalesOrders(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="posTransaction">The current transaction</param>
        </member>
        <member name="M:SalesOrderInterface.ISalesOrderService.SiteServiceIsNeeded(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.Services.Interfaces.SupportInterfaces.IPosTransaction)">
            <summary>
            Returns true if the Site service is needed to conclude a transaction that includes sales order item
            </summary>
            <param name="entry">The entry into the database</param>
            <param name="transaction">The current transaction</param>
            <returns></returns>
        </member>
        <member name="M:SalesOrderInterface.ISalesOrderService.CreatePickingList(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.SalesOrder.SalesOrderRequest)">
            <summary>
            Sends a message to the 3rd party ERP system that a picking list should be printed
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>        
            <param name="salesOrderRequest">Any information needed about the sales order</param>        
            <returns></returns>
        </member>
        <member name="M:SalesOrderInterface.ISalesOrderService.CreatePackingSlip(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.SalesOrder.SalesOrderRequest)">
            <summary>
            Sends a message to the 3rd party ERP system that a packing slip should be printed
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>        
            <param name="salesOrderRequest">Any information needed about the sales order</param>        
            <returns></returns>
        </member>
        <member name="M:SalesOrderInterface.ISalesOrderService.GetSalesOrderList(LSOne.DataLayer.GenericConnector.Interfaces.IConnectionManager,LSOne.DataLayer.BusinessObjects.Profiles.SiteServiceProfile,LSOne.DataLayer.BusinessObjects.SalesOrder.SalesOrderRequest,System.Collections.Generic.List{LSOne.DataLayer.BusinessObjects.SalesOrder.SalesOrder})">
            <summary>
            Returns a list of sales orders for a specific customer. 
            </summary>
            <param name="siteServiceProfile">Which site service to use for this operation</param>
            <param name="entry">The entry into the database</param>        
            <param name="salesOrderRequest">The information needed to get the sales order information</param>
            /// <param name="salesOrders">the list of sales orders found in the search</param>
            <returns></returns>
        </member>
    </members>
</doc>
